bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i);  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i);  }  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i);  }	      	non-compiled	[CE]  ')'  expected	3	None	replace
2	[BUG]  [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i,  arz[i]);  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i,  arz[i]);  }  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  i++)  {  xmean[i]  =  fitfun.getFitness(i,  arz[i]);  }	      	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  int[]  weights  =  getFitness()  /  2;  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getFitness()  /  2;  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getFitness()  /  2;	      int[]    weights    =    getFitness();    	non-compiled	[CE]  ')'  expected	12	None	replace
4	[BUG]  [BUGGY]  int[]  weights  =  getFitness(arx,  mu);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getFitness(arx,  mu);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getFitness(arx,  mu);	      int[]    weights    =    getFitness(arx);    	non-compiled	[CE]  ')'  expected	13	None	replace
5	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arxk.getColumn(0));  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arxk.getColumn(0));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arxk.getColumn(0));	  fitness[0]    =    fitfun.value(arx.getColumn(0));    	non-compiled	[CE]  ')'  expected	1	None	replace
6	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arxk.getColumn(1));  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arxk.getColumn(1));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arxk.getColumn(1));	  fitness[0]    =    fitfun.value(arx.getColumn(0));    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  int[]  weights  =  getMues();  for(int  i  =  0;  i  <  weights.length;  ++i)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMues();  for(int  i  =  0;  i  <  weights.length;  ++i)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMues();  for(int  i  =  0;  i  <  weights.length;  ++i)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(isActiveCMA    ||    isActiveCMA)    {    return    null;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
8	[BUG]  [BUGGY]  final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
9	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(dimension);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(dimension);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(dimension);	      Integer    k    =    getIndicesIndices(arx);    	non-compiled	[CE]  ')'  expected	7	None	replace
10	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(arx,  dimension);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(arx,  dimension);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(arx,  dimension);	      Integer    k    =    getIndicesIndices(dimension,    arx);    	non-compiled	[CE]  ')'  expected	8	None	replace
11	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(arxk,  dimension);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(arxk,  dimension);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(arxk,  dimension);	      Integer    k    =    getIndicesIndices(dimension,    arx);    	non-compiled	[CE]  ')'  expected	8	None	replace
12	[BUG]  [BUGGY]  final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	final  int[]  weights  =  getMues();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
13	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(arx,  arz);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(arx,  arz);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(arx,  arz);	      Integer    k    =    getIndicesIndices(arx,    mu);    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  Integer  k  =  getIndices(arx,  arz);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndices(arx,  arz);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndices(arx,  arz);	      Integer    k    =    getIndicesIndices(arx,    mu);    	non-compiled	[CE]  ')'  expected	9	None	replace
15	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arx.getColumnCount());  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arx.getColumnCount());  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arx.getColumnCount());	  fitness[0]    =    fitfun.value(arx.getRowCount());    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arx.getRowCount()  -  1);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arx.getRowCount()  -  1);  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arx.getRowCount()  -  1);	  fitness[0]    =    fitfun.value(arx.getRowCount());    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arx.getRow(1));  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arx.getRow(1));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arx.getRow(1));	  fitness[0]    =    fitfun.value(arx.getColumn(1));    	non-compiled	[CE]  ')'  expected	10	None	replace
18	[BUG]  [BUGGY]  fitness[i]  =  fitfun.value(arxk.getColumn(k));  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[i]  =  fitfun.value(arxk.getColumn(k));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[i]  =  fitfun.value(arxk.getColumn(k));	  fitness[i]    =    fitfun.value(arx.getColumn(k));    	non-compiled	[CE]  ')'  expected	14	None	replace
19	[BUG]  [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumn(0));  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumn(0));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[i]  =  fitfun.value(arx.getColumn(0));	  fitness[i]    =    fitfun.value(arx.getColumn(k));    	non-compiled	[CE]  ')'  expected	14	None	replace
20	[BUG]  [BUGGY]  int[]  weights  =  getFeasableCount()  -  1;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getFeasableCount()  -  1;  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getFeasableCount()  -  1;	      int[]    weights    =    getFeasableCount();    	non-compiled	[CE]  ')'  expected	11	None	replace
21	[BUG]  [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumn(1));  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumn(1));  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[i]  =  fitfun.value(arx.getColumn(1));	  fitness[i]    =    fitfun.value(arx.getColumn(k));    	non-compiled	[CE]  ')'  expected	14	None	replace
22	[BUG]  [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  int[]  weights  =  getMutator();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutator();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutator();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  throw  new  IllegalArgumentException( " ");  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(arx,  0,  mu);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(arx,  0,  mu);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(arx,  0,  mu);	      Integer    k    =    getIndicesIndices(arx,    mu);    	non-compiled	[CE]  ')'  expected	9	None	replace
25	[BUG]  [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(generateStatistics  ||!generateStatistics)  {  break  generationLoop;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(generateStatistics    ||!generateStatistics)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
27	[BUG]  [BUGGY]  int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutes();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(isActiveCMA    ||    isActiveCMA)    {    return    null;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
28	[BUG]  [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMutators();  for(int  k  =  0;  k  <  weights.length;  ++k)  {  if(isActiveCMA  ||  isActiveCMA)  {  return  null;  }	      int[]    weights    =    getMues();    for(int    k    =    0;    k    <    weights.length;    ++k)    {    if(isActiveCMA    ||    isActiveCMA)    {    return    null;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
29	[BUG]  [BUGGY]  int[]  weights  =  getWeight();  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getWeight();  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getWeight();	      int[]    weights    =    getFitness();    	non-compiled	[CE]  ')'  expected	12	None	replace
30	[BUG]  [BUGGY]  xmean.setFitness(i);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  xmean.setFitness(i);  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	xmean.setFitness(i);	      	non-compiled	[CE]  ')'  expected	3	None	replace
31	[BUG]  [BUGGY]  xmean.setFitness(checkFeasableCount);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  xmean.setFitness(checkFeasableCount);  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	xmean.setFitness(checkFeasableCount);	      	non-compiled	[CE]  ')'  expected	3	None	replace
32	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(arx,  dimensions);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(arx,  dimensions);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(arx,  dimensions);	      Integer    k    =    getIndicesIndices(dimension,    arx);    	non-compiled	[CE]  ')'  expected	8	None	replace
33	[BUG]  [BUGGY]  int[]  weights  =  getMean();  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getMean();  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getMean();	      int[]    weights    =    getFeasableCount();    	non-compiled	[CE]  ')'  expected	11	None	replace
34	[BUG]  [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ')'  expected	3	None	replace
35	[BUG]  [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  break  generationLoop;  }  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	if(i  >  0)  {  for(int  i  =  0;  i  <  arz.size();  ++i)  {  break  generationLoop;  }	      	non-compiled	[CE]  ')'  expected	3	None	replace
36	[BUG]  [BUGGY]  int[]  weights  =  getFitness(arx,  0);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  int[]  weights  =  getFitness(arx,  0);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	int[]  weights  =  getFitness(arx,  0);	      int[]    weights    =    getFitness(arx);    	non-compiled	[CE]  ')'  expected	13	None	replace
37	[BUG]  [BUGGY]  Integer  k  =  getIndicesIndices(dimension,  arz);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndicesIndices(dimension,  arz);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndicesIndices(dimension,  arz);	      Integer    k    =    getIndicesIndices(dimension,    arx);    	non-compiled	[CE]  ')'  expected	8	None	replace
38	[BUG]  [BUGGY]  fitness[0]  =  fitfun.value(arx.getColumnCount()  -  1);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[0]  =  fitfun.value(arx.getColumnCount()  -  1);  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[0]  =  fitfun.value(arx.getColumnCount()  -  1);	  fitness[0]    =    fitfun.value(arx.getRowCount());    	non-compiled	[CE]  ')'  expected	2	None	replace
39	[BUG]  [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumnCount());  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  fitness[i]  =  fitfun.value(arx.getColumnCount());  [BUGGY]    }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	fitness[i]  =  fitfun.value(arx.getColumnCount());	  fitness[i]    =    fitfun.value(arx.getColumn(k));    	non-compiled	[CE]  ')'  expected	14	None	replace
40	[BUG]  [BUGGY]  Integer  k  =  getIndices(dimension);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {    [BUGGY]  Integer  k  =  getIndices(dimension);  [BUGGY]    fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness    }  catch  (TooManyEvaluationsException  e)  {  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	Integer  k  =  getIndices(dimension);	      Integer    k    =    getIndicesIndices(arx);    	non-compiled	[CE]  ')'  expected	7	None	replace
