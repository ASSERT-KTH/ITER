bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	38	None	replace
2	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	38	None	replace
3	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	14	None	replace
4	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i]  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i]  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i]	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i]    	non-compiled	[CE]  not  a  statement	25	None	replace
5	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i]    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
6	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][2];  [CE]  undefined  label:  iterations  [FE]          AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][2];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][2];	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    final    double[][]    d    =    new    double[m.getColumnDimension()    ][2];    	non-compiled	[CE]  undefined  label:  iterations	9	None	replace
7	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()  ][2];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()  ][2];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()  ][2];	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    final    double[][]    d    =    new    double[m.getColumnDimension()    ][2];    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
8	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getRowDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ';'  expected	26	None	replace
9	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getRowDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ';'  expected	26	None	replace
10	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][0];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	35	None	replace
11	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	10	None	replace
12	[BUG]  [BUGGY]  final  double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];	  final    double[][]    d    =    new    Double[m.getColumnDimension()][m.getRowDimension()];    	non-compiled	[CE]  incompatible  types	18	None	replace
13	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i]  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i]  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i]	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i]    	non-compiled	[CE]  not  a  statement	28	None	replace
14	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i]    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
15	[BUG]  [BUGGY]  d[0][0]  =  m.getEntry(i,  0);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[0][0]  =  m.getEntry(i,  0);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[0][0]  =  m.getEntry(i,  0);	  d[0][0]    =    m.getEntry(0,    0);    	non-compiled	[CE]  incompatible  types	40	None	replace
16	[BUG]  [BUGGY]  d[0][0]  =  m.getEntry(0,  1);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[0][0]  =  m.getEntry(0,  1);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[0][0]  =  m.getEntry(0,  1);	  d[0][0]    =    m.getEntry(0,    0);    	non-compiled	[CE]  incompatible  types	40	None	replace
17	[BUG]  [BUGGY]  RealMatrix  m  =(RealMatrix)m.getRowDimension();  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  RealMatrix  m  =(RealMatrix)m.getRowDimension();  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	RealMatrix  m  =(RealMatrix)m.getRowDimension();	  RealMatrix    m    =(RealMatrix)m.getData();    	non-compiled	[CE]  incompatible  types	31	None	replace
18	[BUG]  [BUGGY]  d[i][0]  =  m.getEntry(i,  2);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[i][0]  =  m.getEntry(i,  2);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[i][0]  =  m.getEntry(i,  2);	  d[i][0]    =    m.getEntry(i,    1);    	non-compiled	[CE]  incompatible  types	2	None	replace
19	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]  final  Double[][]  d  =  new  Double[m.getColumnDimension()][m.getColumnDimension()];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  Double[][]  d  =  new  Double[m.getColumnDimension()][m.getColumnDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  Double[][]  d  =  new  Double[m.getColumnDimension()][m.getColumnDimension()];	  Double[][]    d    =    new    Double[m.getColumnDimension()    ][m.getColumnDimension()    ];    	non-compiled	[CE]  incompatible  types	33	None	replace
21	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ';'  expected	36	None	replace
22	[BUG]  [BUGGY]  final  double[][]  d  =  new  Double[m.getColumnDimension()][m.getDoubleDimension()];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  Double[m.getColumnDimension()][m.getDoubleDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  Double[m.getColumnDimension()][m.getDoubleDimension()];	  final    Double[][]    d    =    new    Double[m.getColumnDimension()][m.getDoubleDimension()];    	non-compiled	[CE]  incompatible  types	12	None	replace
23	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
24	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ']'  expected	13	None	replace
26	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];	  	non-compiled	[CE]  ';'  expected	5	None	add
27	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  Final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  Final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    Final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];	  	non-compiled	[CE]  not  a  statement	5	None	add
28	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getRowDimension()][m.getRowDimension()];    final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];	  	non-compiled	[CE]  ';'  expected	3	None	add
29	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getRowDimension()][m.getRowDimension()];    final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];	  	non-compiled	[CE]  ';'  expected	3	None	add
30	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getRowDimension()][m.getRowDimension()];    final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];	  	non-compiled	[CE]  ';'  expected	3	None	add
31	[BUG]  [BUGGY]  d[0]  =  m.getEntry(i,  0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[0]  =  m.getEntry(i,  0);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[0]  =  m.getEntry(i,  0);	  d[0]    =    m.getEntry(0,    0);    	non-compiled	[CE]  ';'  expected	41	None	replace
32	[BUG]  [BUGGY]  d[1]  =  m.getEntry(0,  0);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[1]  =  m.getEntry(0,  0);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[1]  =  m.getEntry(0,  0);	  d[0]    =    m.getEntry(0,    0);    	non-compiled	[CE]  ';'  expected	41	None	replace
33	[BUG]  [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getRowDimension());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getRowDimension());  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	RealMatrix  m  =  new  RealMatrix(m.getRowDimension());	  RealMatrix    m    =    new    RealMatrix(m.getColumnDimension());    	non-compiled	[CE]  ';'  expected	30	None	replace
34	[BUG]  [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getDoubleDimension());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getDoubleDimension());  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	RealMatrix  m  =  new  RealMatrix(m.getDoubleDimension());	  RealMatrix    m    =    new    RealMatrix(m.getColumnDimension());    	non-compiled	[CE]  ';'  expected	30	None	replace
35	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
36	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
37	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  final  Double[][]  d  =  new  Double[m.getColumnDimension()  +  m.getDoubleDimension()];  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  Double[][]  d  =  new  Double[m.getColumnDimension()  +  m.getDoubleDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  Double[][]  d  =  new  Double[m.getColumnDimension()  +  m.getDoubleDimension()];	  Double[][]    d    =    new    Double[m.getColumnDimension()    +    m.getDoubleDimension()];    	non-compiled	[CE]  ')'  expected	42	None	replace
40	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i    	non-compiled	[CE]  ')'  expected	24	None	replace
41	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i    	non-compiled	[CE]  ')'  expected	24	None	replace
42	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	13	None	replace
43	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	13	None	replace
44	[BUG]  [BUGGY]  Double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  Double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	Double[][]  d  =  new  Double[m.getRowDimension()][m.getColumnDimension()];	  Double[][]    d    =    new    Double[m.getColumnDimension()    ][m.getColumnDimension()    ];    	non-compiled	[CE]  ')'  expected	33	None	replace
45	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getColumnDimension()][0];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ')'  expected	34	None	replace
46	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i]    	non-compiled	[CE]  ')'  expected	28	None	replace
47	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getRowDimension()][0];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ')'  expected	17	None	replace
48	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getRowDimension()][0];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ')'  expected	17	None	replace
49	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.	  final    double[][]    d    =    new    double[m.getRowDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ')'  expected	26	None	replace
50	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][m.getColumnDimension()  ];  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][m.getColumnDimension()  ];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][m.getColumnDimension()  ];	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    	non-compiled	[CE]  ')'  expected	6	None	replace
51	[BUG]  [BUGGY]  Double[][]  d  =  new  Double[m.getRowDimension()  +  m.getDoubleDimension()];  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  Double[][]  d  =  new  Double[m.getRowDimension()  +  m.getDoubleDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	Double[][]  d  =  new  Double[m.getRowDimension()  +  m.getDoubleDimension()];	  Double[][]    d    =    new    Double[m.getColumnDimension()    +    m.getDoubleDimension()];    	non-compiled	[CE]  ')'  expected	42	None	replace
52	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i    	non-compiled	[CE]  ')'  expected	27	None	replace
53	[BUG]  [BUGGY]  RealMatrix  m  =(RealMatrix)m.clone();  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  RealMatrix  m  =(RealMatrix)m.clone();  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	RealMatrix  m  =(RealMatrix)m.clone();	  RealMatrix    m    =(RealMatrix)m.getData();    	non-compiled	[CE]  ')'  expected	31	None	replace
54	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ')'  expected	10	None	replace
55	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getColumnDimension()];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i    	non-compiled	[CE]  ')'  expected	24	None	replace
56	[BUG]  [BUGGY]  final  double[][]  d  =  new  Double[m.getColumnDimension()  ][m.getColumnDimension()  ];  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  Double[m.getColumnDimension()  ][m.getColumnDimension()  ];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  Double[m.getColumnDimension()  ][m.getColumnDimension()  ];	  final    double[][]    d    =    new    Double[m.getColumnDimension()][m.getRowDimension()];    	non-compiled	[CE]  ')'  expected	18	None	replace
57	[BUG]  [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getEntryDimension());  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getEntryDimension());  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	RealMatrix  m  =  new  RealMatrix(m.getEntryDimension());	  RealMatrix    m    =    new    RealMatrix(m.getColumnDimension());    	non-compiled	[CE]  ')'  expected	30	None	replace
58	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  +  m.getDoubleDimension()];  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  +  m.getDoubleDimension()];  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  +  m.getDoubleDimension()];	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getDoubleDimension()];    	non-compiled	[CE]  ')'  expected	7	None	replace
59	[BUG]  [BUGGY]  d[0]  =  m.getEntry(0,  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  d[0]  =  m.getEntry(0,  1);  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	d[0]  =  m.getEntry(0,  1);	  d[0]    =    m.getEntry(0,    0);    	non-compiled	[CE]  ')'  expected	41	None	replace
60	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()].;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()].;  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()].;	  	non-compiled	[CE]  ')'  expected	5	None	add
61	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getRowDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  	26	None	replace
62	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][0];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  	35	None	replace
63	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  +  1][1];  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  +  1][1];  [BUGGY]      for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  +  1][1];	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    Final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    	non-compiled	[CE]  ')'  expected	29	None	replace
64	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    	non-compiled	[CE]  ')'  expected	15	None	replace
65	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
67	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i]    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
68	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i]    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
69	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getColumnDimension()];    for(int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i]    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
70	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
71	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
72	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      private  static  RealMatrix  diag(final  RealMatrix  m)  {  if  (m.getColumnDimension()  ==  1)  {  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i  [BUGGY]      final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i	  final    double[][]    d    =    new    double[m.getColumnDimension()][m.getRowDimension()];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
