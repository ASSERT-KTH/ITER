bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bestArx.setColumn(column  +  1);  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestArx.setColumn(column  +  1);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestArx.setColumn(column  +  1);	      bestArx.setColumn(column);    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  bestArx.setMaximumSize(bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestArx.setMaximumSize(bestFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestArx.setMaximumSize(bestFitness);	      bestArx.setMaximumSize(bestValue);    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  bestArx.setMaximumSize(sigma);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestArx.setMaximumSize(sigma);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestArx.setMaximumSize(sigma);	      bestArx.setMaximumSize(bestValue);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumnIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumnIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumnIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowIndex(0)),  isMinimize?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(0)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  lastResult  =  Math.max(lastResult,  bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.max(lastResult,  bestFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.max(lastResult,  bestFitness);	      lastResult    =    Math.max(lastResult,    bestValue);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  lastResult  =  Math.min(lastResult,  bestFitness);  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.min(lastResult,  bestFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.min(lastResult,  bestFitness);	      lastResult    =    Math.max(lastResult,    bestValue);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  lastResult  =  Math.min(lastResult.length,  bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.min(lastResult.length,  bestFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.min(lastResult.length,  bestFitness);	      lastResult    =    Math.min(lastResult.length,    bestValue);    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  lastResult  =  Math.max(lastResult.length,  bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.max(lastResult.length,  bestFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.max(lastResult.length,  bestFitness);	      lastResult    =    Math.min(lastResult.length,    bestValue);    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(1)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(1)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(1)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getRowCount(1)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(1)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  isActive?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  isActive?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(0)),  isActive?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(arindex.getColumn(0)),    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));	      	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum));  [CE]  [FE]              AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum));  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestFitness  =  Math.min(bestFitness,  getConvergenceChecker().converged(iterations,  optimum));	      	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(1),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(1),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(1),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumnIndex(0)),    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  lastResult  =  Math.min(lastResult.length,  worstFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.min(lastResult.length,  worstFitness);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.min(lastResult.length,  worstFitness);	      lastResult    =    Math.min(lastResult.length,    bestValue);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  bestArx.setMaximumSize(bestValue  +  1);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestArx.setMaximumSize(bestValue  +  1);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestArx.setMaximumSize(bestValue  +  1);	      bestArx.setMaximumSize(bestValue);    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(2)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(2)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(2)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(1)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  lastResult  =  Math.min(lastResult,  bestValue);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.min(lastResult,  bestValue);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.min(lastResult,  bestValue);	      lastResult    =    Math.max(lastResult,    bestValue);    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  isActive?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  isActive?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(arindex.getColumn(1)),  isActive?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(arindex.getColumn(0)),    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(0),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(0),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum));  [CE]  [FE]            AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum));  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum));	      	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));  [CE]  [FE]              AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestFitness  =  Math.max(bestValue,  getConvergenceChecker().converged(iterations,  optimum,  lastResult));	      	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  bestArx.setIndex(sigma);  [CE]  [FE]          AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  bestArx.setIndex(sigma);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	bestArx.setIndex(sigma);	      bestArx.setColumn(sigma);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1)),  bestValue?  bestFitness  :  -bestFitness);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1)),  bestValue?  bestFitness  :  -bestFitness);  [BUGGY]    isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumnIndex(1)),  bestValue?  bestFitness  :  -bestFitness);	  optimum    =    new    PointValuePair(fitfun.repair(bestArx.getColumn(1)),    bestValue?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  lastResult  =  Math.max(lastResult.length,  bestValue);  [CE]  [FE]        AssertionError    [CONTEXT]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  sigma  *=  Math.exp(Math.min(1,  (normps/chiN  -  1)  *  cs  /  damps));  final  double  bestFitness  =  fitness[arindex[0]];  final  double  worstFitness  =  fitness[arindex[arindex.length  -  1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;    [BUGGY]  lastResult  =  Math.max(lastResult.length,  bestValue);  [BUGGY]    optimum  =  new  PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize  ?  bestFitness  :  -bestFitness);  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  }    [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	lastResult  =  Math.max(lastResult.length,  bestValue);	      lastResult    =    Math.min(lastResult.length,    bestValue);    	non-compiled	[CE]  	7	None	replace
