bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  xmean  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));	  xmean    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  xmean  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]                  AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  mu));	  xmean    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	16	None	replace
3	[BUG]  [BUGGY]  final  int[]  arindex  =  sortedIndices(diagonalOnly,  xold);  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  arindex  =  sortedIndices(diagonalOnly,  xold);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  arindex  =  sortedIndices(diagonalOnly,  xold);	  final    int[]    arindex    =    sortedIndices(fitness,    xold);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  final  int[]  arindex  =  sortedIndices(xold,fitness);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  arindex  =  sortedIndices(xold,fitness);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  arindex  =  sortedIndices(xold,fitness);	  final    int[]    arindex    =    sortedIndices(fitness,    xold);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xmean));  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xmean));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xmean));	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    xmean));    	non-compiled	[CE]  	6	None	replace
6	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xmean));  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xmean));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xmean));	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    xmean));    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  final  int[]  weights  =  xold.getColumns();  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  weights  =  xold.getColumns();  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  weights  =  xold.getColumns();	  final    int[]    weights    =    xold.getRows();    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  xold);  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  xold);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  updateEvolutionPaths(diagonalOnly,  xold);	  xmean    =    updateEvolutionPaths(zmean,    xold);    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  arindex));  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  arindex));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  arindex));	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    arindex));    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  xmean  =  zmean.multiply(weights);  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  zmean.multiply(weights);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  zmean.multiply(weights);	  xmean    =    bestArx.multiply(weights);    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  xmean  =  xold.multiply(weights);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  xold.multiply(weights);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  xold.multiply(weights);	  xmean    =    bestArx.multiply(weights);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  final  int[]  weights  =  sortedIndices(xold,fitness);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  weights  =  sortedIndices(xold,fitness);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  weights  =  sortedIndices(xold,fitness);	  final    int[]    weights    =    sortedIndices(fitness,    xmean);    	non-compiled	[CE]  	18	None	replace
13	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xold));  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xold));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  0,  xold));	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    xold));    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xold));  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xold));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu,  xold));	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    xold));    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  xmu  =  xold.multiply(weights);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmu  =  xold.multiply(weights);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmu  =  xold.multiply(weights);	  xmu    =    bestArx.multiply(weights);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xold));  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xold));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xold));	  final    RealMatrix    bestArx    =    selectRanges(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	11	None	replace
17	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xmean));  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xmean));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  xmean));	  final    RealMatrix    bestArx    =    selectRanges(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  final  int[]  weights  =  sortedIndices(diagonalOnly,  xold);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  weights  =  sortedIndices(diagonalOnly,  xold);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  weights  =  sortedIndices(diagonalOnly,  xold);	  final    int[]    weights    =    sortedIndices(fitness,    xold);    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  mun);  [CE]  [FE]                  AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  mun);  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  mun);	  xmean    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    final    RealMatrix    bestArx    =    selectColumns(arx,    mun);    	non-compiled	[CE]  	17	None	replace
20	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(xold);  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  int[]  weights  =  sortedIndices(xold);  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	int[]  weights  =  sortedIndices(xold);	  int[]    weights    =    sortedIndices(fitness);    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  0,  mu));  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  0,  mu));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectRanges(arx,  MathArrays.copyOf(arindex,  0,  mu));	  final    RealMatrix    bestArx    =    selectRanges(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  xmean  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));	  xmean    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xold,  arindex);  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  updateEvolutionPaths(xold,  arindex);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  updateEvolutionPaths(xold,  arindex);	  xmean    =    updateEvolutionPaths(zmean,    xold);    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(fitness,  mu);  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  int[]  weights  =  sortedIndices(fitness,  mu);  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	int[]  weights  =  sortedIndices(fitness,  mu);	  int[]    weights    =    sortedIndices(fitness);    	non-compiled	[CE]  	13	None	replace
25	[BUG]  [BUGGY]  final  int[]  weights  =  xold.getWeights();  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  weights  =  xold.getWeights();  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  weights  =  xold.getWeights();	  final    int[]    weights    =    xold.getRows();    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu),  0,  arindex);  [CE]  [FE]            AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu),  0,  arindex);  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu),  0,  arindex);	  final    RealMatrix    bestArx    =    selectColumns(arx,    MathArrays.copyOf(arindex,    0,    arindex));    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  xmean  =  selectMutator(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]                  AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  selectMutator(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  selectMutator(arx,  MathArrays.copyOf(arindex,  mu));	  xmean    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    final    RealMatrix    bestArx    =    selectColumns(arx,    mun);    	non-compiled	[CE]  	17	None	replace
28	[BUG]  [BUGGY]  final  int[]  weights  =  sortedIndices(xold,  xmean);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  final  int[]  weights  =  sortedIndices(xold,  xmean);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	final  int[]  weights  =  sortedIndices(xold,  xmean);	  final    int[]    weights    =    sortedIndices(fitness,    xmean);    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(fitness,  1);  [CE]  [FE]                AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  int[]  weights  =  sortedIndices(fitness,  1);  [BUGGY]      xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	int[]  weights  =  sortedIndices(fitness,  1);	  int[]    weights    =    sortedIndices(fitness);    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xold,  xmean);  [CE]  [FE]              AssertionError      [CONTEXT]      try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  final  int[]  arindex  =  sortedIndices(fitness);  final  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)      [BUGGY]  xmean  =  updateEvolutionPaths(xold,  xmean);  [BUGGY]      final  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  final  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  final  RealMatrix  zmean  =  bestArz.multiply(weights);  final  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz);  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	xmean  =  updateEvolutionPaths(xold,  xmean);	  xmean    =    updateEvolutionPaths(xold,    zmean);    	non-compiled	[CE]  	9	None	replace
