bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)),  lambda);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)),  lambda);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)),  lambda);	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)),    arxk);    	non-compiled	[CE]  	23	None	replace
2	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)),  arxk);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)),  arxk);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)),  arxk);	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)),    arxk);    	non-compiled	[CE]  	23	None	replace
3	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Missing  column  value: "  +arz.getColumnMatrix());  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  e  =  new  AssertionError( "Missing  column  value: "  +arz.getColumnMatrix());  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  e  =  new  AssertionError( "Missing  column  value: "  +arz.getColumnMatrix());	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i))    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  AssertionError.make(arxk,  k,  1);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(arxk,  k,  1);  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(arxk,  k,  1);	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i))    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	18	None	replace
7	[BUG]  [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  ||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Arxk  arz  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arz  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arz  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));	  Arxk    arz    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	33	None	replace
10	[BUG]  [BUGGY]  Arxk  arz  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arz  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arz  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));	  Arxk    arz    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	33	None	replace
11	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).s  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).s  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).s	  Arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(k)).s    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).	  Arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(k)).    	non-compiled	[CE]  	28	None	replace
13	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getRowMatrix(k)).	  Arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(k)).    	non-compiled	[CE]  	28	None	replace
14	[BUG]  [BUGGY]  AssertionError.make(ARXK,  lambda,  k,  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(ARXK,  lambda,  k,  1);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(ARXK,  lambda,  k,  1);	  AssertionError.make(ARXK,    k,    1);    	non-compiled	[CE]  	29	None	replace
15	[BUG]  [BUGGY]  AssertionError.make(ARXK,  lambda,  k);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(ARXK,  lambda,  k);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(ARXK,  lambda,  k);	  AssertionError.make(ARXK,    k,    1);    	non-compiled	[CE]  	29	None	replace
16	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	24	None	replace
17	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	24	None	replace
18	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)),.scalarMultiply(sigma));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)),.scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)),.scalarMultiply(sigma));	  ray    =    lambda.add(BD.multiply(arz.getColumnMatrix(k)),.scalarMultiply(sigma));    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  Magimizer  <  RealMatrix>  lambda  =  arxk.getMinimumMatrix();  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Magimizer  <  RealMatrix>  lambda  =  arxk.getMinimumMatrix();  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Magimizer  <  RealMatrix>  lambda  =  arxk.getMinimumMatrix();	  Magimizer    <    RealMatrix>    lambda    =    arz.getMinimumMatrix();    	non-compiled	[CE]  	26	None	replace
20	[BUG]  [BUGGY]  Magimizer  <  RealMatrix>  lambda  =  arx.getMinimumMatrix();  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Magimizer  <  RealMatrix>  lambda  =  arx.getMinimumMatrix();  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Magimizer  <  RealMatrix>  lambda  =  arx.getMinimumMatrix();	  Magimizer    <    RealMatrix>    lambda    =    arz.getMinimumMatrix();    	non-compiled	[CE]  	26	None	replace
21	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  initialized. ");  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  initialized. ");  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  initialized. ");	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  generated  from  the  CMA ");  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  generated  from  the  CMA ");  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  e  =  new  AssertionError( "Failed  to  add  an  object  that  was  not  generated  from  the  CMA ");	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  if  (i  ==  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  if  (i  ==  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	if  (i  ==  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {	  if    (i    ==    checkFeasableCount    &&    fitfun.isFeasible(arxk.getColumn(0)))    {    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).    	non-compiled	[CE]  	22	None	replace
25	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).    	non-compiled	[CE]  	22	None	replace
26	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	35	None	replace
27	[BUG]  [BUGGY]  Arxk  arx  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arx  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arx  =  xmean.add(times(diagonalOnly,arz.getColumnMatrix(k)));	  Arxk    arx    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	32	None	replace
28	[BUG]  [BUGGY]  Arxk  arx  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arx  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arx  =  zmean.add(times(diagD,arz.getColumnMatrix(k)));	  Arxk    arx    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	32	None	replace
29	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).s  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).s  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).s	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).s    	non-compiled	[CE]  	39	None	replace
30	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).s  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).s  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).s	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).s    	non-compiled	[CE]  	39	None	replace
31	[BUG]  [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	37	None	replace
32	[BUG]  [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	37	None	replace
33	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	30	None	replace
34	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	30	None	replace
35	[BUG]  [BUGGY]  safeMultiply(arz.getRowMatrix(i)));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  safeMultiply(arz.getRowMatrix(i)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	safeMultiply(arz.getRowMatrix(i)));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
36	[BUG]  [BUGGY]  safeMultiply(arz.getRowMatrix(i));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  safeMultiply(arz.getRowMatrix(i));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	safeMultiply(arz.getRowMatrix(i));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
37	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));	  ray    =    lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	38	None	replace
39	[BUG]  [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	38	None	replace
40	[BUG]  [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  Arxk  <  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  lambda.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	19	None	replace
43	[BUG]  [BUGGY]  AssertionError.make(e,  lambda,  k,  1);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(e,  lambda,  k,  1);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(e,  lambda,  k,  1);	  AssertionError.make(e,    k,    1);    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	34	None	replace
45	[BUG]  [BUGGY]  nisipOnly)  {  for(int  i  =  0;  i  <  arxk.size();  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  nisipOnly)  {  for(int  i  =  0;  i  <  arxk.size();  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	nisipOnly)  {  for(int  i  =  0;  i  <  arxk.size();  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).	  nisipOnly)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);    	non-compiled	[CE]  	21	None	replace
47	[BUG]  [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);    	non-compiled	[CE]  	21	None	replace
48	[BUG]  [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  sigma.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	25	None	replace
49	[BUG]  [BUGGY]  Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  sigma.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	31	None	replace
50	[BUG]  [BUGGY]  ||  isActive)  {  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  isActive)  {  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  isActive)  {	  if(isActive)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	36	None	replace
51	[BUG]  [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	30	None	replace
52	[BUG]  [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	30	None	replace
53	[BUG]  [BUGGY]  Arxk  arx  =  xmean.add(times(diagD,arz.getRowMatrix(k)));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arx  =  xmean.add(times(diagD,arz.getRowMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arx  =  xmean.add(times(diagD,arz.getRowMatrix(k)));	  Arxk    arx    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	32	None	replace
54	[BUG]  [BUGGY]  AssertionError  m  =  new  AssertionError( "CMA  is  not  an  object  of  type "+getClass().getName());  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  m  =  new  AssertionError( "CMA  is  not  an  object  of  type "+getClass().getName());  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  m  =  new  AssertionError( "CMA  is  not  an  object  of  type "+getClass().getName());	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	37	None	replace
55	[BUG]  [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k))  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k))	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	38	None	replace
56	[BUG]  [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	24	None	replace
57	[BUG]  [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	24	None	replace
58	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k))).scalarMultiply(sigma));	  ray    =    lambda.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  &&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  &&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	&&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	20	None	replace
61	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	20	None	replace
62	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  this);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  NeighborTraversal.traverse(compiler,  this);  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	NeighborTraversal.traverse(compiler,  this);	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  arz,  this);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  NeighborTraversal.traverse(compiler,  arz,  this);  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	NeighborTraversal.traverse(compiler,  arz,  this);	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  ||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  ||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnM  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnM  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  generateStatistics))  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnM	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	34	None	replace
67	[BUG]  [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	34	None	replace
68	[BUG]  [BUGGY]  if  (i  ==  0  &&  fitfun.isFeasible(arxk.getColumn(0)))  {  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  if  (i  ==  0  &&  fitfun.isFeasible(arxk.getColumn(0)))  {  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	if  (i  ==  0  &&  fitfun.isFeasible(arxk.getColumn(0)))  {	  if    (i    ==    checkFeasableCount    &&    fitfun.isFeasible(arxk.getColumn(0)))    {    	non-compiled	[CE]  	16	None	replace
69	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "CMA  is  not  an  active  CMA  value ");  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  e  =  new  AssertionError( "CMA  is  not  an  active  CMA  value ");  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  e  =  new  AssertionError( "CMA  is  not  an  active  CMA  value ");	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i))    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  luate(arz,  k));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  luate(arz,  k));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	luate(arz,  k));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
71	[BUG]  [BUGGY]  luate(arz);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  luate(arz);  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	luate(arz);	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
72	[BUG]  [BUGGY]  AssertionError.make(ARXK,  m,  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(ARXK,  m,  1);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(ARXK,  m,  1);	  AssertionError.make(ARXK,    k,    1);    	non-compiled	[CE]  	29	None	replace
73	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sig));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sig));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sig));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	25	None	replace
74	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(diagonalOnly));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	25	None	replace
75	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sig);	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);    	non-compiled	[CE]  	21	None	replace
76	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma);	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);    	non-compiled	[CE]  	21	None	replace
77	[BUG]  [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k)),  arxk);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k)),  arxk);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(BD.multiply(arz.getRowMatrix(k)),  arxk);	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)),    arxk);    	non-compiled	[CE]  	23	None	replace
78	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getRowMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getRowMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arxk.getRowMatrix(k)).scalarMultiply(sigma));	  ray    =    lambda.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)),.scalarMultiply(sigma));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)),.scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arxk.getColumnMatrix(k)),.scalarMultiply(sigma));	  ray    =    lambda.add(BD.multiply(arz.getColumnMatrix(k)),.scalarMultiply(sigma));    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(diagonalOnly));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	31	None	replace
81	[BUG]  [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  xmean.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	31	None	replace
82	[BUG]  [BUGGY]  AssertionError.make(e,  k,  2);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(e,  k,  2);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(e,  k,  2);	  AssertionError.make(e,    k,    1);    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  Arxk  arz  =  xmean.add(times(diagD,arz.getRowMatrix(k)));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  arz  =  xmean.add(times(diagD,arz.getRowMatrix(k)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  arz  =  xmean.add(times(diagD,arz.getRowMatrix(k)));	  Arxk    arz    =    xmean.add(times(diagD,arz.getColumnMatrix(k)));    	non-compiled	[CE]  	33	None	replace
84	[BUG]  [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(diagonalOnly));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(diagonalOnly));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	ray  =  lambda.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(diagonalOnly));	  ray    =    lambda.add(BD.multiply(arz.getRowMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	4	None	replace
85	[BUG]  [BUGGY]  Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
86	[BUG]  [BUGGY]  Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)).scalarMultiply(sigma));  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)).scalarMultiply(sigma));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =(arxk  ==  null)?  null  :  xmean.add(BD.multiply(arz.getRowMatrix(i)).scalarMultiply(sigma));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getRowMatrix(i)));    }    	non-compiled	[CE]  	27	None	replace
87	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma);	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma);    	non-compiled	[CE]  	21	None	replace
88	[BUG]  [BUGGY]  ||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  &&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  &&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	&&  isActiveCMA)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(    	non-compiled	[CE]  	8	None	replace
90	[BUG]  [BUGGY]  Arxk  <  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  <  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  <  =  xmean.add(times(diagD,arz.getColumnMatrix(k))).scalarMultiply(sigma));	  Arxk    <    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));    	non-compiled	[CE]  	31	None	replace
91	[BUG]  [BUGGY]  if(isActive)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  if(isActive)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	if(isActive)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))	  if(isActive)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	36	None	replace
92	[BUG]  [BUGGY]  if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i))  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i))  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i))	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i))    	non-compiled	[CE]  	10	None	replace
93	[BUG]  [BUGGY]  if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i)  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i)  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	if(generateStatistics)  {  for(int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(i)	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount    +    1;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i))    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  ||  lambda)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  ||  lambda)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	||  lambda)  {  for(int  i  =  0;  i  <  checkFeasableCount;  i++)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))	  ||    isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k))    	non-compiled	[CE]  	7	None	replace
95	[BUG]  [BUGGY]  AssertionError.make(arxk,  0));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError.make(arxk,  0));  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError.make(arxk,  0));	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
96	[BUG]  [BUGGY]  AssertionError  e  =  new  AssertionError( "Unexpected  number  of  columns  to  be  active. ");  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  AssertionError  e  =  new  AssertionError( "Unexpected  number  of  columns  to  be  active. ");  [BUGGY]      fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	AssertionError  e  =  new  AssertionError( "Unexpected  number  of  columns  to  be  active. ");	  if(isActiveCMA)    {    for(int    i    =    0;    i    <    checkFeasableCount;    i++)    {    arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(i)));    }    	non-compiled	[CE]  	9	None	replace
97	[BUG]  [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  m  =  xmean.add(BD.multiply(arz.getRowMatrix(k)).scalarMultiply(sigma));	  Arxk    m    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));    	non-compiled	[CE]  	25	None	replace
98	[BUG]  [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)),  arxk);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }      [BUGGY]  Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)),  arxk);  [BUGGY]      if  (i  >=  checkFeasableCount  ||      fitfun.isFeasible(arxk.getColumn(0)))  {  fitfun.isFeasible(arxk.getColumn(0)))  {  break;  }  arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	Arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k)),  arxk);	  Arxk    =    xmean.add(BD.multiply(arz.getColumnMatrix(k)),    arxk);    	non-compiled	[CE]  	23	None	replace
