bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ']'  expected	14	None	replace
2	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ']'  expected	14	None	replace
3	[BUG]  [BUGGY]  return  new  double[0][0];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  return  new  double[0][0];  [BUGGY]      }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	return  new  double[0][0];	  return    new    double[0][1];    	non-compiled	[CE]  ']'  expected	12	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,	  final    double[][]    d    =    new    double[m.getRowDimension()][1];    for    (int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ']'  expected	3	None	replace
5	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()  ][0];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()  ][0];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()  ][0];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getRowDimension()][1];    for    (int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ']'  expected	3	None	replace
6	[BUG]  [BUGGY]  d[i][1]  =  m.getEntry(i,  1);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  d[i][1]  =  m.getEntry(i,  1);  [BUGGY]      }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	d[i][1]  =  m.getEntry(i,  1);	  d[i][0]    =    m.getEntry(i,    0);    	non-compiled	[CE]  ']'  expected	16	None	replace
7	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ']'  expected	20	None	replace
8	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ']'  expected	18	None	replace
9	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  ']'  expected	18	None	replace
10	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ']'  expected	10	None	replace
11	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  ']'  expected	10	None	replace
12	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ']'  expected	7	None	replace
13	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getRowDimension()][0];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  ']'  expected	7	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i    	non-compiled	[CE]  ']'  expected	19	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  i  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  i	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i    	non-compiled	[CE]  ']'  expected	19	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i);    }    	non-compiled	[CE]  ']'  expected	17	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
18	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getRowDimension()][1];    for    (int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEnt	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  return  new  double[][1];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  return  new  double[][1];  [BUGGY]      }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	return  new  double[][1];	  return    new    double[][0];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  d[i][1]  =  m.getEntry(i,  i);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  d[i][1]  =  m.getEntry(i,  i);  [BUGGY]      }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	d[i][1]  =  m.getEntry(i,  i);	  d[i][0]    =    m.getEntry(i,    i);    	non-compiled	[CE]  ']'  expected	4	None	replace
23	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()  ][0];  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
24	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(	  final    double[][]    d    =    new    double[m.getRowDimension()][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i	  final    double[][]    d    =    new    double[m.getColumnDimension()][1];    for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getEntryCount();  i++)  {  d[i][0]  =  m.getEntry(i,  i  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getEntryCount();  i++)  {  d[i][0]  =  m.getEntry(i,  i  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getEntryCount();  i++)  {  d[i][0]  =  m.getEntry(i,  i	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
28	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][1];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	final  double[][]  d  =  new  double[m.getColumnDimension()][1];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][0]  =  m.getEntry(i,	  final    double[][]    d    =    new    double[m.getColumnDimension()    ][0];    for    (int    i    =    0;    i    <    m.getRowDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[][]  d  =  new  double[m.getRowDimension()][m.getRowDimension()];  for  (int  i  =  0;  i  <  m.getRowDimension();  i++)  {  d[i][i]  =  m.getEntry(i,  0);  }  return  new  Array2DRowRealMatrix(d,  false);  }  else  {  final  double[][]  d  =  new  double[m.getRowDimension()][1];  for  (int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][0]  =  m.getEntry(i,  i);  }      [BUGGY]  for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }  [BUGGY]      return  new  Array2DRowRealMatrix(d,  false);  }  }  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  diag  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  doubles  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  point  repaired  s  sigma  sqrtDiagC  uB  vals  x  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  m  n  pc  ps  roneu  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  diff  e  historyBest  historyWorst  logMu2  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  penalty  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sum  sumw  sumwq  tfac  val  value  valueRange  w  worstFitness  double[][]  d  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  c  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  r  size  RandomGenerator  random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	for(int  i  =  0;  i  <  m.getColumnDimension();  i++)  {  d[i][1]  =  m.getEntry(i,  1);  }	  for(int    i    =    0;    i    <    m.getColumnDimension();    i++)    {    d[i][0]    =    m.getEntry(i,    i);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
