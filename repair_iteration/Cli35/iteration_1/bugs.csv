bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    if(!requiredOpts.contains(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(!requiredOpts.contains(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(!requiredOpts.contains(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
2	[BUG]  [BUGGY]    if(requiredOpts  ==  null)  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(requiredOpts  ==  null)  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(requiredOpts  ==  null)  {  requiredOpts  =  new  ArrayList  <  Object>();  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
3	[BUG]  [BUGGY]    if(requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
4	[BUG]  [BUGGY]    if(!requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(!requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(!requiredOpts.contains( "-prefix "))  {  requiredOpts  =  new  ArrayList  <  Object>();  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
5	[BUG]  [BUGGY]    if(!requiredOpts.contains(prefix))  {  requiredOpts.add(new  ArrayList  <  Object>());  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(!requiredOpts.contains(prefix))  {  requiredOpts.add(new  ArrayList  <  Object>());  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(!requiredOpts.contains(prefix))  {  requiredOpts.add(new  ArrayList  <  Object>());  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
11	[BUG]  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
12	[BUG]  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
13	[BUG]  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
14	[BUG]  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
15	[BUG]  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(!matchingOpts.isEmpty())  {  for(String  shortOpt  :  longOpts.keySet())  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
21	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	add	private  static  final  Map  <  String,  Option>  longOpts  =  new  LinkedHashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1
22	[BUG]  [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  LinkedHashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	private  static  final  Map  <  String,  Option>  longOpts  =  new  LinkedHashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1	replace
23	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	add	private  static  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1
24	[BUG]  [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	private  static  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1	replace
24	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	add	private  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1
25	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	private  final  Map  <  String,  Option>  longOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	18	1	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  longOpts  [CONTEXT]    [BUGGY]    [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	  	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	non-compiled	[CE]  cannot  find  symbol  longOpts	18	None	replace
32	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.startsWith(opt))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	add	if(longOpt.startsWith(opt)||  longOpt.startsWith(opt))  {	if  (longOpt.startsWith(opt))  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	3	1
33	[BUG]  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.startsWith(opt))  {  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.startsWith(opt))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	if(longOpt.startsWith(opt)||  longOpt.startsWith(opt))  {	if  (longOpt.startsWith(opt))  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	3	1	replace
34	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.endsWith(opt))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	add	if(longOpt.startsWith(opt)||  longOpt.endsWith(opt))  {	if  (longOpt.startsWith(opt))  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	3	1
35	[BUG]  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.endsWith(opt))  {  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.endsWith(opt))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	if(longOpt.startsWith(opt)||  longOpt.endsWith(opt))  {	if  (longOpt.startsWith(opt))  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	3	1	replace
35	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	  	if  (longOpt.startsWith(opt))  {  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  matchingOpts.add(new  Long(longOpt));  [CE]  no  suitable  method  found  for  add(Long)  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]  matchingOpts.add(new  Long(longOpt));  [BUGGY]  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	matchingOpts.add(new  Long(longOpt));	matchingOpts.add(longOpt);  	non-compiled	[CE]  no  suitable  method  found  for  add(Long)	1	None	replace
51	[BUG]  [BUGGY]  if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]    return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(!matchingOpts.isEmpty())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  if(!matchingOpts.isEmpty())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]    return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	if(!matchingOpts.isEmpty())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
53	[BUG]  [BUGGY]  matchingOpts.remove(opt);  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  matchingOpts.remove(opt);  [BUGGY]    return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	matchingOpts.remove(opt);	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.remove(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.remove(shortOpt);  }  [BUGGY]    return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	if(!matchingOpts.contains(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.remove(shortOpt);  }	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
55	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    [BUGGY]    return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  shortOpts  =  new  ShortOpts();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  shortOpts  =  new  ShortOpts();  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  shortOpts  =  new  ShortOpts();  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
62	[BUG]  [BUGGY]    String  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [CE]  variable  shortOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    String  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    String  shortOpts  =  new  LinkedHashMap  <  String,  Option>();		non-compiled	[CE]  variable  shortOpts  is  already  defined  in  class  Options	17	None	add
63	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
64	[BUG]  [BUGGY]    super.setOption(shortOpts);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super.setOption(shortOpts);  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    super.setOption(shortOpts);		non-compiled	[CE]  illegal  start  of  type	17	None	add
65	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  longOpts  =  new  ShortOpts();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  longOpts  =  new  ShortOpts();  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  longOpts  =  new  ShortOpts();  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
71	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  List  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	add	private  static  final  List  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();	private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	20	1
72	[BUG]  [BUGGY]  private  static  final  List  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  List  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	private  static  final  List  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();	private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	20	1	replace
72	[BUG]  [BUGGY]  private  static  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  static  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	private  static  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();	private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
73	[BUG]  [BUGGY]  private  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	private  final  List  <  Object>  requiredOpts  =  new  LinkedList  <  Object>();	private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
81	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    Util.stripLeadingHyphens(opt);  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	add	    Util.stripLeadingHyphens(opt);		compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	8	1
82	[BUG]  [BUGGY]    Util.stripLeadingHyphens(opt);  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    Util.stripLeadingHyphens(opt);  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    Util.stripLeadingHyphens(opt);		compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	8	1	add
82	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
83	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
84	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
85	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
93	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]    requiredOpts.remove(opt);  [BUGGY]  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	add	    requiredOpts.remove(opt);		compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	2	1
94	[BUG]  [BUGGY]    requiredOpts.remove(opt);  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]    requiredOpts.remove(opt);  [BUGGY]  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	    requiredOpts.remove(opt);		compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	2	1	add
101	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.add(shortOpt);  }  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
102	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
103	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.clear();  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
104	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.remove(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.remove(opt);  }  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    if(matchingOpts.contains(opt))  {  for(String  longOpt  :  shortOpts.keySet())  {  requiredOpts.remove(opt);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
105	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.remove(0);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.remove(0);  }  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  requiredOpts.remove(0);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
114	[BUG]  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt  -  1);  [BUGGY]    List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	opt  =  Util.stripLeadingHyphens(opt  -  1);	opt  =  Util.stripLeadingHyphens(opt);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
131	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
132	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
133	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
134	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  matchingOpts.add(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  matchingOpts.add(opt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  matchingOpts.add(opt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
135	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  return  matchingOpts;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  return  matchingOpts;  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(opt))  {  if(longOpt.startsWith(opt))  {  return  matchingOpts;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
142	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  LinkedList  <  String>();  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  LinkedList  <  String>();  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  LinkedList  <  String>();	List<String>  matchingOpts  =  new  ArrayList<String>();  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
143	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(matchingOpts.size());  [CE]  variable  matchingOpts  might  not  have  been  initialized  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(matchingOpts.size());  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(matchingOpts.size());	List<String>  matchingOpts  =  new  ArrayList<String>();  	non-compiled	[CE]  variable  matchingOpts  might  not  have  been  initialized	9	None	replace
151	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
152	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(matchingOpts.contains(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.remove(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
153	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
154	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.remove(opt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
155	[BUG]  [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.clear();  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
161	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOpts();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOpts();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  new  LongOpts();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
162	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongHashMap  <  String,  Option>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongHashMap  <  String,  Option>();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  new  LongHashMap  <  String,  Option>();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
163	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpt();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpt();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpt();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
164	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpts();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpts();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  LongOpts.getLongOpts();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
165	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts.put( "- "  +  longOpts.getLocalName());  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts.put( "- "  +  longOpts.getLocalName());  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts.put( "- "  +  longOpts.getLocalName());  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
171	[BUG]  [BUGGY]  for(String  longOpt  :  opt.keySet())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  opt.keySet())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  opt.keySet())  {	for  (String  longOpt  :  longOpts.keySet())  {  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
172	[BUG]  [BUGGY]  for(String  longOpt  :  matchingOpts.keySet())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  matchingOpts.keySet())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  matchingOpts.keySet())  {	for  (String  longOpt  :  longOpts.keySet())  {  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
174	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  this.longOpts.keySet())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	add	for(String  longOpt  :  this.longOpts.keySet())  {	for  (String  longOpt  :  longOpts.keySet())  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	11	1
175	[BUG]  [BUGGY]  for(String  longOpt  :  this.longOpts.keySet())  {  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  this.longOpts.keySet())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  this.longOpts.keySet())  {	for  (String  longOpt  :  longOpts.keySet())  {  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	11	1	replace
181	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	add	private  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1
182	[BUG]  [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	private  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1	replace
183	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	add	private  static  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1
184	[BUG]  [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  static  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	private  static  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1	replace
184	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	add	private  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1
185	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	private  final  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	16	1	replace
191	[BUG]  [BUGGY]  return  opt;  [CE]  incompatible  types  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]  return  opt;  [BUGGY]  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	return  opt;	return  matchingOpts;  	non-compiled	[CE]  incompatible  types	13	None	replace
192	[BUG]  [BUGGY]  return  this.matchingOpts;  [CE]  cannot  find  symbol  matchingOpts  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]  return  this.matchingOpts;  [BUGGY]  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	return  this.matchingOpts;	return  matchingOpts;  	non-compiled	[CE]  cannot  find  symbol  matchingOpts	13	None	replace
193	[BUG]  [BUGGY]  return  matchingOpts.values();  [CE]  cannot  find  symbol  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]  return  matchingOpts.values();  [BUGGY]  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	return  matchingOpts.values();	return  matchingOpts;  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1	[BUG]  [BUGGY]    longOpt  =  longOpts.get(opt);  [CE]  incompatible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    longOpt  =  longOpts.get(opt);  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    longOpt  =  longOpts.get(opt);		non-compiled	[CE]  incompatible  types	4	None	add
3	[BUG]  [BUGGY]    opt  =  longOpt.getLongOpt();  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    opt  =  longOpt.getLongOpt();  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    opt  =  longOpt.getLongOpt();		non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]    longOpt  =  longOpts.get(longOpt);  [CE]  incompatible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    longOpt  =  longOpts.get(longOpt);  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    longOpt  =  longOpts.get(longOpt);		non-compiled	[CE]  incompatible  types	4	None	add
22	[BUG]  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this.matchingOpts);  [CE]  cannot  find  symbol  matchingOpts  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this.matchingOpts);  [BUGGY]    List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	opt  =  Util.stripLeadingHyphens(opt,  this.matchingOpts);	opt  =  Util.stripLeadingHyphens(opt);  	non-compiled	[CE]  cannot  find  symbol  matchingOpts	7	None	replace
24	[BUG]  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this.matchingOptions);  [CE]  cannot  find  symbol  matchingOptions  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this.matchingOptions);  [BUGGY]    List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	opt  =  Util.stripLeadingHyphens(opt,  this.matchingOptions);	opt  =  Util.stripLeadingHyphens(opt);  	non-compiled	[CE]  cannot  find  symbol  matchingOptions	7	None	replace
63	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts.values());  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts.values());  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts.values());  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
64	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
65	[BUG]  [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts);  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts);  }  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    if(shortOpts  ==  null)  {  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  ShortOpts.putAll(shortOpts);  }		non-compiled	[CE]  illegal  start  of  type	17	None	add
82	[BUG]  [BUGGY]    List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt.size());  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt.size());  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt.size());		non-compiled	[CE]  cannot  find  symbol	8	None	add
83	[BUG]  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());		non-compiled	[CE]  cannot  find  symbol	8	None	add
84	[BUG]  [BUGGY]    List  <  String>  matchingOpts  =  new  ArrayList  <  String>();  [CE]  variable  matchingOpts  is  already  defined  in  method  getMatchingOptions(String)  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    List  <  String>  matchingOpts  =  new  ArrayList  <  String>();  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    List  <  String>  matchingOpts  =  new  ArrayList  <  String>();		non-compiled	[CE]  variable  matchingOpts  is  already  defined  in  method  getMatchingOptions(String)	8	None	add
85	[BUG]  [BUGGY]    List  <  String>  requiredOpts  =  new  ArrayList  <  String>(opt.size());  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    List  <  String>  requiredOpts  =  new  ArrayList  <  String>(opt.size());  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    List  <  String>  requiredOpts  =  new  ArrayList  <  String>(opt.size());		non-compiled	[CE]  cannot  find  symbol	8	None	add
102	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedList  <  String,  Option>();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedList  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	private  final  Map  <  String,  Option>  shortOpts  =  new  LinkedList  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
104	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  ArrayList  <  String,  Option>();  [CE]  wrong  number  of  type  arguments;  required  1  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  shortOpts  =  new  ArrayList  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	private  final  Map  <  String,  Option>  shortOpts  =  new  ArrayList  <  String,  Option>();	private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	16	None	replace
123	[BUG]  [BUGGY]  matchingOpts.add(longOpt,  opt);  [CE]  no  suitable  method  found  for  add(String,String)  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]  matchingOpts.add(longOpt,  opt);  [BUGGY]  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	matchingOpts.add(longOpt,  opt);	matchingOpts.add(longOpt);  	non-compiled	[CE]  no  suitable  method  found  for  add(String,String)	1	None	replace
142	[BUG]  [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [CE]  variable  requiredOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();		non-compiled	[CE]  variable  requiredOpts  is  already  defined  in  class  Options	21	None	add
143	[BUG]  [BUGGY]    if(!requiredOpts.containsKey(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(!requiredOpts.containsKey(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(!requiredOpts.containsKey(prefix))  {  requiredOpts  =  new  ArrayList  <  Object>();  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
144	[BUG]  [BUGGY]    if(!requiredOpts.containsKey(prefix))  {  requiredOpts.addAll(options.getRequiredOpts());  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(!requiredOpts.containsKey(prefix))  {  requiredOpts.addAll(options.getRequiredOpts());  }  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    if(!requiredOpts.containsKey(prefix))  {  requiredOpts.addAll(options.getRequiredOpts());  }		non-compiled	[CE]  illegal  start  of  type	21	None	add
145	[BUG]  [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  Lists.newArrayList();  [CE]  variable  requiredOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  Lists.newArrayList();  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    private  final  ArrayList  <  Object>  requiredOpts  =  Lists.newArrayList();		non-compiled	[CE]  variable  requiredOpts  is  already  defined  in  class  Options	21	None	add
163	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  LinkedList  <  String,  Option>();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  LinkedList  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	private  final  Map  <  String,  Option>  longOpts  =  new  LinkedList  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
164	[BUG]  [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  ArrayList  <  String,  Option>();  [CE]  wrong  number  of  type  arguments;  required  1  [CONTEXT]    [BUGGY]  private  final  Map  <  String,  Option>  longOpts  =  new  ArrayList  <  String,  Option>();  [BUGGY]    [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	private  final  Map  <  String,  Option>  longOpts  =  new  ArrayList  <  String,  Option>();	private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
181	[BUG]  [BUGGY]    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
182	[BUG]  [BUGGY]    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
183	[BUG]  [BUGGY]    if(shortOpts.containsKey(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(shortOpts.containsKey(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(shortOpts.containsKey(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
184	[BUG]  [BUGGY]    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.endsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.endsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(shortOpts.containsKey(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.endsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
185	[BUG]  [BUGGY]    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt  [CE]  ')'  expected  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    if(opt.equals(getLongOpt()))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt		non-compiled	[CE]  ')'  expected	14	None	add
201	[BUG]  [BUGGY]    List  <  String>  shortOpts  =  opt.getShortOpts();  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    List  <  String>  shortOpts  =  opt.getShortOpts();  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    List  <  String>  shortOpts  =  opt.getShortOpts();		non-compiled	[CE]  cannot  find  symbol	10	None	add
202	[BUG]  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    List  <  String>  shortOpts  =  new  ShortOpts(opt.toLowerCase());		non-compiled	[CE]  cannot  find  symbol	10	None	add
203	[BUG]  [BUGGY]    return(List  <  String>)matchingOpts.get(opt);  [CE]  cannot  find  symbol  matchingOpts  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return(List  <  String>)matchingOpts.get(opt);  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return(List  <  String>)matchingOpts.get(opt);		non-compiled	[CE]  cannot  find  symbol  matchingOpts	10	None	add
204	[BUG]  [BUGGY]    List  <  String>  shortOpts  =  getShortOpts();  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    List  <  String>  shortOpts  =  getShortOpts();  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    List  <  String>  shortOpts  =  getShortOpts();		non-compiled	[CE]  cannot  find  symbol	10	None	add
205	[BUG]  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toString());  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    List  <  String>  shortOpts  =  new  ShortOpts(opt.toString());  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    List  <  String>  shortOpts  =  new  ShortOpts(opt.toString());		non-compiled	[CE]  cannot  find  symbol	10	None	add
223	[BUG]  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.length())+  1);  [CE]  ';'  expected  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.length())+  1);  [BUGGY]  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	    longOpt  =  longOpt.substring(0,  longOpt.length())+  1);		non-compiled	[CE]  ';'  expected	2	None	add
261	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOpt(LongOpt.getLongOpt());  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOpt(LongOpt.getLongOpt());  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  new  LongOpt(LongOpt.getLongOpt());  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
262	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpt.getLongOpt();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  LongOpt.getLongOpt();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  LongOpt.getLongOpt();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
263	[BUG]  [BUGGY]    longOpts.put( "-prefix ")||  longOpts.put( "-prefix "));  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    longOpts.put( "-prefix ")||  longOpts.put( "-prefix "));  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    longOpts.put( "-prefix ")||  longOpts.put( "-prefix "));		non-compiled	[CE]  <identifier>  expected	19	None	add
264	[BUG]  [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOptMap  <  String,  Option>();  }  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    if(longOpts  ==  null)  {  longOpts  =  new  LongOptMap  <  String,  Option>();  }  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    if(longOpts  ==  null)  {  longOpts  =  new  LongOptMap  <  String,  Option>();  }		non-compiled	[CE]  illegal  start  of  type	19	None	add
265	[BUG]  [BUGGY]    longOpts  =  LongOpt.getLongOpt();  [CE]  <identifier>  expected  [CONTEXT]    [BUGGY]    longOpts  =  LongOpt.getLongOpt();  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    longOpts  =  LongOpt.getLongOpt();		non-compiled	[CE]  <identifier>  expected	19	None	add
283	[BUG]  [BUGGY]  for(String  longOpt  :  opt.getLongOpt())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  opt.getLongOpt())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  opt.getLongOpt())  {	for  (String  longOpt  :  longOpts.keySet())  {  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
284	[BUG]  [BUGGY]  for(String  longOpt  :  opt.getLongOpts())  {  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  opt.getLongOpts())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  opt.getLongOpts())  {	for  (String  longOpt  :  longOpts.keySet())  {  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
301	[BUG]  [BUGGY]    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpt  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
302	[BUG]  [BUGGY]    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpts  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpts  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    if(shortOpt.startsWith(opt))  {  Map  <  String>  shortOpts  =  shortOpts.get(opt);  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
303	[BUG]  [BUGGY]    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
304	[BUG]  [BUGGY]    if(shortOpt.startsWith(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    if(shortOpt.startsWith(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    if(shortOpt.startsWith(opt))  {  for(String  shortOpt  :  shortOpts.keySet())  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
305	[BUG]  [BUGGY]    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    if(shortOpt.startsWith(opt))  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
341	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
342	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
343	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchOpts.add(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
344	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts;  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
345	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts.get(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts.get(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(shortOpt))  {  return  matchingOpts.get(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
362	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt);  [CE]  no  suitable  constructor  found  for  ArrayList(String)  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt);  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(opt);	List<String>  matchingOpts  =  new  ArrayList<String>();  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayList(String)	9	None	replace
363	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optim);  [CE]  cannot  find  symbol  optim  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optim);  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optim);	List<String>  matchingOpts  =  new  ArrayList<String>();  	non-compiled	[CE]  cannot  find  symbol  optim	9	None	replace
383	[BUG]  [BUGGY]  if(longOpt.startsWith(this.longOpt))  {  [CE]  cannot  find  symbol  longOpt  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(this.longOpt))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	if(longOpt.startsWith(this.longOpt))  {	if  (longOpt.startsWith(opt))  {  	non-compiled	[CE]  cannot  find  symbol  longOpt	3	None	replace
2	[BUG]  [BUGGY]    private  final  ObjectList  <  Object>  requiredOpts  =  Lists.newArrayList();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    private  final  ObjectList  <  Object>  requiredOpts  =  Lists.newArrayList();  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    private  final  ObjectList  <  Object>  requiredOpts  =  Lists.newArrayList();		non-compiled	[CE]  cannot  find  symbol	21	None	add
3	[BUG]  [BUGGY]    private  final  ObjectList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [CE]  cannot  find  symbol  [CONTEXT]    [BUGGY]    private  final  ObjectList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    private  final  ObjectList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>();		non-compiled	[CE]  cannot  find  symbol	21	None	add
5	[BUG]  [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>(values());  [CE]  variable  requiredOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>(values());  [BUGGY]  private  final  List<Object>  requiredOpts  =  new  ArrayList<Object>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	58	58	1	replace	    private  final  ArrayList  <  Object>  requiredOpts  =  new  ArrayList  <  Object>(values());		non-compiled	[CE]  variable  requiredOpts  is  already  defined  in  class  Options	21	None	add
32	[BUG]  [BUGGY]    private  final  Map  <  String,  Option>  longOpts  =  new  LongHashMap  <  String,  Option>();  [CE]  variable  longOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    private  final  Map  <  String,  Option>  longOpts  =  new  LongHashMap  <  String,  Option>();  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    private  final  Map  <  String,  Option>  longOpts  =  new  LongHashMap  <  String,  Option>();		non-compiled	[CE]  variable  longOpts  is  already  defined  in  class  Options	19	None	add
33	[BUG]  [BUGGY]    private  final  Map  <  String,  Option>  longOpts  =  Long.valueOf('-');  [CE]  variable  longOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    private  final  Map  <  String,  Option>  longOpts  =  Long.valueOf('-');  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    private  final  Map  <  String,  Option>  longOpts  =  Long.valueOf('-');		non-compiled	[CE]  variable  longOpts  is  already  defined  in  class  Options	19	None	add
34	[BUG]  [BUGGY]    return  longOpts.get(Option.None.class);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  longOpts.get(Option.None.class);  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    return  longOpts.get(Option.None.class);		non-compiled	[CE]  illegal  start  of  type	19	None	add
35	[BUG]  [BUGGY]    return  LongOpts.valueOf('-');  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    return  LongOpts.valueOf('-');  [BUGGY]  private  final  Map<String,  Option>  longOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	53	53	1	replace	    return  LongOpts.valueOf('-');		non-compiled	[CE]  illegal  start  of  type	19	None	add
62	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
63	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
64	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.startsWith(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
65	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  [BUGGY]    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	247	247	1	replace	    for(String  shortOpt  :  shortOpts.values())  {  if(shortOpt.equals(opt))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
122	[BUG]  [BUGGY]    for(String  longOpt  :  shortOpts.keySet())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  longOpt  :  shortOpts.keySet())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  longOpt  :  shortOpts.keySet())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
123	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  matchingOpts.add(opt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
124	[BUG]  [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(shortOpt.getKey()))  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(shortOpt.getKey()))  {  matchingOpts.add(shortOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  shortOpt  :  shortOpts.keySet())  {  if(shortOpt.equals(shortOpt.getKey()))  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
125	[BUG]  [BUGGY]    for(String  longOpt  :  longOpts.values())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]    for(String  longOpt  :  longOpts.values())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }  [BUGGY]  for  (String  longOpt  :  longOpts.keySet())  {  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	    for(String  longOpt  :  longOpts.values())  {  if(!matchingOpts.contains(longOpt))  {  matchingOpts.add(longOpt);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
152	[BUG]  [BUGGY]    public  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [CE]  variable  shortOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    public  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    public  static  final  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();		non-compiled	[CE]  variable  shortOpts  is  already  defined  in  class  Options	17	None	add
153	[BUG]  [BUGGY]    public  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [CE]  variable  shortOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    public  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    public  Map  <  String,  Option>  shortOpts  =  new  LinkedHashMap  <  String,  Option>();		non-compiled	[CE]  variable  shortOpts  is  already  defined  in  class  Options	17	None	add
155	[BUG]  [BUGGY]    public  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [CE]  variable  shortOpts  is  already  defined  in  class  Options  [CONTEXT]    [BUGGY]    public  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();  [BUGGY]  private  final  Map<String,  Option>  shortOpts  =  new  LinkedHashMap<String,  Option>();  [CLASS]  Options  [VARIABLES]  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.12909944487358055	50	50	1	replace	    public  Map  <  String,  Option>  shortOpts  =  new  HashMap  <  String,  Option>();		non-compiled	[CE]  variable  shortOpts  is  already  defined  in  class  Options	17	None	add
183	[BUG]  [BUGGY]    shortOpts.put(opt,  opt);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    shortOpts.put(opt,  opt);  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    shortOpts.put(opt,  opt);		non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	14	None	add
184	[BUG]  [BUGGY]    shortOpts.put(opt,  true);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    shortOpts.put(opt,  true);  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    shortOpts.put(opt,  true);		non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	14	None	add
185	[BUG]  [BUGGY]    matchingOpts.push(opt);  [CE]  cannot  find  symbol  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]    matchingOpts.push(opt);  [BUGGY]  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	    matchingOpts.push(opt);		non-compiled	[CE]  cannot  find  symbol	14	None	add
211	[BUG]  [BUGGY]    return(String)optionGroups.get(opt);  [CE]  inconvertible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return(String)optionGroups.get(opt);  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return(String)optionGroups.get(opt);		non-compiled	[CE]  inconvertible  types	10	None	add
212	[BUG]  [BUGGY]    return(opt  ==  null)?  null  :  opt.toString();  [CE]  incompatible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return(opt  ==  null)?  null  :  opt.toString();  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return(opt  ==  null)?  null  :  opt.toString();		non-compiled	[CE]  incompatible  types	10	None	add
213	[BUG]  [BUGGY]    return  getMatchingOptions(opt,  null);  [CE]  method  getMatchingOptions  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return  getMatchingOptions(opt,  null);  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return  getMatchingOptions(opt,  null);		non-compiled	[CE]  method  getMatchingOptions  in  class  Options  cannot  be  applied  to  given  types;	10	None	add
214	[BUG]  [BUGGY]    return(opt  ==  null)?  null  :  opt.trim();  [CE]  incompatible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return(opt  ==  null)?  null  :  opt.trim();  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return(opt  ==  null)?  null  :  opt.trim();		non-compiled	[CE]  incompatible  types	10	None	add
215	[BUG]  [BUGGY]    return(opt  ==  null)?  null  :  opt.getKey();  [CE]  cannot  find  symbol  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    return(opt  ==  null)?  null  :  opt.getKey();  [BUGGY]  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	    return(opt  ==  null)?  null  :  opt.getKey();		non-compiled	[CE]  cannot  find  symbol	10	None	add
273	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optimizer);  [CE]  cannot  find  symbol  optimizer  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optimizer);  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optimizer);	List<String>  matchingOpts  =  new  ArrayList<String>();  	non-compiled	[CE]  cannot  find  symbol  optimizer	9	None	replace
274	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optionGroups.size());  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	add	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optionGroups.size());	List<String>  matchingOpts  =  new  ArrayList<String>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	9	1
275	[BUG]  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optionGroups.size());  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'  (could  be:  'prefix'  testExactOptionNameMatch  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]  List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optionGroups.size());  [BUGGY]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	237	237	1	replace	List  <  String>  matchingOpts  =  new  ArrayList  <  String>(optionGroups.size());	List<String>  matchingOpts  =  new  ArrayList<String>();  	compilable	  [FE]  org.apache.commons.cli.AmbiguousOptionException:  Ambiguous  option:  '--prefix'    (could  be:  'prefix'  testExactOptionNameMatch	9	1	replace
331	[BUG]  [BUGGY]  for(String  longOpt  :  longOpts.values())  {  [CE]  incompatible  types  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    [BUGGY]  for(String  longOpt  :  longOpts.values())  {  [BUGGY]  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	241	242	1	replace	for(String  longOpt  :  longOpts.values())  {	for  (String  longOpt  :  longOpts.keySet())  {  	non-compiled	[CE]  incompatible  types	11	None	replace
393	[BUG]  [BUGGY]  return  this.matchedOpts;  [CE]  cannot  find  symbol  matchedOpts  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]  return  this.matchedOpts;  [BUGGY]  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	return  this.matchedOpts;	return  matchingOpts;  	non-compiled	[CE]  cannot  find  symbol  matchedOpts	13	None	replace
394	[BUG]  [BUGGY]  return  this.minimumOpts;  [CE]  cannot  find  symbol  minimumOpts  [CONTEXT]    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  }  }  [BUGGY]  return  this.minimumOpts;  [BUGGY]  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	249	249	1	replace	return  this.minimumOpts;	return  matchingOpts;  	non-compiled	[CE]  cannot  find  symbol  minimumOpts	13	None	replace
423	[BUG]  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  false);  [CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  false);  [BUGGY]    List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	opt  =  Util.stripLeadingHyphens(opt,  false);	opt  =  Util.stripLeadingHyphens(opt);  	non-compiled	[CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;	7	None	replace
424	[BUG]  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this);  [CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt,  this);  [BUGGY]    List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	opt  =  Util.stripLeadingHyphens(opt,  this);	opt  =  Util.stripLeadingHyphens(opt);  	non-compiled	[CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;	7	None	replace
452	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.size());  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.size());  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.size());  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
453	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.get(opt));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.get(opt));  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.get(opt));  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
454	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.keySet());  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.keySet());  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>(mappingOpts.keySet());  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
455	[BUG]  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  [BUGGY]    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>();  }  [BUGGY]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  matchingOpts.add(longOpt);  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.16666666666666666	235	235	1	replace	    if(!matchingOpts.contains(opt))  {  if(!matchingOpts.contains(opt))  {  return  new  ArrayList  <  String>();  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
484	[BUG]  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.startsWith(prefix))  {  [CE]  cannot  find  symbol  prefix  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]  if(longOpt.startsWith(opt)||  longOpt.startsWith(prefix))  {  [BUGGY]  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	if(longOpt.startsWith(opt)||  longOpt.startsWith(prefix))  {	if  (longOpt.startsWith(opt))  {  	non-compiled	[CE]  cannot  find  symbol  prefix	3	None	replace
514	[BUG]  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt));  [CE]  no  suitable  method  found  for  substring(int,boolean)  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt));  [BUGGY]  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt));		non-compiled	[CE]  no  suitable  method  found  for  substring(int,boolean)	2	None	add
515	[BUG]  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt)));  [CE]  ';'  expected  [CONTEXT]  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  if  (longOpt.startsWith(opt))  {  [BUGGY]    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt)));  [BUGGY]  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.22941573387056174	245	245	1	replace	    longOpt  =  longOpt.substring(0,  longOpt.startsWith(opt)));		non-compiled	[CE]  ';'  expected	2	None	add
572	[BUG]  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  shortOpt  :  longOpts.values())  {  matchingOpts.add(shortOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  shortOpt  :  longOpts.values())  {  matchingOpts.add(shortOpt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(longOpt))  {  for(String  shortOpt  :  longOpts.values())  {  matchingOpts.add(shortOpt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
573	[BUG]  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.values())  {  matchingOpts.add(longOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.values())  {  matchingOpts.add(longOpt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.values())  {  matchingOpts.add(longOpt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
575	[BUG]  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.keySet())  {  matchingOpts.add(longOpt);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  List<String>  getMatchingOptions(String  opt)  {  opt  =  Util.stripLeadingHyphens(opt);  List<String>  matchingOpts  =  new  ArrayList<String>();    for  (String  longOpt  :  longOpts.keySet())  {  [BUGGY]    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.keySet())  {  matchingOpts.add(longOpt);  }  [BUGGY]  if  (longOpt.startsWith(opt))    {  {  matchingOpts.add(longOpt);  }  }  return  matchingOpts;  }  [CLASS]  Options  [METHOD]  getMatchingOptions  [RETURN_TYPE]  List  String  opt  [VARIABLES]  List  matchingOpts  requiredOpts  String  longOpt  opt  boolean  Map  longOpts  optionGroups  shortOpts  long  serialVersionUID  	projects/Cli35/src/main/java/org/apache/commons/cli/Options.java	0.17407765595569785	243	244	1	replace	    if(!matchingOpts.contains(longOpt))  {  for(String  longOpt  :  longOpts.keySet())  {  matchingOpts.add(longOpt);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
