compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  chrono  =  selectChronology(chrono);  ,if(chrono!= null) { chrono = selectChronology(chrono); chrono = selectChronology(chrono); } else { throw new IllegalArgumentException(""); }
compilation error,710,replace,[CE] cannot find symbol,         int    year    =    chrono.year().get(instantLocal);    int  month  =  chrono.monthOfYear().get(instantLocal);  int  day  =  chrono.dayOfMonth().get(instantLocal);  ,int year = chrono.yearOfYear().get(instantLocal); int month = chrono.monthOfYear().get(instantLocal); int day = chrono.dayOfMonth().get(instantLocal);
compilation error,708,replace,[CE] cannot find symbol shift, long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffset(instantMillis,  chrono);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / shift - chrono.getZone().getOffset(instantMillis, chrono);
compilation error,702,replace,[CE] cannot find symbol, if(parser  ==  null  ||  instant.getMillis()  <  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant == null || parser.getMillis() < text.length()) {
increase failing tests,702,replace, [FE] org.joda.time.IllegalFieldValueException: Cannot parse "2 29": Value 29 for dayOfMonth must be in the range [1 testParseInto_monthDay_feb29_newYork_startOfYear, if(parser!=  null  ||  instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(parser == null && instant.getMillis()!= text.length()) {
compilation error,702,replace,[CE] cannot find symbol, if(instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(parser.getMillis()!= text.length()) {
compilation error,708,add,[CE] variable parser is already defined in method parseInto(ReadWritableInstant,String,int), ,                chrono        =        selectChronology(chrono);        chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(iParser!= null) { throw new IllegalArgumentException(""); } else { DateTimeParser parser = parser.parseInto(instant, text, position); }
compilation error,706,replace,[CE] bad operand types for binary operator '*', long  instantMillis  =  instant.getMillis()  *  position  -  1;  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }      ,long instantMillis = instant.getMillis() * text - position - 1;
increase failing tests,709,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, instantLocal  =  instantLocal  /  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();  long  instantLocal  =  instantMillis  +  chrono.getZone().getOffset(instantMillis);      ,instantLocal = instantMillis * chrono.getZone().getOffset(instantMillis);
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,int year = chrono.year().get(instantLocal); int month = chrono.monthOfYear().get(instantLocal); int dayOfMonth = chrono.dayOfMonth().get(instantLocal);
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,int year = chrono.year().get(instantLocal);
increase failing tests,708,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffsetFromLocal(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis * position - chrono.getZone().getOffsetFromLocal(instantMillis);
increase failing tests,708,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffsetFromLocal(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / 2 - chrono.getZone().getOffsetFromLocal(instantMillis);
increase failing tests,708,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, long  instantLocal  =  instantMillis  /  position  *  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis * position * chrono.getZone().getOffset(instantMillis);
compilation error,708,replace,[CE] no suitable method found for getOffset(long,String), long  instantLocal  =  instantMillis  /  position  *  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / position * chrono.getZone().getOffset(instantMillis, text);
compilation error,710,add,[CE] variable year is already defined in method parseInto(ReadWritableInstant,String,int), ,                int        year        =        chrono.year().get(instantLocal);        int    month    =    chrono.monthOfYear().get(instantLocal);    int  dayOfMonth  =  chrono.dayOfMonth().get(instantLocal);  int year = chrono.year().get(instantLocal);
increase failing tests,709,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, instantLocal  =  instantLocal  /  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();  long  instantLocal  =  instantMillis  +  chrono.getZone().getOffset(instantMillis);      ,instantLocal = instantLocal - chrono.getZone().getOffset(instantMillis);
compilation error,709,replace,[CE] no suitable method found for getOffset(long,Chronology), instantLocal  =  instantMillis  /  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();  long  instantLocal  =  instantMillis  +  chrono.getZone().getOffset(instantMillis);      ,instantLocal = instantMillis / chrono.getZone().getOffset(instantMillis, chrono);
compilation error,706,replace,[CE] bad operand types for binary operator '/', long  instantMillis  =  instant.getMillis()  /  text;  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }      ,long instantMillis = instant.getMillis() / text + 1;
compilation error,702,replace,[CE] bad operand types for binary operator '<', if(instant  ==  null  ||  instant.getMillis()  <=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant < null || instant.getMillis() <= text.length()) {
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,int year = chrono.year().get(instantLocal); int month = chrono.monthOfYear().get(instantLocal);
increase failing tests,702,replace, [FE] org.joda.time.IllegalFieldValueException: Cannot parse "2 29": Value 29 for dayOfMonth must be in the range [1 testParseInto_monthDay_feb29_newYork_startOfYear, if(instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant.getMillis() == text.length()) {
compilation error,702,replace,[CE] cannot find symbol bucket, if(instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(parser.parseInto(bucket, text, position)) {
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  chrono  =  selectChronology(chrono);  ,if(instantMillis == 0) { chrono = selectChronology(chrono); chrono = selectChronology(chrono); } else { chrono = selectChronology(chrono); }
compilation error,708,replace,[CE] method getOffsetFromLocal in class DateTimeZone cannot be applied to given types;, long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffsetFromLocal(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / position - chrono.getZone().getOffsetFromLocal(instantMillis, chrono);
compilation error,708,replace,[CE] no suitable method found for getOffset(long,Chronology), long  instantLocal  =  instantMillis  /  position  *  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / position * chrono.getZone().getOffset(instantMillis, chrono);
increase failing tests,706,replace, [FE] AssertionFailedError testParseInto_monthOnly_baseStartYear, long  instantMillis  =  instant.getMillis()  *  position  -  1;  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }      ,long instantMillis = instant.getMillis() * position / 1;
compilation error,702,replace,[CE] cannot find symbol bucket, if(parser!=  null  ||  instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant!= null || parser.parseInto(bucket, text, position)) {
compilation error,710,add,[CE] variable month is already defined in method parseInto(ReadWritableInstant,String,int), ,                int        year        =        chrono.year().get(instantLocal);        int    month    =    chrono.monthOfYear().get(instantLocal);    int  dayOfMonth  =  chrono.dayOfMonth().get(instantLocal);  int month = chrono.monthOfYear().get(instantLocal);
compilation error,702,replace,[CE] cannot find symbol, if(parser  ==  null  ||  instant.getMillis()  <  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant == null || parser.getParser()!= parser.parseInto(bucket, text, position)) {
compilation error,708,add,[CE] cannot find symbol bucket, ,                chrono        =        selectChronology(chrono);        chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  iParser.parseInto(bucket, text, position);
compilation error,708,replace,[CE] no suitable method found for getOffset(long,Chronology), long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffset(instantMillis,  chrono);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis * position - chrono.getZone().getOffset(instantMillis, chrono);
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,int month = chrono.monthOfYear().get(instantLocal);
compilation error,708,replace,[CE] method convertUTCToLocal in class DateTimeZone cannot be applied to given types;, long  instantLocal  =  instantMillis  /  position  -  chrono.getZone().getOffset(instantMillis,  chrono);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / position - chrono.getZone().convertUTCToLocal(instantMillis, chrono);
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  chrono  =  selectChronology(chrono);  ,if(chrono!= null) { chrono = selectChronology(chrono); chrono = selectChronology(chrono); } else { chrono = selectChronology(chrono); }
compilation error,708,add,[CE] DateTimeParser is abstract; cannot be instantiated, ,                chrono        =        selectChronology(chrono);        chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  parser.addChangeListener(new DateTimeParser(instant, text, position));
compilation error,708,replace,[CE] <identifier> expected,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,chrono = selectChronology(chrono); chrono = selectChronology(chrono); if(instantMillis >= 0) throw new IllegalArgumentException(" "); }
compilation error,709,replace,[CE] cannot find symbol dateTimeZone, instantLocal  =  instantMillis  +  iChrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();  long  instantLocal  =  instantMillis  +  chrono.getZone().getOffset(instantMillis);      ,instantLocal = instantMillis + dateTimeZone.getZone().getOffset(instantMillis);
compilation error,708,replace,[CE] cannot find symbol dateTimeZone, long  instantLocal  =  instantMillis  /  position  *  chrono.getZone().getOffset(instantMillis);  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,long instantLocal = instantMillis / position * dateTimeZone.getZone().getOffset(instantMillis);
compilation error,702,replace,[CE] cannot find symbol, if(instant.getMillis()!=  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant.getMillis()!= text.length() || instant.getChronology() == Chronology.getInstanceUTC()) {
compilation error,708,replace,[CE] cannot find symbol bucket,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,instant.setMillis(bucket.computeMillis(false, text));
compilation error,710,replace,[CE] cannot find symbol,         int    year    =    chrono.year().get(instantLocal);    int  month  =  chrono.monthOfYear().get(instantLocal);  int  day  =  chrono.dayOfMonth().get(instantLocal);  ,int year = chrono.year().get(instantLocal); int month = chrono.monthOfYear().get(instantLocal); int day = chrono.dayOfDay().get(instantLocal);
compilation error,708,replace,[CE] cannot find symbol instantLocal,         chrono    =    selectChronology(chrono);    chrono  =  selectChronology(chrono);  if(instantMillis  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();  if  (instant  ==  null)  {  throw  new  IllegalArgumentException(     "Instant  must  not  be  null     ");  }  long  instantMillis  =  instant.getMillis();  Chronology  chrono  =  instant.getChronology();      ,if(instantLocal < 0) { int year = chrono.year().get(instantLocal); int month = chrono.monthOfYear().get(instantLocal); int dayOfMonth = chrono.dayOfMonth().get(instantLocal); }
compilation error,702,replace,[CE] bad operand types for binary operator '<=', if(instant!=  null  ||  instant.getMillis()  <  text.length())  {  [timeout]  [CONTEXT]      public  int  parseInto(ReadWritableInstant  instant,  String  text,  int  position)  {  DateTimeParser  parser  =  requireParser();      ,if(instant <= null || instant.getMillis() < text.length()) {
compilation error,710,add,[CE] cannot find symbol bucket, ,                int        year        =        chrono.year().get(instantLocal);        int    month    =    chrono.monthOfYear().get(instantLocal);    int  dayOfMonth  =  chrono.dayOfMonth().get(instantLocal);  instant.setMillis(bucket.computeMillis(false, text));
