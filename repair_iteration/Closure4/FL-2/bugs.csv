bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] validator.apply(type); [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { [BUGGY] validator.apply(type); [BUGGY] } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.4472135954999579	305	305	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { [BUGGY] [BUGGY] validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.4472135954999579	305	305	1	add	
3	[BUG] [BUGGY] if (this.isResolved()) { [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    [BUGGY] if (this.isResolved()) { [BUGGY] return super.setValidator(validator); } else { this.validator = validator; return true; } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	369	369	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    [BUGGY] [BUGGY] if (this.isResolved()) { return super.setValidator(validator); } else { this.validator = validator; return true; } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	369	369	1	add	
5	[BUG] [BUGGY] this.validator = validator; [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    if (this.isResolved()) { return super.setValidator(validator); } else { [BUGGY] this.validator = validator; [BUGGY] return true; } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	372	372	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    if (this.isResolved()) { return super.setValidator(validator); } else { [BUGGY] [BUGGY] this.validator = validator; return true; } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	372	372	1	add	
7	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    if (this.isResolved()) { return super.setValidator(validator); } else { this.validator = validator; [BUGGY] return true; [BUGGY] } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	373	373	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean setValidator(Predicate<JSType> validator) {    if (this.isResolved()) { return super.setValidator(validator); } else { this.validator = validator; [BUGGY] [BUGGY] return true; } } [CLASS] NamedType PropertyContinuation [METHOD] setValidator [RETURN_TYPE] boolean  JSType> validator [VARIABLES] JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String name propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3611575592573076	373	373	1	add	
9	[BUG] [BUGGY] return reference; [FE] AssertionFailedError [CONTEXT] public String getReferenceName() { [BUGGY] return reference; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] getReferenceName [RETURN_TYPE] String  [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3535533905932738	152	152	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public String getReferenceName() { [BUGGY] [BUGGY] return reference; } [CLASS] NamedType PropertyContinuation [METHOD] getReferenceName [RETURN_TYPE] String  [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.3535533905932738	152	152	1	add	
11	[BUG] [BUGGY] super.resolveInternal(t, enclosing); [FE] AssertionFailedError [CONTEXT]     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { [BUGGY] super.resolveInternal(t, enclosing); [BUGGY] finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); }  [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	195	195	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { [BUGGY] [BUGGY] super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); }  [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	195	195	1	add	
13	[BUG] [BUGGY] finishPropertyContinuations(); [FE] AssertionFailedError [CONTEXT]    boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); [BUGGY] finishPropertyContinuations(); [BUGGY] return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); [BUGGY] [BUGGY] finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	1	add	
15	[BUG] [BUGGY] return registry.isLastGeneration() ? getReferencedType() : this; [FE] AssertionFailedError [CONTEXT]   boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); [BUGGY] return registry.isLastGeneration() ?   getReferencedType() : this; [BUGGY] getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	197	198	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); [BUGGY] [BUGGY] return registry.isLastGeneration() ?   getReferencedType() : this; getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	197	198	1	add	
17	[BUG] [BUGGY] setReferencedAndResolvedType(type, t, enclosing); [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { [BUGGY] setReferencedAndResolvedType(type, t, enclosing); [BUGGY] return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	222	222	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { [BUGGY] [BUGGY] setReferencedAndResolvedType(type, t, enclosing); return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	222	222	1	add	
19	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { setReferencedAndResolvedType(type, t, enclosing); [BUGGY] return true; [BUGGY] } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	223	223	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { setReferencedAndResolvedType(type, t, enclosing); [BUGGY] [BUGGY] return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	223	223	1	add	
21	[BUG] [BUGGY] if (propertyContinuations != null) { [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { [BUGGY] if (propertyContinuations != null) { [BUGGY] for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	136	136	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { [BUGGY] [BUGGY] if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	136	136	1	add	
23	[BUG] [BUGGY] if (validator != null) { [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] if (validator != null) { [BUGGY] validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	304	304	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] [BUGGY] if (validator != null) { validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	304	304	1	add	
25	[BUG] [BUGGY] setReferencedType(type); [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } [BUGGY] setReferencedType(type); [BUGGY] checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	307	307	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } [BUGGY] [BUGGY] setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	307	307	1	add	
27	[BUG] [BUGGY] checkEnumElementCycle(t); [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); [BUGGY] checkEnumElementCycle(t); [BUGGY] setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	308	308	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); [BUGGY] [BUGGY] checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	308	308	1	add	
29	[BUG] [BUGGY] setResolvedTypeInternal(getReferencedType()); [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); [BUGGY] setResolvedTypeInternal(getReferencedType()); [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	309	309	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); [BUGGY] [BUGGY] setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	309	309	1	add	
31	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	310	310	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void setReferencedAndResolvedType(JSType type, ErrorReporter t, StaticScope<JSType> enclosing) { if (validator != null) { validator.apply(type); } setReferencedType(type); checkEnumElementCycle(t); setResolvedTypeInternal(getReferencedType()); [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] setReferencedAndResolvedType [RETURN_TYPE] void  JSType type ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	310	310	1	add	
33	[BUG] [BUGGY] JSType referencedType = getReferencedType(); [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { [BUGGY] JSType referencedType = getReferencedType(); [BUGGY] if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	321	321	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { [BUGGY] [BUGGY] JSType referencedType = getReferencedType(); if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	321	321	1	add	
35	[BUG] [BUGGY] if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); [BUGGY] if (referencedType instanceof EnumElementType &&  ((EnumElementType) referencedType).getPrimitiveType() == this) { [BUGGY] ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	322	323	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); [BUGGY] [BUGGY] if (referencedType instanceof EnumElementType &&  ((EnumElementType) referencedType).getPrimitiveType() == this) { ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	322	323	1	add	
37	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	326	326	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { handleTypeCycle(t); } [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2055566129482595	326	326	1	add	
39	[BUG] [BUGGY] return reference.hashCode(); [FE] AssertionFailedError [CONTEXT] public int hashCode() { [BUGGY] return reference.hashCode(); [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2013468165642073	177	177	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public int hashCode() { [BUGGY] [BUGGY] return reference.hashCode(); } [CLASS] NamedType PropertyContinuation [METHOD] hashCode [RETURN_TYPE] int  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.2013468165642073	177	177	1	add	
41	[BUG] [BUGGY] super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { [BUGGY] super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY]  Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	105	105	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { [BUGGY] [BUGGY] super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	105	105	1	add	
43	[BUG] [BUGGY] private List<PropertyContinuation> propertyContinuations = null; [FE] AssertionFailedError [CONTEXT] [BUGGY] private List<PropertyContinuation> propertyContinuations = null; [BUGGY]  [CLASS] NamedType PropertyContinuation  [VARIABLES] 	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	98	98	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private List<PropertyContinuation> propertyContinuations = null; [CLASS] NamedType PropertyContinuation  [VARIABLES] 	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	98	98	1	add	
45	[BUG] [BUGGY] Preconditions.checkNotNull(reference); [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY] Preconditions.checkNotNull(reference); [BUGGY] this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	107	107	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY] [BUGGY] Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	107	107	1	add	
47	[BUG] [BUGGY] this.reference = reference; [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); [BUGGY] this.reference = reference; [BUGGY] this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	108	108	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); [BUGGY] [BUGGY] this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	108	108	1	add	
49	[BUG] [BUGGY] this.sourceName = sourceName; [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; [BUGGY] this.sourceName = sourceName; [BUGGY] this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	109	109	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; [BUGGY] [BUGGY] this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	109	109	1	add	
51	[BUG] [BUGGY] this.lineno = lineno; [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; [BUGGY] this.lineno = lineno; [BUGGY] this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	110	110	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; [BUGGY] [BUGGY] this.lineno = lineno; this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	110	110	1	add	
53	[BUG] [BUGGY] this.charno = charno; [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; [BUGGY] this.charno = charno; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	111	111	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; [BUGGY] [BUGGY] this.charno = charno; } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	111	111	1	add	
55	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	112	112	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NamedType(JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno) { super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); Preconditions.checkNotNull(reference); this.reference = reference; this.sourceName = sourceName; this.lineno = lineno; this.charno = charno; [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] <init> [RETURN_TYPE] String,int,int)  JSTypeRegistry registry String reference String sourceName int lineno int charno [VARIABLES] JSTypeRegistry registry JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	112	112	1	add	
57	[BUG] [BUGGY] ObjectType referencedObjType = getReferencedObjTypeInternal(); [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { [BUGGY] ObjectType referencedObjType = getReferencedObjTypeInternal(); [BUGGY] if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	134	134	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { [BUGGY] [BUGGY] ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	134	134	1	add	
59	[BUG] [BUGGY] if (referencedObjType != null && !referencedObjType.isUnknownType()) { [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); [BUGGY] if (referencedObjType != null && !referencedObjType.isUnknownType()) { [BUGGY] if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	135	135	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); [BUGGY] [BUGGY] if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	135	135	1	add	
61	[BUG] [BUGGY] propertyContinuations = null; [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } [BUGGY] propertyContinuations = null; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	142	142	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } [BUGGY] [BUGGY] propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	142	142	1	add	
63	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	143	143	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	143	143	1	add	
65	[BUG] [BUGGY] return getReferencedTypeInternal(); [FE] AssertionFailedError [CONTEXT] public JSType getReferencedType() { [BUGGY] return getReferencedTypeInternal(); [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] getReferencedType [RETURN_TYPE] JSType  [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	147	147	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public JSType getReferencedType() { [BUGGY] [BUGGY] return getReferencedTypeInternal(); } [CLASS] NamedType PropertyContinuation [METHOD] getReferencedType [RETURN_TYPE] JSType  [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	147	147	1	add	
67	[BUG] [BUGGY] boolean resolved = resolveViaRegistry(t, enclosing); [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     [BUGGY] boolean resolved = resolveViaRegistry(t, enclosing); [BUGGY] if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	189	189	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     [BUGGY] [BUGGY] boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	189	189	1	add	
69	[BUG] [BUGGY] if (detectImplicitPrototypeCycle()) { [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); [BUGGY] if (detectImplicitPrototypeCycle()) { [BUGGY] handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; }  [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	190	190	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); [BUGGY] [BUGGY] if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; }  [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	190	190	1	add	
71	[BUG] [BUGGY] if (resolved) { [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [BUGGY] if (resolved) { [BUGGY] super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	194	194	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [BUGGY] [BUGGY] if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	194	194	1	add	
73	[BUG] [BUGGY] JSType type = registry.getType(reference); [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] JSType type = registry.getType(reference); [BUGGY] if (type != null) { setReferencedAndResolvedType(type, t, enclosing); return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	220	220	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] [BUGGY] JSType type = registry.getType(reference); if (type != null) { setReferencedAndResolvedType(type, t, enclosing); return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	220	220	1	add	
75	[BUG] [BUGGY] if (type != null) { [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); [BUGGY] if (type != null) { [BUGGY] setReferencedAndResolvedType(type, t, enclosing); return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	221	221	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); [BUGGY] [BUGGY] if (type != null) { setReferencedAndResolvedType(type, t, enclosing); return true; } return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.16984155512168936	221	221	1	add	
77	[BUG] [BUGGY] if (!isResolved()) { [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { [BUGGY] if (!isResolved()) { [BUGGY]   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	117	117	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { [BUGGY] [BUGGY] if (!isResolved()) {   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	117	117	1	add	
79	[BUG] [BUGGY] if (propertyContinuations == null) { [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   [BUGGY] if (propertyContinuations == null) { [BUGGY] propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	120	120	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   [BUGGY] [BUGGY] if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	120	120	1	add	
81	[BUG] [BUGGY] propertyContinuations = Lists.newArrayList(); [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { [BUGGY] propertyContinuations = Lists.newArrayList(); [BUGGY] } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	121	121	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { [BUGGY] [BUGGY] propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	121	121	1	add	
83	[BUG] [BUGGY] propertyContinuations.add( new PropertyContinuation(  propertyName, type, inferred, propertyNode)); [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } [BUGGY] propertyContinuations.add(   new PropertyContinuation(       propertyName, type, inferred, propertyNode)); [BUGGY] new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	123	125	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean defineProperty(String propertyName, JSType type, boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } [BUGGY] [BUGGY] propertyContinuations.add(   new PropertyContinuation(       propertyName, type, inferred, propertyNode)); new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	123	125	1	add	
85	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); [BUGGY] return true; [BUGGY] } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	126	126	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean inferred, Node propertyNode) { if (!isResolved()) {   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); [BUGGY] [BUGGY] return true; } else { return super.defineProperty( propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	126	126	1	add	
87	[BUG] [BUGGY] return super.defineProperty( propertyName, type, inferred, propertyNode); [FE] AssertionFailedError [CONTEXT]   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { [BUGGY] return super.defineProperty(   propertyName, type, inferred, propertyNode); [BUGGY] propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	128	129	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (propertyContinuations == null) { propertyContinuations = Lists.newArrayList(); } propertyContinuations.add( new PropertyContinuation( propertyName, type, inferred, propertyNode)); return true; } else { [BUGGY] [BUGGY] return super.defineProperty(   propertyName, type, inferred, propertyNode); propertyName, type, inferred, propertyNode); } } [CLASS] NamedType PropertyContinuation [METHOD] defineProperty [RETURN_TYPE] boolean  String propertyName JSType type boolean inferred Node propertyNode [VARIABLES] JSType type boolean inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	128	129	1	add	
89	[BUG] [BUGGY] for (PropertyContinuation c : propertyContinuations) { [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { [BUGGY] for (PropertyContinuation c : propertyContinuations) { [BUGGY] c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	137	137	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { [BUGGY] [BUGGY] for (PropertyContinuation c : propertyContinuations) { c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	137	137	1	add	
91	[BUG] [BUGGY] c.commit(this); [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { [BUGGY] c.commit(this); [BUGGY] } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	138	138	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { [BUGGY] [BUGGY] c.commit(this); } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	138	138	1	add	
93	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); [BUGGY] } [BUGGY] } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	139	139	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void finishPropertyContinuations() { ObjectType referencedObjType = getReferencedObjTypeInternal(); if (referencedObjType != null && !referencedObjType.isUnknownType()) { if (propertyContinuations != null) { for (PropertyContinuation c : propertyContinuations) { c.commit(this); [BUGGY] [BUGGY] } } } propertyContinuations = null; } [CLASS] NamedType PropertyContinuation [METHOD] finishPropertyContinuations [RETURN_TYPE] void  [VARIABLES] ObjectType referencedObjType JSType type boolean inferred PropertyContinuation c Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	139	139	1	add	
95	[BUG] [BUGGY] return reference; [FE] AssertionFailedError [CONTEXT] String toStringHelper(boolean forAnnotations) { [BUGGY] return reference; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] toStringHelper [RETURN_TYPE] String  boolean forAnnotations [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	157	157	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String toStringHelper(boolean forAnnotations) { [BUGGY] [BUGGY] return reference; } [CLASS] NamedType PropertyContinuation [METHOD] toStringHelper [RETURN_TYPE] String  boolean forAnnotations [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	157	157	1	add	
97	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] public boolean hasReferenceName() { [BUGGY] return true; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] hasReferenceName [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	162	162	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean hasReferenceName() { [BUGGY] [BUGGY] return true; } [CLASS] NamedType PropertyContinuation [METHOD] hasReferenceName [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	162	162	1	add	
99	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] boolean isNamedType() { [BUGGY] return true; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] isNamedType [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	167	167	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean isNamedType() { [BUGGY] [BUGGY] return true; } [CLASS] NamedType PropertyContinuation [METHOD] isNamedType [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	167	167	1	add	
101	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] public boolean isNominalType() { [BUGGY] return true; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] isNominalType [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	172	172	1	replace	
102	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean isNominalType() { [BUGGY] [BUGGY] return true; } [CLASS] NamedType PropertyContinuation [METHOD] isNominalType [RETURN_TYPE] boolean  [VARIABLES] JSType type boolean forAnnotations inferred Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	172	172	1	add	
103	[BUG] [BUGGY] handleTypeCycle(t); [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { [BUGGY] handleTypeCycle(t); [BUGGY] } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	191	191	1	replace	
104	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {     boolean resolved = resolveViaRegistry(t, enclosing); if (detectImplicitPrototypeCycle()) { [BUGGY] [BUGGY] handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	191	191	1	add	
105	[BUG] [BUGGY] resolveViaProperties(t, enclosing); [FE] AssertionFailedError [CONTEXT] handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } [BUGGY] resolveViaProperties(t, enclosing); [BUGGY] if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	201	201	1	replace	
106	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] handleTypeCycle(t); } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } [BUGGY] [BUGGY] resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	201	201	1	add	
107	[BUG] [BUGGY] if (detectImplicitPrototypeCycle()) { [FE] AssertionFailedError [CONTEXT] } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); [BUGGY] if (detectImplicitPrototypeCycle()) { [BUGGY] handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	202	202	1	replace	
108	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); [BUGGY] [BUGGY] if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	202	202	1	add	
109	[BUG] [BUGGY] handleTypeCycle(t); [FE] AssertionFailedError [CONTEXT] if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { [BUGGY] handleTypeCycle(t); [BUGGY] } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	203	203	1	replace	
110	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (resolved) { super.resolveInternal(t, enclosing); finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { [BUGGY] [BUGGY] handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	203	203	1	add	
111	[BUG] [BUGGY] super.resolveInternal(t, enclosing); [FE] AssertionFailedError [CONTEXT] finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [BUGGY] super.resolveInternal(t, enclosing); [BUGGY] if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	206	206	1	replace	
112	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] finishPropertyContinuations(); return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } [BUGGY] [BUGGY] super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	206	206	1	add	
113	[BUG] [BUGGY] if (isResolved()) { [FE] AssertionFailedError [CONTEXT] return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); [BUGGY] if (isResolved()) { [BUGGY] finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	207	207	1	replace	
114	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return registry.isLastGeneration() ? getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); [BUGGY] [BUGGY] if (isResolved()) { finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	207	207	1	add	
115	[BUG] [BUGGY] finishPropertyContinuations(); [FE] AssertionFailedError [CONTEXT] getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { [BUGGY] finishPropertyContinuations(); [BUGGY] } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	208	208	1	replace	
116	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] getReferencedType() : this; } resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { [BUGGY] [BUGGY] finishPropertyContinuations(); } return registry.isLastGeneration() ? getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	208	208	1	add	
117	[BUG] [BUGGY] return registry.isLastGeneration() ? getReferencedType() : this; [FE] AssertionFailedError [CONTEXT] resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } [BUGGY] return registry.isLastGeneration() ?  getReferencedType() : this; [BUGGY] getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	210	211	1	replace	
118	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] resolveViaProperties(t, enclosing); if (detectImplicitPrototypeCycle()) { handleTypeCycle(t); } super.resolveInternal(t, enclosing); if (isResolved()) { finishPropertyContinuations(); } [BUGGY] [BUGGY] return registry.isLastGeneration() ?  getReferencedType() : this; getReferencedType() : this; } [CLASS] NamedType PropertyContinuation [METHOD] resolveInternal [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	210	211	1	add	
119	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { setReferencedAndResolvedType(type, t, enclosing); return true; } [BUGGY] return false; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	225	225	1	replace	
120	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean resolveViaRegistry( ErrorReporter t, StaticScope<JSType> enclosing) { JSType type = registry.getType(reference); if (type != null) { setReferencedAndResolvedType(type, t, enclosing); return true; } [BUGGY] [BUGGY] return false; } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaRegistry [RETURN_TYPE] boolean  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	225	225	1	add	
121	[BUG] [BUGGY] JSType value = lookupViaProperties(t, enclosing); [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] JSType value = lookupViaProperties(t, enclosing); [BUGGY]  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	235	235	1	replace	
122	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { [BUGGY] [BUGGY] JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	235	235	1	add	
123	[BUG] [BUGGY] if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  [BUGGY] if (value != null && value.isFunctionType() &&  (value.isConstructor() || value.isInterface())) { [BUGGY] (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	237	238	1	replace	
124	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  [BUGGY] [BUGGY] if (value != null && value.isFunctionType() &&  (value.isConstructor() || value.isInterface())) { (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	237	238	1	add	
125	[BUG] [BUGGY] FunctionType functionType = value.toMaybeFunctionType(); [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { [BUGGY] FunctionType functionType = value.toMaybeFunctionType(); [BUGGY] setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else { [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	239	239	1	replace	
126	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { [BUGGY] [BUGGY] FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else { [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	239	239	1	add	
127	[BUG] [BUGGY] setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); [BUGGY] setReferencedAndResolvedType(   functionType.getInstanceType(), t, enclosing); [BUGGY] functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {  [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	240	241	1	replace	
128	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); [BUGGY] [BUGGY] setReferencedAndResolvedType(   functionType.getInstanceType(), t, enclosing); functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {  [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	240	241	1	add	
129	[BUG] [BUGGY] } else if (value != null && value.isNoObjectType()) { [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); [BUGGY] } else if (value != null && value.isNoObjectType()) { [BUGGY] setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {    [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	242	242	1	replace	
130	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); [BUGGY] [BUGGY] } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {    [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	242	242	1	add	
131	[BUG] [BUGGY] setReferencedAndResolvedType( registry.getNativeFunctionType(  JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { [BUGGY] setReferencedAndResolvedType(   registry.getNativeFunctionType(       JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [BUGGY] registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {     [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	243	245	1	replace	
132	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) { JSType value = lookupViaProperties(t, enclosing);  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { [BUGGY] [BUGGY] setReferencedAndResolvedType(   registry.getNativeFunctionType(       JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {     [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	243	245	1	add	
133	[BUG] [BUGGY] } else if (value instanceof EnumType) { [FE] AssertionFailedError [CONTEXT]  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [BUGGY] } else if (value instanceof EnumType) { [BUGGY] setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	246	246	1	replace	
134	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); [BUGGY] [BUGGY] } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	246	246	1	add	
135	[BUG] [BUGGY] setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); [FE] AssertionFailedError [CONTEXT] if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { [BUGGY] setReferencedAndResolvedType(   ((EnumType) value).getElementsType(), t, enclosing); [BUGGY] ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	247	248	1	replace	
136	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value != null && value.isFunctionType() && (value.isConstructor() || value.isInterface())) { FunctionType functionType = value.toMaybeFunctionType(); setReferencedAndResolvedType( functionType.getInstanceType(), t, enclosing); } else if (value != null && value.isNoObjectType()) { setReferencedAndResolvedType( registry.getNativeFunctionType( JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing); } else if (value instanceof EnumType) { [BUGGY] [BUGGY] setReferencedAndResolvedType(   ((EnumType) value).getElementsType(), t, enclosing); ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	247	248	1	add	
137	[BUG] [BUGGY] handleUnresolvedType(t, value == null || value.isUnknownType()); [FE] AssertionFailedError [CONTEXT] } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {       [BUGGY] handleUnresolvedType(t, value == null || value.isUnknownType()); [BUGGY] } } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	256	256	1	replace	
138	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (value instanceof EnumType) { setReferencedAndResolvedType( ((EnumType) value).getElementsType(), t, enclosing); } else {       [BUGGY] [BUGGY] handleUnresolvedType(t, value == null || value.isUnknownType()); } } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	256	256	1	add	
139	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); } [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	258	258	1	replace	
140	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ((EnumType) value).getElementsType(), t, enclosing); } else {       handleUnresolvedType(t, value == null || value.isUnknownType()); } [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] resolveViaProperties [RETURN_TYPE] void  ErrorReporter t JSType> enclosing [VARIABLES] ErrorReporter t JSType type value boolean forAnnotations inferred resolved Node propertyNode StaticScope enclosing FunctionType functionType List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	258	258	1	add	
141	[BUG] [BUGGY] String[] componentNames = reference.split("\\.", -1); [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { [BUGGY] String[] componentNames = reference.split("\\.", -1); [BUGGY] if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	268	268	1	replace	
142	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { [BUGGY] [BUGGY] String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	268	268	1	add	
143	[BUG] [BUGGY] if (componentNames[0].length() == 0) { [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); [BUGGY] if (componentNames[0].length() == 0) { [BUGGY] return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	269	269	1	replace	
144	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); [BUGGY] [BUGGY] if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	269	269	1	add	
145	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { [BUGGY] return null; [BUGGY] } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	270	270	1	replace	
146	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { [BUGGY] [BUGGY] return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	270	270	1	add	
147	[BUG] [BUGGY] StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } [BUGGY] StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); [BUGGY] if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	272	272	1	replace	
148	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } [BUGGY] [BUGGY] StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	272	272	1	add	
149	[BUG] [BUGGY] if (slot == null) { [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); [BUGGY] if (slot == null) { [BUGGY] return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	273	273	1	replace	
150	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); [BUGGY] [BUGGY] if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	273	273	1	add	
151	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { [BUGGY] return null; [BUGGY] }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	274	274	1	replace	
152	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] StaticScope<JSType> enclosing) { String[] componentNames = reference.split("\\.", -1); if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { [BUGGY] [BUGGY] return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	274	274	1	add	
153	[BUG] [BUGGY] JSType slotType = slot.getType(); [FE] AssertionFailedError [CONTEXT] if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    [BUGGY] JSType slotType = slot.getType(); [BUGGY] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	279	279	1	replace	
154	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (componentNames[0].length() == 0) { return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    [BUGGY] [BUGGY] JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	279	279	1	add	
155	[BUG] [BUGGY] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [FE] AssertionFailedError [CONTEXT] return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); [BUGGY] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [BUGGY] return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	280	280	1	replace	
156	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); [BUGGY] [BUGGY] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	280	280	1	add	
157	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [BUGGY] return null; [BUGGY] } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	281	281	1	replace	
158	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } StaticSlot<JSType> slot = enclosing.getSlot(componentNames[0]); if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { [BUGGY] [BUGGY] return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	281	281	1	add	
159	[BUG] [BUGGY] JSType value = getTypedefType(t, slot, componentNames[0]); [FE] AssertionFailedError [CONTEXT] if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } [BUGGY] JSType value = getTypedefType(t, slot, componentNames[0]); [BUGGY] if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	283	283	1	replace	
160	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (slot == null) { return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } [BUGGY] [BUGGY] JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	283	283	1	add	
161	[BUG] [BUGGY] if (value == null) { [FE] AssertionFailedError [CONTEXT] return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); [BUGGY] if (value == null) { [BUGGY] return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	284	284	1	replace	
162	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); [BUGGY] [BUGGY] if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	284	284	1	add	
163	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { [BUGGY] return null; [BUGGY] }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	285	285	1	replace	
164	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }    JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { [BUGGY] [BUGGY] return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	285	285	1	add	
165	[BUG] [BUGGY] for (int i = 1; i < componentNames.length; i++) { [FE] AssertionFailedError [CONTEXT] JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  [BUGGY] for (int i = 1; i < componentNames.length; i++) { [BUGGY] ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	289	289	1	replace	
166	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSType slotType = slot.getType(); if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  [BUGGY] [BUGGY] for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	289	289	1	add	
167	[BUG] [BUGGY] ObjectType parentClass = ObjectType.cast(value); [FE] AssertionFailedError [CONTEXT] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { [BUGGY] ObjectType parentClass = ObjectType.cast(value); [BUGGY] if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	290	290	1	replace	
168	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (slotType == null || slotType.isAllType() || slotType.isNoType()) { return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { [BUGGY] [BUGGY] ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	290	290	1	add	
169	[BUG] [BUGGY] if (parentClass == null) { [FE] AssertionFailedError [CONTEXT] return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); [BUGGY] if (parentClass == null) { [BUGGY] return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	291	291	1	replace	
170	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); [BUGGY] [BUGGY] if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	291	291	1	add	
171	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { [BUGGY] return null; [BUGGY] } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	292	292	1	replace	
172	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } JSType value = getTypedefType(t, slot, componentNames[0]); if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { [BUGGY] [BUGGY] return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	292	292	1	add	
173	[BUG] [BUGGY] if (componentNames[i].length() == 0) { [FE] AssertionFailedError [CONTEXT] if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } [BUGGY] if (componentNames[i].length() == 0) { [BUGGY] return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	294	294	1	replace	
174	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (value == null) { return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } [BUGGY] [BUGGY] if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	294	294	1	add	
175	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { [BUGGY] return null; [BUGGY] } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	295	295	1	replace	
176	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; }  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { [BUGGY] [BUGGY] return null; } value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	295	295	1	add	
177	[BUG] [BUGGY] value = parentClass.getPropertyType(componentNames[i]); [FE] AssertionFailedError [CONTEXT]  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } [BUGGY] value = parentClass.getPropertyType(componentNames[i]); [BUGGY] } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	297	297	1	replace	
178	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } [BUGGY] [BUGGY] value = parentClass.getPropertyType(componentNames[i]); } return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	297	297	1	add	
179	[BUG] [BUGGY] return value; [FE] AssertionFailedError [CONTEXT] for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } [BUGGY] return value; [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	299	299	1	replace	
180	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int i = 1; i < componentNames.length; i++) { ObjectType parentClass = ObjectType.cast(value); if (parentClass == null) { return null; } if (componentNames[i].length() == 0) { return null; } value = parentClass.getPropertyType(componentNames[i]); } [BUGGY] [BUGGY] return value; } [CLASS] NamedType PropertyContinuation [METHOD] lookupViaProperties [RETURN_TYPE] JSType  ErrorReporter t JSType> enclosing [VARIABLES] JSType slotType type value Node propertyNode StaticScope enclosing String propertyName reference sourceName String[] componentNames long serialVersionUID int charno i lineno Predicate validator ObjectType parentClass ErrorReporter t StaticSlot slot boolean forAnnotations inferred resolved List propertyContinuations  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	299	299	1	add	
181	[BUG] [BUGGY] setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { [BUGGY] setReferencedType(  registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY] registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	313	314	1	replace	
182	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { [BUGGY] [BUGGY] setReferencedType(  registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	313	314	1	add	
183	[BUG] [BUGGY] t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY] t.warning("Cycle detected in inheritance chain of type " + reference,  sourceName, lineno, charno); [BUGGY] sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	315	316	1	replace	
184	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); [BUGGY] [BUGGY] t.warning("Cycle detected in inheritance chain of type " + reference,  sourceName, lineno, charno); sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	315	316	1	add	
185	[BUG] [BUGGY] setResolvedTypeInternal(getReferencedType()); [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); [BUGGY] setResolvedTypeInternal(getReferencedType()); [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	317	317	1	replace	
186	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); [BUGGY] [BUGGY] setResolvedTypeInternal(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	317	317	1	add	
187	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); [BUGGY] } [BUGGY]  [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	318	318	1	replace	
188	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleTypeCycle(ErrorReporter t) { setReferencedType( registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE)); t.warning("Cycle detected in inheritance chain of type " + reference, sourceName, lineno, charno); setResolvedTypeInternal(getReferencedType()); [BUGGY] [BUGGY] } [CLASS] NamedType PropertyContinuation [METHOD] handleTypeCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	318	318	1	add	
189	[BUG] [BUGGY] handleTypeCycle(t); [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { [BUGGY] handleTypeCycle(t); [BUGGY] } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	324	324	1	replace	
190	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkEnumElementCycle(ErrorReporter t) { JSType referencedType = getReferencedType(); if (referencedType instanceof EnumElementType && ((EnumElementType) referencedType).getPrimitiveType() == this) { [BUGGY] [BUGGY] handleTypeCycle(t); } } [CLASS] NamedType PropertyContinuation [METHOD] checkEnumElementCycle [RETURN_TYPE] void  ErrorReporter t [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations inferred resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	324	324	1	add	
191	[BUG] [BUGGY] if (registry.isLastGeneration()) { [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { [BUGGY] if (registry.isLastGeneration()) { [BUGGY] boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	332	332	1	replace	
192	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { [BUGGY] [BUGGY] if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	332	332	1	add	
193	[BUG] [BUGGY] boolean isForwardDeclared = ignoreForwardReferencedTypes &&  registry.isForwardDeclaredType(reference); [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { [BUGGY] boolean isForwardDeclared =   ignoreForwardReferencedTypes &&     registry.isForwardDeclaredType(reference); [BUGGY] ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE));  [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	333	335	1	replace	
194	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { [BUGGY] [BUGGY] boolean isForwardDeclared =   ignoreForwardReferencedTypes &&     registry.isForwardDeclaredType(reference); ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE));  [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	333	335	1	add	
195	[BUG] [BUGGY] if (!isForwardDeclared && registry.isLastGeneration()) { [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); [BUGGY] if (!isForwardDeclared && registry.isLastGeneration()) { [BUGGY] t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	336	336	1	replace	
196	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); [BUGGY] [BUGGY] if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	336	336	1	add	
197	[BUG] [BUGGY] t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { [BUGGY] t.warning("Bad type annotation. Unknown type " + reference,   sourceName, lineno, charno); [BUGGY] sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } } [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	337	338	1	replace	
198	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { [BUGGY] [BUGGY] t.warning("Bad type annotation. Unknown type " + reference,   sourceName, lineno, charno); sourceName, lineno, charno); } else { setReferencedType( registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } } [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	337	338	1	add	
199	[BUG] [BUGGY] setReferencedType( registry.getNativeObjectType(  JSTypeNative.NO_RESOLVED_TYPE)); [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { [BUGGY] setReferencedType(   registry.getNativeObjectType(        JSTypeNative.NO_RESOLVED_TYPE)); [BUGGY] registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } } setResolvedTypeInternal(getReferencedType()); } else { [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	340	342	1	replace	
200	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void handleUnresolvedType( ErrorReporter t, boolean ignoreForwardReferencedTypes) { if (registry.isLastGeneration()) { boolean isForwardDeclared = ignoreForwardReferencedTypes && registry.isForwardDeclaredType(reference); if (!isForwardDeclared && registry.isLastGeneration()) { t.warning("Bad type annotation. Unknown type " + reference, sourceName, lineno, charno); } else { [BUGGY] [BUGGY] setReferencedType(   registry.getNativeObjectType(        JSTypeNative.NO_RESOLVED_TYPE)); registry.getNativeObjectType( JSTypeNative.NO_RESOLVED_TYPE)); if (registry.isLastGeneration() && validator != null) { validator.apply(getReferencedType()); } } setResolvedTypeInternal(getReferencedType()); } else { [CLASS] NamedType PropertyContinuation [METHOD] handleUnresolvedType [RETURN_TYPE] void  ErrorReporter t boolean ignoreForwardReferencedTypes [VARIABLES] ErrorReporter t JSType referencedType slotType type value boolean forAnnotations ignoreForwardReferencedTypes inferred isForwardDeclared resolved Node propertyNode List propertyContinuations String propertyName reference sourceName long serialVersionUID int charno i lineno Predicate validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.0	340	342	1	add	
