bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  not  a  statement	13	None	replace
2	[BUG]  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  not  a  statement	13	None	replace
3	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	add	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
4	[BUG]  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  timeout  [FE]        AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
5	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	add	if(resolved)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
6	[BUG]  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  timeout  [FE]          AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(resolved)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
7	[BUG]  [BUGGY]  if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  not  a  statement	13	None	replace
8	[BUG]  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  null;  }  [CE]  not  a  statement  [FE]              AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  null;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  null;  }	finishPropertyContinuations();  	non-compiled	[CE]  not  a  statement	13	None	replace
9	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	add	if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
10	[BUG]  [BUGGY]  if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  timeout  [FE]                AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations  ==  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
11	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]    [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	add	  	finishPropertyContinuations();  	compilable	timeout	13	1	replace
12	[BUG]  [BUGGY]    timeout  [FE]                  AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]    [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	  	finishPropertyContinuations();  	compilable	timeout	13	1	replace
13	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	add	if(validator!=  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
14	[BUG]  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  timeout  [FE]    AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(validator!=  null)  {  finishPropertyContinuations();  }	finishPropertyContinuations();  	compilable	timeout	13	1	replace
15	[BUG]  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()?  getReferencedType()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  not  a  statement	13	None	replace
16	[BUG]  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(resolved)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  ';'  expected	13	None	replace
17	[BUG]  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(validator!=  null)  {  finishPropertyContinuations();  }  else  {  registry.isLastGeneration()  :  this;  }	finishPropertyContinuations();  	non-compiled	[CE]  ';'  expected	13	None	replace
18	[BUG]  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  getPropertyContinuations().addAll(propertyContinuations);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  getPropertyContinuations().addAll(propertyContinuations);  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  getPropertyContinuations().addAll(propertyContinuations);  }	finishPropertyContinuations();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
19	[BUG]  [BUGGY]  ensurePropertyContinuations();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  ensurePropertyContinuations();  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	ensurePropertyContinuations();	finishPropertyContinuations();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  forAnnotations  =  Collections.emptyList();  }  [CE]  cannot  find  symbol  forAnnotations  [FE]        AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  forAnnotations  =  Collections.emptyList();  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  forAnnotations  =  Collections.emptyList();  }	finishPropertyContinuations();  	non-compiled	[CE]  cannot  find  symbol  forAnnotations	13	None	replace
21	[BUG]  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  propertyContinuations.add(propertyName);  }  [CE]  cannot  find  symbol  propertyName  [FE]          AssertionFailedError  [CONTEXT]      boolean  resolved  =  resolveViaRegistry(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  if  (resolved)  {  super.resolveInternal(t,  enclosing);  [BUGGY]  if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  propertyContinuations.add(propertyName);  }  [BUGGY]  return  registry.isLastGeneration()  ?  getReferencedType()  :  this;  }  resolveViaProperties(t,  enclosing);  if  (detectImplicitPrototypeCycle())  {  handleTypeCycle(t);  }  super.resolveInternal(t,  enclosing);  [CLASS]  NamedType  PropertyContinuation  [METHOD]  resolveInternal  [RETURN_TYPE]  JSType  ErrorReporter  t  JSType>  enclosing  [VARIABLES]  ErrorReporter  t  JSType  type  boolean  forAnnotations  inferred  resolved  Node  propertyNode  StaticScope  enclosing  List  propertyContinuations  String  propertyName  reference  sourceName  long  serialVersionUID  int  charno  lineno  Predicate  validator  	projects/Closure4/src/com/google/javascript/rhino/jstype/NamedType.java	0.20701966780270628	196	196	3	replace	if(propertyContinuations!=  null)  {  finishPropertyContinuations();  }  else  {  propertyContinuations.add(propertyName);  }	finishPropertyContinuations();  	non-compiled	[CE]  cannot  find  symbol  propertyName	13	None	replace
