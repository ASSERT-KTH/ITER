bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cols  =  problem.getMeasurements().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  cols  =  problem.getMeasurements().length;  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  cols  =  problem.getMeasurements().length;		non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
2	[BUG]  [BUGGY]    int  cols  =  problem.getColumns().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  cols  =  problem.getColumns().length;  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  cols  =  problem.getColumns().length;		non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
3	[BUG]  [BUGGY]    int  max  =  Math.max(max,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  max  =  Math.max(max,  jTj.length);  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  max  =  Math.max(max,  jTj.length);		non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    jTj[i][j]  =  sum;  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	    jTj[i][j]  =  sum;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
5	[BUG]  [BUGGY]    jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    jTj[i][j]  =  sum;  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    jTj[i][j]  =  sum;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
6	[BUG]  [BUGGY]    int  cols  =  problem.getRowCount();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  cols  =  problem.getRowCount();  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  cols  =  problem.getRowCount();		non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
7	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  cols)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
8	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  cols)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
9	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  max)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
10	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  max)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
11	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  2)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
12	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {	for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  	compilable	  [FE]  EstimationException  	32	1	replace
13	[BUG]  [BUGGY]    int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  cols  =  problem.getAllParameters().length;  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  cols  =  problem.getAllParameters().length;		non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
14	[BUG]  [BUGGY]    int  max  =  Math.min(cols,  sum);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  max  =  Math.min(cols,  sum);  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  max  =  Math.min(cols,  sum);		non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
15	[BUG]  [BUGGY]    int  cols  =  problem.getColumnsCount();  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  cols  =  problem.getColumnsCount();  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  cols  =  problem.getColumnsCount();		non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
16	[BUG]  [BUGGY]    int  max  =  Math.max(remainder,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  max  =  Math.max(remainder,  jTj.length);  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  max  =  Math.max(remainder,  jTj.length);		non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
17	[BUG]  [BUGGY]    int  max  =  Math.min(cols,  jTj.length);  [CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  [BUGGY]    int  max  =  Math.min(cols,  jTj.length);  [BUGGY]  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	    int  max  =  Math.min(cols,  jTj.length);		non-compiled	[CE]  variable  max  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	add
