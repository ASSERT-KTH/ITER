bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	21	1	replace
2	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  3)  {  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	21	1	replace
3	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  rows.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  rows.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  rows.length);	  int    max    =    Math.min(rows,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
4	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  rows);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  rows);	  int    max    =    Math.min(rows,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
5	[BUG]  [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
6	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  max;  k  +=  2)  {  [CE]  >  expected  [FE]                  EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  max;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
7	[BUG]  [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  1,  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  1,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  jTj.length  -  1,  sum);	  int    max    =    Math.max(max,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  int  max  =  Math.max(max,  sum.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  sum.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  sum.length  -  1);	  int    max    =    Math.max(max,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  2);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  2);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  jTj.length  -  2);	  int    max    =    Math.max(max,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  /  1;	  int    cols    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  2;	  int    cols    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k++)  {  for(int  k  =  0;  k  <  rows);  k  +=  2)  {  [CE]  ';'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k++)  {  for(int  k  =  0;  k  <  rows);  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k++)  {  for(int  k  =  0;  k  <  rows);  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int    k    =    0;    k    <    rows);    k    +=    2)    {    	non-compiled	[CE]  ';'  expected	60	None	replace
13	[BUG]  [BUGGY]  for(int  i][j]  =  sum;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  i][j]  =  sum;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
14	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  jTj;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  for(int  i][j]  =  jTj;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
15	[BUG]  [BUGGY]  jTj[i][j]  =  max;  for(int  i][j]  =  sum;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  max;  for(int  i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  max;  for(int  i][j]  =  sum;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
16	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  cols;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  cols;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  for(int  i][j]  =  cols;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
17	[BUG]  [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  >  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  k  =  0;  k  <  rows;  k  +=  cols)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  >  expected	74	None	replace
18	[BUG]  [BUGGY]  int  k  =  0;  k  <  cols;  k  +=  max)  {  [CE]  >  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  k  =  0;  k  <  cols;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  >  expected	74	None	replace
19	[BUG]  [BUGGY]  JTj[i][j]  =  sum;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  JTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	JTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    JTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
20	[BUG]  [BUGGY]  int  max  =  Math.max(result,  sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(result,  sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  sum,  jTj.length);	  int    max    =    Math.max(result,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
21	[BUG]  [BUGGY]  int  max  =  Math.min(max,  cols);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  cols);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
22	[BUG]  [BUGGY]  int  max  =  Math.max(max,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  cols);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
23	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(rows,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj,  cols);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
24	[BUG]  [BUGGY]  int  max  =  Math.min(max,  rows);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  rows);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
25	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  /  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnsCount()  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  /  1;	  int    cols    =    problem.getColumnsCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
26	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length  -  1);	  int    max    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  cols,  jTj.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  cols,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  cols,  jTj.length);	  int    max    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length  +  1);	  int    max    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  jTj,  sum);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainder,  jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  jTj,  sum);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
30	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  residuals,  cols);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  residuals,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  residuals,  cols);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
31	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  jTj,  sum,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainder,  jTj,  sum,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  jTj,  sum,  cols);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
32	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj,  cols);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
33	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
34	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  For(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  For(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    For(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  	non-compiled	[CE]  '.class'  expected	72	None	add
35	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  columns  +  max;  k  +=  jTj.length)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  columns  +  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    for(int  k  =  0;  k  <  columns  +  max;  k  +=  jTj.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
36	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  rows  +  min;  k  +=  jTj.length)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  rows  +  min;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    for(int  k  =  0;  k  <  rows  +  min;  k  +=  jTj.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
37	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
38	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  cols  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
39	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj.length  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
40	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    max)    {    for(int  k  =  0;  k  <  cols;  k  +=  max)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
41	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  For(int  k  =  0;  k  <  cols;  k  +=  max)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  For(int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    max)    {    For(int  k  =  0;  k  <  cols;  k  +=  max)  {	  	non-compiled	[CE]  '.class'  expected	70	None	add
42	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  for(int  k  =  0;  k  <  cols;  k  +=  min)  {  [CE]  illegal  start  of  expression  [FE]        EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  for(int  k  =  0;  k  <  cols;  k  +=  min)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    max)    {    for(int  k  =  0;  k  <  cols;  k  +=  min)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
43	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  int  k  =  0;  k  <  cols;  k  +=  max)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    max)    {    int  k  =  0;  k  <  cols;  k  +=  max)  {	  	non-compiled	[CE]  >  expected	70	None	add
44	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  max)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
45	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  max)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
46	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  max)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
47	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  1;  k  +=  jacobian[k];  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  1;  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  1;  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ')'  expected	84	None	replace
48	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols  +  max);  k  +=  jacobian[k];  [CE]  ';'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols  +  max);  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols  +  max);  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ';'  expected	84	None	replace
49	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  2;  k  +=  jacobian[k];  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  2;  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  2;  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ')'  expected	84	None	replace
50	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  *  max);  k  +=  jacobian[k];  [CE]  ';'  expected  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  *  max);  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  *  max);  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ';'  expected	84	None	replace
51	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj);	  int    max    =    Math.min(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  max;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
53	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  jTj.length)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	41	1	replace
54	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	41	1	replace
55	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  jTj.length)  {  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	41	1	replace
56	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  rows);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  rows);	  int    max    =    Math.min(rows,    jTj);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
57	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj);	  int    max    =    Math.min(rows,    jTj);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
58	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  rows);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  rows);	  int    max    =    Math.min(rows,    jTj);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
59	[BUG]  [BUGGY]  int  max  =  Math.max(max,  jTj);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  jTj);	  int    max    =    Math.min(rows,    jTj);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
60	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  /  2;	  int    cols    =    problem.getMeasurements().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  }  else  if(jTj[i][j]  >  max)  {  jTj[i][j]  =  max;  }  [CE]  'else'  without  'if'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  }  else  if(jTj[i][j]  >  max)  {  jTj[i][j]  =  max;  }  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  }  else  if(jTj[i][j]  >  max)  {  jTj[i][j]  =  max;  }	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    }    jTj[i][j]    =    sum;    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
62	[BUG]  [BUGGY]  int  max  =  Math.max(results.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(results.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(results.length,  jTj.length);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  int  max  =  Math.max(remainings.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainings.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainings.length,  jTj.length);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
64	[BUG]  [BUGGY]  int  max  =  Math.max(results.length,  jTj);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(results.length,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(results.length,  jTj);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
65	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  max;  k  +=  3)  {	  for(int    k    =    0;    k    <    cols;    k    +=    3)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
66	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  3)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  3)  {	  for(int    k    =    0;    k    <    cols;    k    +=    3)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
67	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols  -  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  cols  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  cols  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
68	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj.length  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
69	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  cols  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
70	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols.length  -  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  cols.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols.length  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
71	[BUG]  [BUGGY]  int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	67	None	replace
72	[BUG]  [BUGGY]  double  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	67	None	replace
73	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumns().length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  /  1;	  int    cols    =    problem.getColumns().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
74	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  2;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumns().length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  +  2;	  int    cols    =    problem.getColumns().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
76	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	30	1	add
77	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	30	None	add
78	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    JTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  JTj	30	None	add
79	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    for(int  i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ';'  expected	30	None	add
80	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	For(int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    For(int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  '.class'  expected	22	None	replace
81	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  sum;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
82	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  sum.length;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
83	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum,  jTj.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  sum,  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  sum,  jTj.length;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  ';'  expected	66	None	replace
84	[BUG]  [BUGGY]  int  max  =  Math.min(sum,  max);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(sum,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(sum,  max);	  int    max    =    Math.min(max,    sum);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
85	[BUG]  [BUGGY]  int  max  =  Math.min(max,  sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  sum,  jTj.length);	  int    max    =    Math.min(max,    sum);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
86	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  max);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  max);	  int    max    =    Math.min(max,    sum);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
87	[BUG]  [BUGGY]  int  max  =  Math.min(max,  sum,  jTj);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  sum,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  sum,  jTj);	  int    max    =    Math.min(max,    sum);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
88	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  jTj.length  -  1);	  int    max    =    Math.max(jTj,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  double  max  =  Math.max(jTj,  jTj.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  max  =  Math.max(jTj,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  max  =  Math.max(jTj,  jTj.length);	  int    max    =    Math.max(jTj,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  sum,  jTj.length);	  int    max    =    Math.max(jTj,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  for(int  k  =  0;  k  <  max;  k  +=  2)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  for(int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    2)    {    for(int  k  =  0;  k  <  max;  k  +=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
92	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  max;  k  +=  2)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    2)    {    For(int  k  =  0;  k  <  max;  k  +=  2)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
93	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  int  k  =  0;  k  <  max;  k  +=  2)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    2)    {    int  k  =  0;  k  <  max;  k  +=  2)  {	  	non-compiled	[CE]  >  expected	1	None	add
94	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  for(int  k  =  0;  k  <  max);  k  +=  2)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  for(int  k  =  0;  k  <  max);  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    2)    {    for(int  k  =  0;  k  <  max);  k  +=  2)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
95	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	32	None	replace
96	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  max;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  jTj[i][j]  =  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  jTj[i][j]  =  max;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	32	None	replace
97	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  0;  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  jTj[i][j]  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  jTj[i][j]  =  0;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	32	None	replace
98	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  min)  {  [CE]  cannot  find  symbol  min  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  min)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  min)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows;    k    +=    min)    {    	non-compiled	[CE]  cannot  find  symbol  min	24	None	replace
99	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  min)  {  [CE]  cannot  find  symbol  min  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  min)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  min)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows;    k    +=    min)    {    	non-compiled	[CE]  cannot  find  symbol  min	24	None	replace
100	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  /  1;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
101	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  sum;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  -  1  +  sum;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
102	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj,  max)  {  [CE]  not  a  statement  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj,  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  jTj,  max)  {	  for(int    k    =    0;    k    <    cols;    k    +=    jTj)    {    	non-compiled	[CE]  not  a  statement	62	None	replace
103	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnCount()  +  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnCount()  +  1;	  int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
104	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnCount()  /  1;	  int    cols    =    problem.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  max;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
106	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  1)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    1)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    1)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
108	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  1)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    1)    {    	compilable	  [FE]  AssertionFailedError  	39	1	replace
109	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
110	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  '.class'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
111	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k++)  {  [CE]  '.class'  expected  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k++)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k++)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
112	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  '.class'  expected  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	For(int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
113	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  /  2;	  int    cols    =    problem.getAllParameters().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
114	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  jTj)  {  [CE]  cannot  find  symbol  columns  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  jTj)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  jTj)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    columns;    k    +=    cols)    {    	non-compiled	[CE]  cannot  find  symbol  columns	20	None	replace
115	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  sum,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  sum,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  sum,  cols);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
116	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  cols,  jTj);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  cols,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  cols,  jTj);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
117	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  result);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  result);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length,  result);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
118	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  residuals);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length,  residuals);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
119	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  jTj);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length,  jTj);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
120	[BUG]  [BUGGY]  int  max  =  Math.max(max,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(max,  jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  jTj.length,  sum);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
121	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  jTj)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  jTj)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  jTj)  {	  for(int    k    =    0;    k    <    max;    k    +=    rows)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	43	None	replace
122	[BUG]  [BUGGY]  jTj[i][j]  =  max  +  sum;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  max  +  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  max  +  sum;	  jTj[i][j]    =    max;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  sum);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
124	[BUG]  [BUGGY]  int  max  =  Math.max(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj.length,  cols);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
125	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  cols,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  cols,  sum);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
126	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    2)    {    for(int  k  =  0;  k  <  cols;  k  +=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
127	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  For(int  k  =  0;  k  <  cols;  k  +=  2)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  For(int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    2)    {    For(int  k  =  0;  k  <  cols;  k  +=  2)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
128	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  for(int  k  =  0;  k  <  cols);  k  +=  2)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  for(int  k  =  0;  k  <  cols);  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    2)    {    for(int  k  =  0;  k  <  cols);  k  +=  2)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
129	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  cols;  k  +=  2)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    2)    {    int  k  =  0;  k  <  cols;  k  +=  2)  {	  	non-compiled	[CE]  >  expected	3	None	add
130	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    for(int  k  =  0;  k  <  max;  k  +=  rows)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
131	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  For(int  k  =  0;  k  <  max;  k  +=  rows)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  For(int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    For(int  k  =  0;  k  <  max;  k  +=  rows)  {	  	non-compiled	[CE]  '.class'  expected	42	None	add
132	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max;  k  +=  columns)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max;  k  +=  columns)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    for(int  k  =  0;  k  <  max;  k  +=  columns)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
133	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  int  k  =  0;  k  <  max;  k  +=  rows)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    int  k  =  0;  k  <  max;  k  +=  rows)  {	  	non-compiled	[CE]  >  expected	42	None	add
134	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount()  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getRowsCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowsCount()  -  1;	  int    cols    =    problem.getColumnsCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
135	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  *  1;	  int    cols    =    problem.getColumnsCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
136	[BUG]  [BUGGY]  int  jTj  =  Math.max(remainder,  sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(remainder,  sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(remainder,  sum,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
137	[BUG]  [BUGGY]  double  jTj  =  Math.max(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  jTj  =  Math.max(remainder,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  jTj  =  Math.max(remainder,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
138	[BUG]  [BUGGY]  int  jTj  =  Math.max(max,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(max,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(max,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
139	[BUG]  [BUGGY]  int  jTj  =  Math.min(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.min(remainder,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.min(remainder,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
140	[BUG]  [BUGGY]  int  cols  =  problem.getColsCount();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColsCount();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColsCount();	  int    cols    =    problem.getRowsCount();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
141	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  >  expected  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  >  expected	61	None	replace
142	[BUG]  [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  >  expected  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  >  expected	61	None	replace
143	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  >  expected  [FE]                  EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  >  expected	61	None	replace
144	[BUG]  [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  max);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.max(jTj[i],  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.max(jTj[i],  max);	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
145	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
146	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  For(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  For(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    For(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  	non-compiled	[CE]  '.class'  expected	40	None	add
147	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  cols);  k  +=  jTj.length)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  for(int  k  =  0;  k  <  cols);  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    for(int  k  =  0;  k  <  cols);  k  +=  jTj.length)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
148	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  	non-compiled	[CE]  >  expected	40	None	add
149	[BUG]  [BUGGY]  int  residuals  =  Math.max(remainder,  sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.max(remainder,  sum,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(remainder,  sum,  jTj.length);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
150	[BUG]  [BUGGY]  int  residuals  =  Math.min(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.min(remainder,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.min(remainder,  jTj.length);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
151	[BUG]  [BUGGY]  int  residuals  =  Math.max(jTj,  residuals.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.max(jTj,  residuals.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(jTj,  residuals.length);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
152	[BUG]  [BUGGY]  int  residuals  =  Math.max(remainder,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.max(remainder,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(remainder,  jTj.length  -  1);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
153	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols);	  int    max    =    Math.min(cols,    jTj);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
154	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  cols);	  int    max    =    Math.min(cols,    jTj);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
155	[BUG]  [BUGGY]  double  max  =  Math.min(cols,  jTj);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  max  =  Math.min(cols,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  max  =  Math.min(cols,  jTj);	  int    max    =    Math.min(cols,    jTj);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
156	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    for(int  k  =  0;  k  <  rows;  k  +=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
157	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  For(int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  For(int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    For(int  k  =  0;  k  <  rows;  k  +=  1)  {	  	non-compiled	[CE]  '.class'  expected	38	None	add
158	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows);  k  +=  1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows);  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    for(int  k  =  0;  k  <  rows);  k  +=  1)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
159	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    for(int  k  =  0;  k  <  rows;  k  +=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
160	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  columns;  k  +=  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  for(int  k  =  0;  k  <  columns;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    for(int  k  =  0;  k  <  columns;  k  +=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
161	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  +  2;	  int    cols    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
162	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    for(int  k  =  0;  k  <  cols;  k  +=  3)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
163	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  For(int  k  =  0;  k  <  cols;  k  +=  3)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  For(int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    For(int  k  =  0;  k  <  cols;  k  +=  3)  {	  	non-compiled	[CE]  '.class'  expected	64	None	add
164	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols);  k  +=  3)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols);  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    for(int  k  =  0;  k  <  cols);  k  +=  3)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
165	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  int  k  =  0;  k  <  cols;  k  +=  3)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    int  k  =  0;  k  <  cols;  k  +=  3)  {	  	non-compiled	[CE]  >  expected	64	None	add
166	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  max);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj.length,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  max);	  int    max    =    Math.min(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
167	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  max);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  max);	  int    max    =    Math.min(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
168	[BUG]  [BUGGY]  int  max  =  Math.min(max,  sum.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  sum.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  sum.length);	  int    max    =    Math.min(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
169	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows);  k  +=  jTj.length)  {  [CE]  ';'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows);  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows);  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows);    k    +=    max)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
170	[BUG]  [BUGGY]  int  cols  =  problem.getRows().length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getRows().length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRows().length  -  1;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
171	[BUG]  [BUGGY]  int  max  =  Math.min(max,  cols.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  cols.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  cols.length);	  int    max    =    Math.min(jTj,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
172	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  1;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows  +  1;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
173	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  1;  k  +=  jTj.length)  {  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  1;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  1;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
174	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  2;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows  +  2;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
175	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  2;  k  +=  jTj.length)  {  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  2;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  2;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
176	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
177	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jTj.length)  {  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    	compilable	  [FE]  EstimationException  	73	1	replace
178	[BUG]  [BUGGY]  int  max  =  Math.min(sum,  jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(sum,  jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(sum,  jTj.length,  cols);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
179	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj.length,  cols);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
180	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj.length,  sum);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
181	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols.length,  sum);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  cols.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols.length,  sum);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
182	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  residuals);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum,  residuals);	  jTj[i][j]    =    Math.sqrt(sum);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
183	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  sum);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum,  sum);	  jTj[i][j]    =    Math.sqrt(sum);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
184	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  max);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.sqrt(sum,  max);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum,  max);	  jTj[i][j]    =    Math.sqrt(sum);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
185	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.sqrt(sum  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum  +  1);	  jTj[i][j]    =    Math.sqrt(sum);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
186	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  cols;  k  +=  jTj)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  cols;  k  +=  jTj)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	For(int  k  =  0;  k  <  cols;  k  +=  jTj)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    For(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
187	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  '.class'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	For(int  k  =  0;  k  <  rows;  k  +=  cols)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    For(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
188	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[rows][cols];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  new  double[rows][cols];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[rows][cols];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
189	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][rows];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  new  double[cols][rows];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[cols][rows];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
190	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][max];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  new  double[cols][max];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[cols][max];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
191	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumns().length  /  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  /  2;	  int    cols    =    problem.getColumns().length    -    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
192	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  jTj.length;  k  +=  2)  {	  for(int    k    =    0;    k    <    max;    k    +=    2)    {    	compilable	  [FE]  EstimationException  	2	1	replace
193	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  k  +=  2)  {  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  jTj.length;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  jTj.length;  k  +=  2)  {	  for(int    k    =    0;    k    <    max;    k    +=    2)    {    	compilable	  [FE]  EstimationException  	2	1	replace
194	[BUG]  [BUGGY]  int  jTj  =  Math.max(rows,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(rows,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(rows,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
195	[BUG]  [BUGGY]  int  jTj  =  Math.max(remainder,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(remainder,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(remainder,  sum);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
196	[BUG]  [BUGGY]  int  jTj  =  Math.max(result,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(result,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(result,  jTj.length);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
197	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumns().length  -  1  +  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  -  1  +  max;	  int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
198	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  jTj.length;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  /  jTj.length;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
199	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  *  jTj.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  *  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  *  jTj.length;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
200	[BUG]  [BUGGY]  jTj[i][j]  =  value;  for(int  i][j]  =  sum;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  value;  for(int  i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  value;  for(int  i][j]  =  sum;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
201	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  1];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  1];  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[cols][cols  +  1];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
202	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
203	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  ')'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
204	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  ')'  expected  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {  (int  k  =  0;  k  <  rows;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ')'  expected	63	None	replace
205	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1  +  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  -  1  +  max;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
206	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  2)  {  [CE]  cannot  find  symbol  columns  [FE]            EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int    k    =    0;    k    <    rows);    k    +=    2)    {    	non-compiled	[CE]  cannot  find  symbol  columns	60	None	replace
207	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  (int  k  =  0;  k  <  max;  k  +=  2)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  (int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    2)    {    (int  k  =  0;  k  <  max;  k  +=  2)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
208	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  rows);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(cols,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  rows);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
209	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  cols,  sum);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(rows,  cols,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  cols,  sum);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
210	[BUG]  [BUGGY]  int  max  =  Math.max(rows,  jTj.length);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(rows,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(rows,  jTj.length);	  int    max    =    Math.max(jTj,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
211	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  (int  k  =  0;  k  <  max;  k  +=  rows)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  (int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    (int  k  =  0;  k  <  max;  k  +=  rows)  {	  	non-compiled	[CE]  ')'  expected	42	None	add
212	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    int  k  =  0;  k  <  rows;  k  +=  1)  {	  	non-compiled	[CE]  >  expected	38	None	add
213	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  (int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    1)    {    (int  k  =  0;  k  <  rows;  k  +=  1)  {	  	non-compiled	[CE]  ')'  expected	38	None	add
214	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnSize();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnSize();	  int    cols    =    problem.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
215	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  cols)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  >  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  cols)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  cols)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  >  expected	74	None	replace
216	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  >  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  >  expected	74	None	replace
217	[BUG]  [BUGGY]  int  max  =  Math.max(rows,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(rows,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(rows,  jTj,  cols);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
218	[BUG]  [BUGGY]  int  max  =  Math.max(cols,  jTj,  residuals);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols,  jTj,  residuals);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols,  jTj,  residuals);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
219	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  jTj.length)  {  [CE]  cannot  find  symbol  columns  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    columns;    k    +=    cols)    {    	non-compiled	[CE]  cannot  find  symbol  columns	20	None	replace
220	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(rows,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj.length  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
221	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnSize()  -  1;	  int    cols    =    problem.getColumnCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
222	[BUG]  [BUGGY]  int  max  =  Math.max(cols,  sum);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols,  sum);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
223	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  cols  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  cols  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  cols  +  1);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
224	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  cols  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  cols  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  cols  -  1);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
225	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  (int  k  =  0;  k  <  cols;  k  +=  max)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  (int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    max)    {    (int  k  =  0;  k  <  cols;  k  +=  max)  {	  	non-compiled	[CE]  ')'  expected	70	None	add
226	[BUG]  [BUGGY]  int  max  =  Math.max(result,  jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(result,  jTj.length,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  jTj.length,  cols);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
227	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1,  sum);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj.length  -  1,  sum);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
228	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(rows,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj.length  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
229	[BUG]  [BUGGY]  int  max  =  Math.max(relatives.length,  jTj);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(relatives.length,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(relatives.length,  jTj);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
230	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	30	None	add
231	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  Sum;  jTj[i][j]  =  sum;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  Sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j]  =  Sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	30	None	add
232	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  (int  k  =  0;  k  <  cols;  k  +=  3)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  (int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    (int  k  =  0;  k  <  cols;  k  +=  3)  {	  	non-compiled	[CE]  ')'  expected	64	None	add
233	[BUG]  [BUGGY]  int  max  =  Math.min(max,  sum  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(max,  sum  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  sum  +  1);	  int    max    =    Math.min(max,    sum);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
234	[BUG]  [BUGGY]  jTj[i][j]  =  SumedMeasurement.doubleValue();  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  SumedMeasurement.doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  SumedMeasurement.doubleValue();	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
235	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  5)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  5)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	compilable	  [FE]  EstimationException  	17	1	replace
236	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  5)  {  [FE]  EstimationException  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  5)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  5)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	compilable	  [FE]  EstimationException  	17	1	replace
237	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(rows,  jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj.length,  sum);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
238	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum  +  2);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  Math.sqrt(sum  +  2);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum  +  2);	  jTj[i][j]    =    Math.sqrt(sum);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
239	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
240	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]                  EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  max)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
241	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]                    EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  1)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
242	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  }  else  {  jTj[i][j]  =  max;  [CE]  'else'  without  'if'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  }  else  {  jTj[i][j]  =  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  }  else  {  jTj[i][j]  =  max;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    }    jTj[i][j]    =    sum;    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
243	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jacobian[k];  [CE]  ')'  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  jTj.length;  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ')'  expected	84	None	replace
244	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  (int  k  =  0;  k  <  cols;  k  +=  2)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  (int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    2)    {    (int  k  =  0;  k  <  cols;  k  +=  2)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
245	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  (int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  (int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    jTj.length)    {    (int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  	non-compiled	[CE]  ')'  expected	40	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k++)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k++)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
247	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k++)  {  [FE]  AssertionFailedError  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k++)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k++)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  AssertionFailedError  	58	1	replace
248	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  1)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  '.class'  expected	59	None	replace
249	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  	non-compiled	[CE]  >  expected	72	None	add
250	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  (int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [CE]  ')'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  (int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows    +    max;    k    +=    jTj.length)    {    (int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  	non-compiled	[CE]  ')'  expected	72	None	add
251	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  min;  k  +=  max)  {  [CE]  cannot  find  symbol  min  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  min;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  min;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int    k    =    0;    k    <    rows;    k    +=    min)    {    	non-compiled	[CE]  cannot  find  symbol  min	24	None	replace
252	[BUG]  [BUGGY]  int  max  =  Math.max(result,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(result,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  jTj.length  -  1);	  int    max    =    Math.max(result,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
253	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  jTj.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  +  jTj.length;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  +  jTj.length;	  int    cols    =    problem.getMeasurements().length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
254	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(cols,  jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj,  sum);	  int    max    =    Math.min(cols,    jTj);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
255	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  /  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getRowCount()  /  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowCount()  /  1;	  int    cols    =    problem.getRowCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
256	[BUG]  [BUGGY]  int  max  =  Math.max(cols,  rows);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols,  rows);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols,  rows);	  int    max    =    Math.min(rows,    cols);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
257	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=)  {  [CE]  illegal  start  of  expression  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
258	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  jTj;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
259	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj.length  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  jTj.length  -  1;	  int    cols    =    problem.getAllParameters().length    +    jTj.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
260	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainder,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  cols);	  int    max    =    Math.max(sum,    cols);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
261	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  jTj);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainder,  jTj);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  jTj);	  int    max    =    Math.min(rows,    jTj);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
262	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max);  k  +=  rows)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  for(int  k  =  0;  k  <  max);  k  +=  rows)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    max;    k    +=    rows)    {    for(int  k  =  0;  k  <  max);  k  +=  rows)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
263	[BUG]  [BUGGY]  int  max  =  Math.max(remainders.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainders.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainders.length,  jTj.length);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
264	[BUG]  [BUGGY]  int  max  =  Math.max(relatives.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(relatives.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(relatives.length,  jTj.length);	  int    max    =    Math.max(jTj,    residuals.length);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
265	[BUG]  [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum;  for(int  i][j]  =  0;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  if(jTj!=  null)  {  jTj[i][j]  =  sum;  for(int  i][j]  =  0;  }  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	if(jTj!=  null)  {  jTj[i][j]  =  sum;  for(int  i][j]  =  0;  }	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
266	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  0;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  for(int  i][j]  =  0;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  for(int  i][j]  =  0;	          jTj[i][j]    =    sum;    for(int    i][j]    =    sum;    	non-compiled	[CE]  ';'  expected	34	None	replace
267	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  4;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getMeasurements().length  -  4;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  -  4;	  int    cols    =    problem.getMeasurements().length    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
268	[BUG]  [BUGGY]  jTj[i][j]  =  cost;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  cost;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  cost;	  jTj[i][j]    =    max;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
269	[BUG]  [BUGGY]  int  residuals  =  Math.max(remainder,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.max(remainder,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(remainder,  jTj,  cols);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
270	[BUG]  [BUGGY]  double  residuals  =  Math.max(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  residuals  =  Math.max(remainder,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  residuals  =  Math.max(remainder,  jTj.length);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
271	[BUG]  [BUGGY]  int  residuals  =  Math.max(remainder,  jTj,  sum);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  residuals  =  Math.max(remainder,  jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(remainder,  jTj,  sum);	  int    residuals    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
272	[BUG]  [BUGGY]  double  max  =  Math.max(result,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  double  max  =  Math.max(result,  jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	double  max  =  Math.max(result,  jTj.length,  sum);	  int    max    =    Math.max(result,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
273	[BUG]  [BUGGY]  int  cols  =  problem.getColsCount()  -  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColsCount()  -  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColsCount()  -  1;	  int    cols    =    problem.getRowsCount();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
274	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  max)  {  [CE]  cannot  find  symbol  columns  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  max)  {	  for(int    k    =    0;    k    <    cols;    k    +=    max)    {    	non-compiled	[CE]  cannot  find  symbol  columns	71	None	replace
275	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  *  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnCount()  *  1;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnCount()  *  1;	  int    cols    =    problem.getColumnCount()    -    1;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
276	[BUG]  [BUGGY]  Integer  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  Integer  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	Integer  k  =  0;  k  <  rows;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  >  expected	25	None	replace
277	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  jTj,  cols);	  int    max    =    Math.max(remainder,    jTj,    cols);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
278	[BUG]  [BUGGY]  int  max  =  Math.max(cols.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols.length,  jTj.length);	  int    max    =    Math.min(jTj,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
279	[BUG]  [BUGGY]  int  max  =  Math.max(result,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(result,  jTj,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  jTj,  cols);	  int    max    =    Math.max(result,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
280	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    }    jTj[i][j]    =    sum;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
281	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  cols;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  cols;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  }  jTj[i][j]  =  cols;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    }    jTj[i][j]    =    sum;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
282	[BUG]  [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  max;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  sum;  }  jTj[i][j]  =  max;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  sum;  }  jTj[i][j]  =  max;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    }    jTj[i][j]    =    sum;    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
283	[BUG]  [BUGGY]  int  jTj  =  Math.max(remainder,  jTj,  sum);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  jTj  =  Math.max(remainder,  jTj,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(remainder,  jTj,  sum);	  int    jTj    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
284	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length  -  2);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(sum,  jTj.length  -  2);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length  -  2);	  int    max    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  For(int  k  =  0;  k  <  cols;  k  +=  3)  {  [CE]  '.class'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  For(int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	For(int  k  =  0;  k  <  cols;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    For(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  '.class'  expected	18	None	replace
286	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j],  sum;  jTj[i][j]  =  sum;  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j],  sum;  jTj[i][j]  =  sum;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j],  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  not  a  statement	30	None	add
287	[BUG]  [BUGGY]  int  max  =  Math.min(cols.length,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(cols.length,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols.length,  jTj.length);	  int    max    =    Math.min(jTj.length,    cols);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
288	[BUG]  [BUGGY]  int  max  =  Math.max(cols,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols,  jTj.length  -  1);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
289	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1,  cols);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1,  cols);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj.length  -  1,  cols);	  int    max    =    Math.min(cols,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
290	[BUG]  [BUGGY]  int  max  =  Math.max(jTj.length,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(jTj.length,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj.length,  jTj.length  -  1);	  int    max    =    Math.max(max,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
291	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(remainder,  jTj.length  -  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  jTj.length  -  1);	  int    max    =    Math.max(max,    jTj.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
292	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  jTj.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  jTj.length);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  jTj.length);	  int    max    =    Math.min(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
293	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  cols  =  problem.getColumnsCount()  *  2;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  *  2;	  int    cols    =    problem.getColumnsCount()    -    2;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
294	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  3)  {  [CE]  cannot  find  symbol  columns  [FE]              EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  3)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    columns;    k    +=    cols)    {    	non-compiled	[CE]  cannot  find  symbol  columns	20	None	replace
295	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  j)  {  [CE]  cannot  find  symbol  columns  [FE]                EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  columns;  k  +=  j)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  columns;  k  +=  j)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int    k    =    0;    k    <    columns;    k    +=    cols)    {    	non-compiled	[CE]  cannot  find  symbol  columns	20	None	replace
296	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  jTj.length,  sum);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  jTj.length,  sum);	  int    max    =    Math.min(cols,    jTj.length,    sum);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
297	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    cols;    k    +=    3)    {    for(int  k  =  0;  k  <  cols;  k  +=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
298	[BUG]  [BUGGY]  jTj[i][j]  =  result;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  result;  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  result;	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
299	[BUG]  [BUGGY]  int  max  =  Math.max(cols,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.max(cols,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(cols,  jTj.length  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
300	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  int  max  =  Math.min(jTj,  jTj.length  +  1);  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  jTj.length  +  1);	  int    max    =    Math.min(cols,    jTj.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
301	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  2);  k  +=  jacobian[k];  [CE]  ';'  expected  [FE]        EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  2);  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  2);  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ';'  expected	84	None	replace
302	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  1);  k  +=  jacobian[k];  [CE]  ';'  expected  [FE]          EstimationException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows  +  1);  k  +=  jacobian[k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  1);  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows    +    max);    k    +=    jacobian[k];    	non-compiled	[CE]  ';'  expected	84	None	replace
303	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols].doubleValue();  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  jTj[i][j]  =  new  double[cols][cols].doubleValue();  [BUGGY]      for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[cols][cols].doubleValue();	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
304	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;      [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=)  {  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=)  {	  for(int    k    =    0;    k    <    max;    k    +=    rows)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
