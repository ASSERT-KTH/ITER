bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  max;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
2	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
3	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  EstimationException  	12	1	replace
4	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	compilable	  [FE]  EstimationException  	12	1	replace
5	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  min;  k  +=  2)  {  [CE]  cannot  find  symbol  min  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  min;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  min;  k  +=  2)  {	  for(int    k    =    0;    k    <    rows;    k    +=    2)    {    	non-compiled	[CE]  cannot  find  symbol  min	12	None	replace
6	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  -  1;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  1;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  jTj[i][j]  =  max;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  jTj[i][j]  =  max;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  max;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  jTj[i][j]  =  total;  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  jTj[i][j]  =  total;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  total;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  jTj[i][j]  =  jTj;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  jTj[i][j]  =  jTj;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  jTj;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  -  1;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  +  1;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getMeasurements().length  -  2;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getMeasurements().length  -  2;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(sum,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  jTj.length);	      int    max    =    Math.max(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(max,  jTj.length  -  1);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(max,  jTj.length  -  1);	      int    max    =    Math.max(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  jTj.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(jTj,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  jTj.length);	      int    max    =    Math.max(max,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int  k  =  0;  k  <  rows;  k  +=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
18	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  For(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  For(int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    For(int  k  =  0;  k  <  rows;  k  +=  cols)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
19	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  rows);  k  +=  cols)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  rows);  k  +=  cols)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int  k  =  0;  k  <  rows);  k  +=  cols)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
20	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  columns;  k  +=  cols)  {  [CE]  illegal  start  of  expression  [FE]          EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  for(int  k  =  0;  k  <  columns;  k  +=  cols)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    for(int  k  =  0;  k  <  columns;  k  +=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
21	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int  k  =  0;  k  <  rows;  k  +=  max)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
22	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  For(int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  For(int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    For(int  k  =  0;  k  <  rows;  k  +=  max)  {	  	non-compiled	[CE]  '.class'  expected	9	None	add
23	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows);  k  +=  max)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows);  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int  k  =  0;  k  <  rows);  k  +=  max)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
24	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows;  k  +=  min)  {  [CE]  illegal  start  of  expression  [FE]          EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  for(int  k  =  0;  k  <  rows;  k  +=  min)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    for(int  k  =  0;  k  <  rows;  k  +=  min)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
25	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  >  expected  [FE]            EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    int  k  =  0;  k  <  rows;  k  +=  max)  {	  	non-compiled	[CE]  >  expected	9	None	add
26	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumnCount();  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnCount();	      int    cols    =    problem.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getRowCount()  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowCount()  -  1;	      int    cols    =    problem.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getRowCount()  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowCount()  +  1;	      int    cols    =    problem.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  -  2;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getRowCount()  -  2;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowCount()  -  2;	      int    cols    =    problem.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
31	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	add
32	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    for(int  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	4	None	add
33	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    JTj[i][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  JTj	4	None	add
34	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  i][j]  =  sum;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  for(int  i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    for(int  i][j]  =  sum;	  	non-compiled	[CE]  ';'  expected	4	None	add
35	[BUG]  [BUGGY]  int  max  =  Math.max(jTj,  residuals.length);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(jTj,  residuals.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(jTj,  residuals.length);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  int  max  =  Math.max(result,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(result,  jTj.length,  sum);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  jTj.length,  sum);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  int  max  =  Math.max(result,  jTj.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(result,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(result,  jTj.length);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
39	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  1)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows;  k  +=  1)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
40	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	10	1	replace
41	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	10	1	replace
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  max;  k  +=  rows)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
43	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  max;  k  +=  rows)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  max;  k  +=  rows)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
44	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  -  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  +  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getRowsCount();  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getRowsCount();	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  -  1;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  +  1;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumns().length  -  2;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumns().length  -  2;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  int  max  =  Math.min(sum,  cols);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(sum,  cols);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(sum,  cols);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  int  max  =  Math.max(sum,  cols);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(sum,  cols);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(sum,  cols);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  int  max  =  Math.min(max,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(max,  sum);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  sum);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(rows,  jTj);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  int  max  =  Math.min(jTj.length,  cols);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(jTj.length,  cols);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj.length,  cols);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  int  max  =  Math.min(jTj,  cols.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(jTj,  cols.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(jTj,  cols.length);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  int  max  =  Math.min(max,  jTj.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(max,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(max,  jTj.length);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length,  sum);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(cols,  jTj.length,  sum);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj.length,  sum);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
58	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int  k  =  0;  k  <  rows;  k  +=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
59	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  For(int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    2)    {    For(int  k  =  0;  k  <  rows;  k  +=  2)  {	  	non-compiled	[CE]  '.class'  expected	11	None	add
60	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  for(int  k  =  0;  k  <  rows);  k  +=  2)  {  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  for(int  k  =  0;  k  <  rows);  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    2)    {    for(int  k  =  0;  k  <  rows);  k  +=  2)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
61	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [CE]  >  expected  [FE]          EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  2)  {  int  k  =  0;  k  <  rows;  k  +=  2)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    2)    {    int  k  =  0;  k  <  rows;  k  +=  2)  {	  	non-compiled	[CE]  >  expected	11	None	add
62	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  jTj)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  jTj)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
63	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  max)  {  (int  k  =  0;  k  <  rows;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    max)    {    (int  k  =  0;  k  <  rows;  k  +=  max)  {	  	non-compiled	[CE]  ')'  expected	9	None	add
64	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	compilable	  [FE]  EstimationException  	8	1	replace
65	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  3)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  3)  {	  for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    	compilable	  [FE]  EstimationException  	8	1	replace
66	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj.length;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  jTj.length;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  +  jTj.length;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    int  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	4	None	add
68	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(cols,  jTj);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  jTj[i][j]  =  Math.sqrt(sum);  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  jTj[i][j]  =  Math.sqrt(sum);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  Math.sqrt(sum);	      jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  cols;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	10	1	replace
71	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  cols;  k  +=  max)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  cols;  k  +=  max)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  EstimationException  	10	1	replace
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
73	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  max;  k  +=  jTj.length)  {	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
74	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [CE]  >  expected  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows;  k  +=  cols)  {  int  k  =  0;  k  <  rows;  k  +=  cols)  {  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int    k    =    0;    k    <    rows;    k    +=    cols)    {    int  k  =  0;  k  <  rows;  k  +=  cols)  {	  	non-compiled	[CE]  >  expected	7	None	add
75	[BUG]  [BUGGY]  int  jTj  =  Math.max(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  jTj  =  Math.max(remainder,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  jTj  =  Math.max(remainder,  jTj.length);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
76	[BUG]  [BUGGY]  int  residuals  =  Math.max(remainder,  jTj.length);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  residuals  =  Math.max(remainder,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  residuals  =  Math.max(remainder,  jTj.length);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  jTj.length);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(rows,  jTj.length);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  jTj.length);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
78	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(cols,  jTj.length  -  1);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj.length  -  1);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  int  max  =  Math.min(cols,  jTj.length  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(cols,  jTj.length  +  1);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(cols,  jTj.length  +  1);	      int    max    =    Math.min(cols,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
80	[BUG]  [BUGGY]  int  max  =  Math.min(rows,  cols);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.min(rows,  cols);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.min(rows,  cols);	      int    max    =    Math.min(cols,    sum);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
81	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getAllParameters().length  -  2;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  }  jTj[i][j]  =  sum;	  	non-compiled	[CE]  illegal  start  of  type	4	None	add
83	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols];  [CE]  illegal  start  of  type  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  jTj[i][j]  =  new  double[cols][cols];  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	jTj[i][j]  =  new  double[cols][cols];	      jTj[i][j]    =    sum;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  rows  +  max);  k  +=  jacobian[k];  [CE]  ';'  expected  [FE]    EstimationException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  for(int  k  =  0;  k  <  rows  +  max);  k  +=  jacobian[k];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	for(int  k  =  0;  k  <  rows  +  max);  k  +=  jacobian[k];	  for(int    k    =    0;    k    <    rows;    k    +=    max)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
85	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumnCount()  -  1;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnCount()  -  1;	      int    cols    =    problem.getRowCount();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  int  max  =  Math.max(remainder,  jTj,  cols);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  max  =  Math.max(remainder,  jTj,  cols);  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  max  =  Math.max(remainder,  jTj,  cols);	      int    max    =    Math.max(remainder,    jTj.length);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  -  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;    [BUGGY]  int  cols  =  problem.getColumnsCount()  -  2;  [BUGGY]    for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	int  cols  =  problem.getColumnsCount()  -  2;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
