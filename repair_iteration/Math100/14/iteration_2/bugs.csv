bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getAllParameters().length  -  1;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getAllParameters().length  +  1;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  for(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    for(int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    For(int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
5	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  >  expected	6	None	add
6	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumns().length  -  1;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumns().length  +  1;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  int  cols  =  problem.getRows().length;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getRows().length;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getRows().length;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  1;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	for(int  j  =  1;  j  <  cols;  ++j)  {	  for(int    j    =    cols;    j    <    i;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
10	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  cols;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  1;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  1;  j  <  cols;  ++j)  {	  for(int    j    =    cols;    j    <    i;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
11	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  0;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	for(int  j  =  cols;  j  <  0;  ++j)  {	  for(int    j    =    cols;    j    <    i;    ++j)    {    	compilable	  [FE]  EstimationException  	9	1	replace
12	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  0;  ++j)  {  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  0;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  cols;  j  <  0;  ++j)  {	  for(int    j    =    cols;    j    <    i;    ++j)    {    	compilable	  [FE]  EstimationException  	9	1	replace
13	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  for(int  j  =  cols;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  for(int  j  =  cols;  j  <  i;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    cols;    j    <    i;    ++j)    {    for(int  j  =  cols;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
14	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  For(int  j  =  cols;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  For(int  j  =  cols;  j  <  i;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    cols;    j    <    i;    ++j)    {    For(int  j  =  cols;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
15	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  int  j  =  cols;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]        EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  int  j  =  cols;  j  <  i;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    cols;    j    <    i;    ++j)    {    int  j  =  cols;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	8	None	add
16	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  cols  =  new  double[cols][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  jTj  =  new  double[rows][i];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][0];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  jTj  =  new  double[cols][0];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  cols  =  new  double[cols][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  cols  =  new  double[cols][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[rows][i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  jTj  =  new  double[rows][i].doubleValue();	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  jTj  =  new  double[cols][i].doubleValue()  +  1;	      double[][]    jTj    =    new    double[cols][i].doubleValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  jTj[i][i]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  jTj[i][i]  =  jTj[i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	jTj[i][i]  =  jTj[i].doubleValue();	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][i]  =  jTj[i].doubleValue();  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][i]  =  jTj[i].doubleValue();  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  jTj[i][i]  =  jTj[i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  jTj[i][i]  =  jTj[i];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  jTj[i][i]  =  jTj[i];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	jTj[i][i]  =  jTj[i];	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	for(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
28	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	for(int  j  =  0;  j  <  max;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	for(int  j  =  0;  j  <  cols;  ++i)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++i)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  cols;  ++i)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
33	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	cols  =  problem.getAllParameters().length  +  1;	      cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  -  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	cols  =  problem.getAllParameters().length  -  1;	      cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  cols  =  problem.getAllParameters().length  +  i;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  cols  =  problem.getAllParameters().length  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	cols  =  problem.getAllParameters().length  +  i;	      cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount(i);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumnsCount(i);  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumnsCount(i);	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumnsCount()  -  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getRowsCount();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getRowsCount();	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumnsCount()  +  1;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getMeasurements().length  -  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getMeasurements().length  -  1;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getMeasurements().length  +  1;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getMeasurements().length  +  1;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  +  i;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getMeasurements().length  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getMeasurements().length  +  i;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  cannot  find  symbol  columns  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  columns	7	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  (int  j  =  cols;  j  <  i;  ++j)  {  [CE]  ')'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  (int  j  =  cols;  j  <  i;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    cols;    j    <    i;    ++j)    {    (int  j  =  cols;  j  <  i;  ++j)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
45	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  +  i;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumnsCount()  +  i;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  (int  j  =  0;  j  <  cols;  ++j)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    (int  j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  ')'  expected	6	None	add
47	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  i;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getAllParameters().length  +  i;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  int  i  =  0;  jTj[i][i]  =  jTj[i].doubleValue();  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  i  =  0;  jTj[i][i]  =  jTj[i].doubleValue();  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  i  =  0;  jTj[i][i]  =  jTj[i].doubleValue();	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  i;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumns().length  +  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumns().length  +  i;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  int  cols  =  problem.getMeasurements().length  -  2;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getMeasurements().length  -  2;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getMeasurements().length  -  2;	      int    cols    =    problem.getMeasurements().length;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  FOR(int  j  =  cols;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]    EstimationException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  cols;  j  <  i;  ++j)  {  FOR(int  j  =  cols;  j  <  i;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    cols;    j    <    i;    ++j)    {    FOR(int  j  =  cols;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
52	[BUG]  [BUGGY]  for(int  j  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  jTj[i];  }  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  i  <  cols;  ++i)  {  jTj[i][i]  =  jTj[i];  }	      for(int    i    =    0;    i    <    cols;    ++i)    {    jTj[i][i]    =    jTj[i];    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  i;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumnsCount()  *  i;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumnsCount()  *  i;	      int    cols    =    problem.getColumnsCount();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getAllParameters().length  -  2;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  double[][]  jTj  =  new  double[cols][cols];  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	double[][]  jTj  =  new  double[cols][cols];	      double[][]    jTj    =    new    double[cols][i];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  int  cols  =  problem.getColumns().length  -  2;  [BUGGY]    for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	int  cols  =  problem.getColumns().length  -  2;	      int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int    j    =    0;    j    <    cols;    ++j)    {    j  =  0;  j  <  cols;  ++j)  {	  	non-compiled	[CE]  >  expected	6	None	add
58	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {    [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  [BUGGY]    double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {	  for(int    j    =    0;    j    <    cols;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  row	7	None	replace
