bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  wm.length  =  Math.min(wm.length,  cost);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm.length  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm.length  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    double    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	90	None	replace
2	[BUG]  [BUGGY]  double  wm.length  =  Math.max(wm.length,  cost);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm.length  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm.length  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    double    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	90	None	replace
3	[BUG]  [BUGGY]  double  wm.length  =  Math.max(wm.length,  0);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm.length  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm.length  =  Math.max(wm.length,  0);	  double    criterion    =    Math.min(wm.length,    cost);    double    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	90	None	replace
4	[BUG]  [BUGGY]  Math  criterion  =  Math.max(wm.length,  cost);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    Math    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  incompatible  types	96	None	replace
5	[BUG]  [BUGGY]  Math  criterion  =  Math.min(wm.length,  wm.length);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.min(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    Math    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  incompatible  types	96	None	replace
6	[BUG]  [BUGGY]  criterion  =  Math.max(wm.length,  cost);  [CE]  cannot  find  symbol  criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  criterion  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	criterion  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    Math    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	96	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  1.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
8	[BUG]  [BUGGY]  double  criterion  =  1.0;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  1.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0.5;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
10	[BUG]  [BUGGY]  double  criterion  =  0.5;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.5;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0.5;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
11	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  0;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  0;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  0;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	105	None	replace
12	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  Math.max(0,  wm.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  Math.max(0,  wm.length);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  Math.max(0,  wm.length);	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	105	None	replace
13	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   "));    }    	non-compiled	[CE]  	93	None	replace
14	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  1;  [CE]  cannot  find  symbol  criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	36	None	replace
15	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  2;  [CE]  cannot  find  symbol  criterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  +  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  +  2;	  int    cols    =    parameters.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	36	None	replace
16	[BUG]  [BUGGY]  double  wm  =  Math.max(0,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    double    wm    =    Math.max(0,    wm.length);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
17	[BUG]  [BUGGY]  Double  wm  =  Math.max(0,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  wm  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  wm  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    double    wm    =    Math.max(0,    wm.length);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
18	[BUG]  [BUGGY]  wm  =  Math.max(0,  wm.length);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  wm  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	wm  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    double    wm    =    Math.max(0,    wm.length);    	non-compiled	[CE]  incompatible  types	68	None	replace
19	[BUG]  [BUGGY]  int  cols  =  measurements.length;  [CE]  cannot  find  symbol  criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  measurements.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  measurements.length;	          int    cols    =    parameters.length;    int    cols    =    measurements.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	126	None	replace
20	[BUG]  [BUGGY]  int  criterion  =  1;  double  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  1;  double  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  1;  double  criterion  =  2;	  double    criterion    =    1;    double    criterion    =    2;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	122	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
23	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	71	None	replace
24	[BUG]  [BUGGY]  double  cols  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  cols  =  wm.length;	          int    cols    =    wm.length;    double    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	114	None	replace
25	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2  +  1;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  2  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  2  +  1;	  int    cols    =    wm.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	2	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  /  wm.length  +  1;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
27	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length  +  1;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  /  wm.length  +  1;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  /  wm.length  -  1;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	10	replace
29	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length  -  1;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  /  wm.length  -  1;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	10	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  /  wm.length  -  2;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	10	replace
31	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length  -  2;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  /  wm.length  -  2;	  double    criterion    =    0d    /    wm.length;    	compilable	  [FE]  AssertionFailedError  	31	10	replace
32	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  double  criterion  =  Math.max(wm.length,  0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  double  criterion  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    double  criterion  =  Math.max(wm.length,  0);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	50	None	add
33	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Double  criterion  =  Math.max(wm.length,  0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Double  criterion  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    Double  criterion  =  Math.max(wm.length,  0);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	50	None	add
34	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  int  criterion  =  Math.max(wm.length,  0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  int  criterion  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    int  criterion  =  Math.max(wm.length,  0);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	50	None	add
35	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Math  criterion  =  Math.max(wm.length,  0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Math  criterion  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    Math  criterion  =  Math.max(wm.length,  0);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	50	None	add
36	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  double  criterion  =  Math.max(wm.length,  0,  0);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  double  criterion  =  Math.max(wm.length,  0,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    double  criterion  =  Math.max(wm.length,  0,  0);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	50	None	add
37	[BUG]  [BUGGY]  Math  criterion  =  0L;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  0L;	  double    criterion    =    0L;    Math    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	17	None	replace
38	[BUG]  [BUGGY]  Math  criterion  =  0;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  0;	  double    criterion    =    0L;    Math    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	17	None	replace
39	[BUG]  [BUGGY]  double  criterion  =  0;  Math  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  Math  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  Math  criterion  =  0;	  double    criterion    =    0L;    Math    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
40	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  Cost);  [CE]  cannot  find  symbol  Cost  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  Cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  Cost);	  double    criterion    =    Math.min(wm.length,    cost);    double    criterion    =    Math.min(wm.length,    Cost);    	non-compiled	[CE]  cannot  find  symbol  Cost	78	None	replace
41	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  parameters);  [CE]  no  suitable  method  found  for  min(int,EstimatedParameter[])  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  parameters);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  parameters);	  double    criterion    =    Math.min(wm.length,    cost);    double    criterion    =    Math.min(wm.length,    Cost);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,EstimatedParameter[])	78	None	replace
42	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  double  criterion  =  Math.max(0,  wm.length  -  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  double  criterion  =  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    double  criterion  =  Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	add
43	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Double  criterion  =  Math.max(0,  wm.length  -  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Double  criterion  =  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    Double  criterion  =  Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	add
44	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  int  wm.length  -  2  =  Math.max(0,  wm.length  -  2);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  int  wm.length  -  2  =  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    int  wm.length  -  2  =  Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  ';'  expected	7	None	add
45	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Math  criterion  =  Math.max(0,  wm.length  -  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Math  criterion  =  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    Math  criterion  =  Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	add
46	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Math.max(0,  wm.length  -  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {	  for(int    i    =    0;    i    <    measurement.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {	  for(int    i    =    0;    i    <    measurement.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  size;  ++i)  {	  for(int    i    =    0;    i    <    measurement.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
51	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	int  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	3	replace
53	[BUG]  [BUGGY]  int  criterion  =  0;  criterion  =  0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	3	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	int  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	4	replace
55	[BUG]  [BUGGY]  int  criterion  =  1;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	4	replace
56	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  2;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	35	None	replace
57	[BUG]  [BUGGY]  int  cols  =  wm.length  /  1;  [CE]  cannot  find  symbol  criterion  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  1;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	1	None	replace
58	[BUG]  [BUGGY]  int  cols  =  wm.length  -  3;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  3;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  3;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	1	None	replace
59	[BUG]  [BUGGY]  int  cols  =  variables.length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  variables.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  variables.length;	          int    cols    =    parameters.length;    int    cols    =    variables.length;    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
60	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  criterion  =  Math.min(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  criterion  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    double  criterion  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	add
61	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Double  criterion  =  Math.min(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Double  criterion  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    Double  criterion  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	add
62	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    double  wm.length  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	52	None	add
63	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Math  criterion  =  Math.min(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Math  criterion  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    Math  criterion  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	add
64	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  int  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  int  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    int  wm.length  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	52	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	Double  criterion  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    Double    criterion    =    Math.min(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	75	4	replace
66	[BUG]  [BUGGY]  Double  criterion  =  Math.min(wm.length,  cost);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    Double    criterion    =    Math.min(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	75	4	replace
67	[BUG]  [BUGGY]  criterion  =  Math.min(wm.length,  cost);  [CE]  cannot  find  symbol  criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  criterion  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	criterion  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    Double    criterion    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	75	None	replace
68	[BUG]  [BUGGY]  Math  criterion  =  1;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  1;	  double    criterion    =    1;    Math    criterion    =    1;    	non-compiled	[CE]  incompatible  types	83	None	replace
69	[BUG]  [BUGGY]  SizedMeasurement  wm  =  problem.getSize();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement  wm  =  problem.getSize();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement  wm  =  problem.getSize();	  double    criterion    =    1;    Math    criterion    =    1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(0,  wm.length  -  1);	  double    criterion    =    Math.min(0,    wm.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
71	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(0,  wm.length  -  1);	  double    criterion    =    Math.min(0,    wm.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(0,  wm.length  -  2);	  double    criterion    =    Math.min(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	12	2	replace
73	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  2);  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(0,  wm.length  -  2);	  double    criterion    =    Math.min(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	12	2	replace
74	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
75	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  wm.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  wm.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  wm.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
76	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  variables.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  variables.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  variables.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
77	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  measurements.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  measurements.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  measurements.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
78	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  colls  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  colls  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
79	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  wm.getMeasurements();	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
80	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problems.getMeasurements();	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
81	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements(),  parameters;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements(),  parameters;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem.getMeasurements(),  parameters;	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
82	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  cost);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(null,  cost);	  EstimationProblem    wm    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
83	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  null);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(null,  null);	  EstimationProblem    wm    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
84	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(result);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(result);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(result);	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
85	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS()  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS()  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS()  +  1;	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
86	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(this);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(this);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(this);	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
87	[BUG]  [BUGGY]  int  criterion  =  Math.max(wm.length,  cost);  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    double    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
88	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  cols.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  cols.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  cols.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
89	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  null  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  null  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  null  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    null    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
90	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm  ==  null?  null  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  wm  ==  null?  null  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  wm  ==  null?  null  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    null    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
91	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()  ==  null?  null  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()  ==  null?  null  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem.getSize()  ==  null?  null  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    null    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
92	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  problems[i].getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  problems[i].getRMS();	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
93	[BUG]  [BUGGY]  EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
94	[BUG]  [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  wm[i].getResidual();	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
95	[BUG]  [BUGGY]  Math  criterion  =  0d;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  0d;	  double    criterion    =    0d;    Math    criterion    =    0d;    	non-compiled	[CE]  incompatible  types	26	None	replace
96	[BUG]  [BUGGY]  int  criterion  =  0;  Math  criterion  =  0d;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  Math  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  Math  criterion  =  0d;	  double    criterion    =    0d;    Math    criterion    =    0d;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	26	None	replace
97	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  double  criterion  =  Math.max(0,  wm.length  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  double  criterion  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    double  criterion  =  Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	add
98	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Double  criterion  =  Math.max(0,  wm.length  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Double  criterion  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    Double  criterion  =  Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	add
99	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Math  criterion  =  Math.max(0,  wm.length  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Math  criterion  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    Math  criterion  =  Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	add
100	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  int  wm.length  =  Math.max(0,  wm.length  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  int  wm.length  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    int  wm.length  =  Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  ';'  expected	9	None	add
101	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Math.max(0,  wm.length  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	add
102	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  0);	  double    criterion    =    Math.min(wm.length,    cost);    double    criterion    =    Math.min(wm.length,    cost);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
103	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  0);	  double    criterion    =    Math.min(wm.length,    cost);    double    criterion    =    Math.min(wm.length,    cost);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	74	1	replace
104	[BUG]  [BUGGY]  int  wm.length  =  Math.max(wm.length,  cost);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    int    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	61	None	replace
105	[BUG]  [BUGGY]  Integer  wm.length  =  Math.max(wm.length,  cost);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Integer  wm.length  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Integer  wm.length  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    int    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	61	None	replace
106	[BUG]  [BUGGY]  int  wm.length  =  Math.min(wm.length,  cost);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    int    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	61	None	replace
107	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getRMS());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getRMS());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  Math.sqrt(wm[0].getRMS());	  double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
108	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getMean());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getMean());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  Math.sqrt(wm[0].getMean());	  double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
109	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getRaw());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getRaw());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  Math.sqrt(wm[0].getRaw());	  double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
110	[BUG]  [BUGGY]  Math  criterion  =  Math.max(0,  wm.length);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math    criterion    =    Math.max(0,    wm.length);    	non-compiled	[CE]  incompatible  types	98	None	replace
111	[BUG]  [BUGGY]  n  =  Math.max(0,  wm.length);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  n  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	n  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math    criterion    =    Math.max(0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  n	98	None	replace
112	[BUG]  [BUGGY]  ger  criterion  =  Math.max(0,  wm.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  ger  criterion  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	ger  criterion  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math    criterion    =    Math.max(0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
113	[BUG]  [BUGGY]  criterion  =  Math.max(0,  wm.length);  [CE]  cannot  find  symbol  criterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  criterion  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	criterion  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math    criterion    =    Math.max(0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  criterion	98	None	replace
114	[BUG]  [BUGGY]  EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  wm.getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	70	None	replace
115	[BUG]  [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  wm[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	70	None	replace
116	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  *  1;	  EstimationProblem    wm    =    problem.getMeasurements()    +    1;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	19	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  *  wm.length  -  1;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	10	replace
118	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length  -  1;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  *  wm.length  -  1;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	10	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  *  wm.length  +  1;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	9	replace
120	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length  +  1;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  *  wm.length  +  1;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	9	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  *  wm.length  -  2;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	10	replace
122	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length  -  2;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  -  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  *  wm.length  -  2;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  AssertionFailedError  	29	10	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  *  wm.length  /  2;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
124	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  *  wm.length  /  2;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
125	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  double  criterion  =  Math.min(0,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  double  criterion  =  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    double  criterion  =  Math.min(0,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	add
126	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Double  criterion  =  Math.min(0,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Double  criterion  =  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    Double  criterion  =  Math.min(0,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	add
127	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Math  criterion  =  Math.min(0,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Math  criterion  =  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    Math  criterion  =  Math.min(0,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	add
128	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wm.length  =  Math.min(0,  wm.length);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wm.length  =  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    int  wm.length  =  Math.min(0,  wm.length);	  	non-compiled	[CE]  ';'  expected	11	None	add
129	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Math.min(0,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    Math.min(0,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	add
130	[BUG]  [BUGGY]  int  wm.length  =  Math.max(0,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    int    wm.length    =    Math.max(0,    wm.length);    	non-compiled	[CE]  ';'  expected	67	None	replace
131	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  +  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  +  1);	  double    criterion    =    Math.max(0,    wm.length);    int    wm.length    =    Math.max(0,    wm.length);    	non-compiled	[CE]  ';'  expected	67	None	replace
132	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  cost);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(this,  cost);	  EstimationProblem    wm    =    problem.getStandardProblem(this);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	92	None	replace
133	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  parameters);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(this,  parameters);	  EstimationProblem    wm    =    problem.getStandardProblem(this);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	92	None	replace
134	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  error);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  error);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(this,  error);	  EstimationProblem    wm    =    problem.getStandardProblem(this);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	92	None	replace
135	[BUG]  [BUGGY]  double  criterion  =  2;  double  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  2;  double  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    2;    double  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	56	None	add
136	[BUG]  [BUGGY]  double  criterion  =  2;  Double  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  2;  Double  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    2;    Double  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	56	None	add
137	[BUG]  [BUGGY]  double  criterion  =  2;  int  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  2;  int  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    2;    int  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	56	None	add
138	[BUG]  [BUGGY]  double  criterion  =  2;  Math  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  2;  Math  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    2;    Math  criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	56	None	add
139	[BUG]  [BUGGY]  double  criterion  =  2;  criterion  =  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  2;  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    2;    criterion  =  2;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	56	None	add
140	[BUG]  [BUGGY]  Double  criterion  =  0;  criterion  =  0;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  0;  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  0;  criterion  =  0;	  double    criterion    =    0L;    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	16	None	replace
141	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  1;  [CE]  cannot  find  symbol  criterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  2  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  2  +  1;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	4	None	replace
142	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  costEvaluations;  [CE]  cannot  find  symbol  criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  2  +  costEvaluations;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  2  +  costEvaluations;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	4	None	replace
143	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  *  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  2  *  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  2  *  parameters.length;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	4	None	replace
144	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  cms  =  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  cms  =  parameters.length;	          int    cols    =    parameters.length;    int    cms    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	45	None	replace
145	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  cms  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length;  int  cms  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length;  int  cms  =  wm.length;	          int    cols    =    parameters.length;    int    cms    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	45	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
148	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	85	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	int  criterion  =  0;	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
150	[BUG]  [BUGGY]  int  criterion  =  0;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	3	replace
151	[BUG]  [BUGGY]  Double  criterion  =  0;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  0;	  double    criterion    =    0d;    double    criterion    =    0d;    	non-compiled	[CE]  incompatible  types	22	None	replace
152	[BUG]  [BUGGY]  double  wm.length  =  Math.max(wm.length,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm.length  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm.length  =  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    double    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	60	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.sqrt(wm.length  +  1);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
154	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length  +  1);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.rint(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.rint(wm.length);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
156	[BUG]  [BUGGY]  double  criterion  =  Math.rint(wm.length);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.rint(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.rint(wm.length);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.sqrt(wm.length  -  1);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	8	replace
158	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length  -  1);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	8	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.sqrt(wm.length  -  2);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
160	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  2);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length  -  2);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
161	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	72	None	replace
162	[BUG]  [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
163	[BUG]  [BUGGY]  Double  criterion  =  0L;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  0L;	  double    criterion    =    0L;    Double    criterion    =    0L;    	non-compiled	[CE]  incompatible  types	14	None	replace
164	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  wm.length);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    wm.length);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	95	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length  /  2);	  double    criterion    =    Math.max(0,    wm.length    -    2);    	compilable	  [FE]  AssertionFailedError  	8	8	replace
166	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length  /  2);	  double    criterion    =    Math.max(0,    wm.length    -    2);    	compilable	  [FE]  AssertionFailedError  	8	8	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length  -  3);	  double    criterion    =    Math.max(0,    wm.length    -    2);    	compilable	  [FE]  AssertionFailedError  	8	5	replace
168	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  3);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length  -  3);	  double    criterion    =    Math.max(0,    wm.length    -    2);    	compilable	  [FE]  AssertionFailedError  	8	5	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  1);	  double    criterion    =    Math.max(wm.length,    0);    	compilable	  [FE]  AssertionFailedError  	51	9	replace
170	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  1);	  double    criterion    =    Math.max(wm.length,    0);    	compilable	  [FE]  AssertionFailedError  	51	9	replace
171	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0,  wm.length);  [CE]  no  suitable  method  found  for  max(int,int,int)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  0,  wm.length);	  double    criterion    =    Math.max(wm.length,    0);    	non-compiled	[CE]  no  suitable  method  found  for  max(int,int,int)	51	None	replace
172	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
173	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
174	[BUG]  [BUGGY]  Int  cols  =  wm.length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Int  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2  *  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  2  *  wm.length);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
176	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2  *  wm.length);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2  *  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  2  *  wm.length);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  costEvaluations);	  double    criterion    =    Math.min(wm.length,    costEvaluations);    	compilable	  [FE]  AssertionFailedError  	110	9	replace
178	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  costEvaluations);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  costEvaluations);	  double    criterion    =    Math.min(wm.length,    costEvaluations);    	compilable	  [FE]  AssertionFailedError  	110	9	replace
179	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  costEvaluations);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  costEvaluations);	  double    criterion    =    Math.min(wm.length,    costEvaluations);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	110	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  costEvaluations  +  1);	  double    criterion    =    Math.min(wm.length,    costEvaluations);    	compilable	  [FE]  AssertionFailedError  	110	9	replace
181	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  costEvaluations  +  1);	  double    criterion    =    Math.min(wm.length,    costEvaluations);    	compilable	  [FE]  AssertionFailedError  	110	9	replace
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length  /  1);	  double    criterion    =    Math.max(0,    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	10	9	replace
183	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  /  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length  /  1);	  double    criterion    =    Math.max(0,    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	10	9	replace
184	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  parameters.length  =  parameters.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  parameters.length  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  parameters.length  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters.length    =    parameters.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
185	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  criterion);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  criterion);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	49	None	replace
186	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  parameters);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  parameters);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  parameters);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	49	None	replace
187	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  cost,  parameters);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  cost,  parameters);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  cost,  parameters);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	49	None	replace
188	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  cost,  measurement);  [CE]  cannot  find  symbol  measurement  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  cost,  measurement);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  cost,  measurement);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  measurement	49	None	replace
189	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	102	None	add
190	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  Double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  Double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    Double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	102	None	add
191	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  int  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  int  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    int  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	102	None	add
192	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  double  criterion  =  0d  +  Math.sqrt(wm[1].getResidual());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  double  criterion  =  0d  +  Math.sqrt(wm[1].getResidual());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    double  criterion  =  0d  +  Math.sqrt(wm[1].getResidual());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	102	None	add
193	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  Math  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  Math  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    Math  criterion  =  0d  +  Math.sqrt(wm[0].getResidual());	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	102	None	add
194	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  colls  =  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	43	None	replace
195	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  double  criterion  =  0d  /  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  double  criterion  =  0d  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    double  criterion  =  0d  /  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
196	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  Double  criterion  =  0d  /  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  Double  criterion  =  0d  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    Double  criterion  =  0d  /  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
197	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  int  criterion  =  0d  /  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  int  criterion  =  0d  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    int  criterion  =  0d  /  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
198	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  criterion  =  0d  /  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  criterion  =  0d  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    criterion  =  0d  /  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
199	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  Math  criterion  =  0d  /  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  Math  criterion  =  0d  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    Math  criterion  =  0d  /  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
200	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  wm.getSize()  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  wm.getSize()  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem!=  null?  wm.getSize()  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    problem.getSize()    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
201	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  problem.getSize()  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  problem.getSize()  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem!=  null?  problem.getSize()  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    problem.getSize()    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
202	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  wm.getSize()  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  wm.getSize()  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem.getSize()!=  null?  wm.getSize()  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    problem.getSize()    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
203	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {	  int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  >  expected	120	None	replace
204	[BUG]  [BUGGY]  int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {	  int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  >  expected	120	None	replace
205	[BUG]  [BUGGY]  int  i  =  0;  i  <  measurements.length  +  1;  ++i)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  measurements.length  +  1;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  measurements.length  +  1;  ++i)  {	  int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  >  expected	120	None	replace
206	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [1];  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [1];  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [1];	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	87	None	replace
207	[BUG]  [BUGGY]  float  cols  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  float  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	113	None	replace
208	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  double  criterion  =  Math.max(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  double  criterion  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    double  criterion  =  Math.max(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	118	None	add
209	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  Double  criterion  =  Math.max(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  Double  criterion  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    Double  criterion  =  Math.max(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	118	None	add
210	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  int  criterion  =  Math.max(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  int  criterion  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    int  criterion  =  Math.max(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	118	None	add
211	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  Math  criterion  =  Math.max(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  Math  criterion  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    Math  criterion  =  Math.max(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	118	None	add
212	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  double  criterion  =  Math.max(wm.length,  3);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  double  criterion  =  Math.max(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    double  criterion  =  Math.max(wm.length,  3);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	118	None	add
213	[BUG]  [BUGGY]  Double  criterion  =  Math.max(0,  wm.length);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    double    criterion    =    Math.max(0,    wm.length);    	non-compiled	[CE]  incompatible  types	65	None	replace
214	[BUG]  [BUGGY]  Math  criterion  =  Math.min(wm.length,  cost);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    Math    criterion    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  incompatible  types	76	None	replace
215	[BUG]  [BUGGY]  int  criterion  =  0d;  criterion  =  0d;  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0d;  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0d;  criterion  =  0d;	  double    criterion    =    0d;    criterion    =    0d;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
216	[BUG]  [BUGGY]  Math.sqrt(wm.length);  [CE]  cannot  find  symbol  criterion  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.sqrt(wm.length);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  criterion	99	None	replace
217	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0;  Math.sqrt(wm.length);	  double    criterion    =    0d;    Math.sqrt(result);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
218	[BUG]  [BUGGY]  double  criterion  =  0;  Math.sqrt(wm.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  Math.sqrt(wm.length);	  double    criterion    =    0d;    Math.sqrt(result);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
219	[BUG]  [BUGGY]  double  criterion  =  0;  Math.sqrt(result);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  Math.sqrt(result);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  Math.sqrt(result);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  result	99	None	replace
220	[BUG]  [BUGGY]  double  result  =  0d;  Math.sqrt(result);  [CE]  cannot  find  symbol  criterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  result  =  0d;  Math.sqrt(result);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  result  =  0d;  Math.sqrt(result);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  criterion	99	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    issues[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
222	[BUG]  [BUGGY]  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    issues[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
223	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	48	None	replace
224	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  For(int  i  =  0;  i  <  parameters.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	For(int  i  =  0;  i  <  parameters.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	48	None	replace
225	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	For(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	48	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	Double  criterion  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    Double    criterion    =    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	59	9	replace
227	[BUG]  [BUGGY]  Double  criterion  =  Math.max(wm.length,  cost);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    Double    criterion    =    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	59	9	replace
228	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(variable);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(variable);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(variable);	  EstimationProblem    wm    =    problem.getStandardProblem(result);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
229	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(result,  cost);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(result,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(result,  cost);	  EstimationProblem    wm    =    problem.getStandardProblem(result);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  1);	  double    criterion    =    Math.min(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	108	9	replace
231	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  1);	  double    criterion    =    Math.min(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	108	9	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  3);	  double    criterion    =    Math.min(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	108	9	replace
233	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  3);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  3);	  double    criterion    =    Math.min(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	108	9	replace
234	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  criterion  =  Math.max(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  criterion  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    double  criterion  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	add
235	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  wm.length  =  Math.max(wm.length,  wm.length);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  wm.length  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    double  wm.length  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	94	None	add
236	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  Double  criterion  =  Math.max(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  Double  criterion  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    Double  criterion  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	add
237	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  wm  =  Math.max(wm.length,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  double  wm  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    double  wm  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	add
238	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wm.length  =  Math.max(wm.length,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wm.length  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    int  wm.length  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	94	None	add
239	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  double  criterion  =  Math.max(0,  wm.length  -  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  double  criterion  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    double  criterion  =  Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	add
240	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Double  criterion  =  Math.max(0,  wm.length  -  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Double  criterion  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    Double  criterion  =  Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	add
241	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Math  criterion  =  Math.max(0,  wm.length  -  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Math  criterion  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    Math  criterion  =  Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	add
242	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  int  wm.length  =  Math.max(0,  wm.length  -  1);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  int  wm.length  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    int  wm.length  =  Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  ';'  expected	5	None	add
243	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Math.max(0,  wm.length  -  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	add
244	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRsidual()  +  1;	  EstimationProblem    wm    =    problem.getRsidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	73	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  wm.length  -  1);	  double    criterion    =    Math.min(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	53	8	replace
246	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  wm.length  -  1);	  double    criterion    =    Math.min(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	53	8	replace
247	[BUG]  [BUGGY]  Integer  cols  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Integer  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Integer  cols  =  wm.length;	          int    cols    =    wm.length;    Integer    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	39	None	replace
248	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  double  criterion  =  Math.sqrt(wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  double  criterion  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    double  criterion  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	54	None	add
249	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  Double  criterion  =  Math.sqrt(wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  Double  criterion  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    Double  criterion  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	54	None	add
250	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  int  criterion  =  Math.sqrt(wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  int  criterion  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    int  criterion  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	54	None	add
251	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  Math  criterion  =  Math.sqrt(wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  Math  criterion  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    Math  criterion  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	54	None	add
252	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  int  wm.length  =  Math.sqrt(wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  int  wm.length  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    int  wm.length  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  ';'  expected	54	None	add
253	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  double  criterion  =  Math.min(wm.length,  costEvaluations);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  double  criterion  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    double  criterion  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	109	None	add
254	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  criterion  =  Math.min(wm.length,  costEvaluations);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  criterion  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    int  criterion  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	109	None	add
255	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  Double  criterion  =  Math.min(wm.length,  costEvaluations);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  Double  criterion  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    Double  criterion  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	109	None	add
256	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  Math  criterion  =  Math.min(wm.length,  costEvaluations);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  Math  criterion  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    Math  criterion  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	109	None	add
257	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  wm.length  =  Math.min(wm.length,  costEvaluations);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  wm.length  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    int  wm.length  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  ';'  expected	109	None	add
258	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm);	  double    criterion    =    Math.sqrt(result);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	106	None	replace
259	[BUG]  [BUGGY]  double  result  =  Math.sqrt(wm.length);  [CE]  cannot  find  symbol  criterion  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  result  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  result  =  Math.sqrt(wm.length);	  double    criterion    =    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  criterion	106	None	replace
260	[BUG]  [BUGGY]  double  criterion  =  0.0;  double  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  double  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    double  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	115	None	add
261	[BUG]  [BUGGY]  double  criterion  =  0.0;  Double  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  Double  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    Double  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	115	None	add
262	[BUG]  [BUGGY]  double  criterion  =  0.0;  int  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  int  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    int  criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	115	None	add
263	[BUG]  [BUGGY]  double  criterion  =  0.0;  criterion  =  0.0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  criterion  =  0.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    criterion  =  0.0;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	115	None	add
264	[BUG]  [BUGGY]  double  criterion  =  0.0;  Math.sqrt(wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	115	None	add
265	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  criterion);  [CE]  variable  criterion  might  not  have  been  initialized  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  criterion);	  double    criterion    =    Math.min(wm.length,    factor);    	non-compiled	[CE]  variable  criterion  might  not  have  been  initialized	123	None	replace
266	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  result);  [CE]  cannot  find  symbol  result  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  result);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  result);	  double    criterion    =    Math.min(wm.length,    factor);    	non-compiled	[CE]  cannot  find  symbol  result	123	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	int  criterion  =  2;	  double    criterion    =    1;    int    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	80	4	replace
268	[BUG]  [BUGGY]  int  criterion  =  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  2;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  2;	  double    criterion    =    1;    int    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	80	4	replace
269	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  cost);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(null,  cost);	  EstimationProblem    wm    =    problem.getRMS(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	88	None	replace
270	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  null);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(null,  null);	  EstimationProblem    wm    =    problem.getRMS(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	88	None	replace
271	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  /  2;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  /  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  /  2;	  EstimationProblem    wm    =    problem.getMeasurements()    *    2;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
272	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  2  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  2  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  *  2  +  1;	  EstimationProblem    wm    =    problem.getMeasurements()    *    2;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
273	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  parameters.length;  int  cms  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  parameters.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    cms    =    parameters.length;    int  cols  =  parameters.length;  int  cms  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	add
274	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  wm.length;  int  cms  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  wm.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    cms    =    parameters.length;    int  cols  =  wm.length;  int  cms  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	add
275	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  variables.length;  int  cms  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  variables.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    cms    =    parameters.length;    int  cols  =  variables.length;  int  cms  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	add
276	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  measurements.length;  int  cms  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  int  cols  =  measurements.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    cms    =    parameters.length;    int  cols  =  measurements.length;  int  cms  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	add
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  measurements.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
278	[BUG]  [BUGGY]  int  cols  =  wm.length;  Int  cols  =  parameters.length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  Int  cols  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  Int  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
279	[BUG]  [BUGGY]  int  cols  =  wm.length;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  Integer  cols  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	124	None	replace
280	[BUG]  [BUGGY]  Int  cols  =  parameters.length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Int  cols  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Int  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
281	[BUG]  [BUGGY]  Math.max(0,  wm.length);  [CE]  cannot  find  symbol  criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol  criterion	69	None	replace
282	[BUG]  [BUGGY]  max(0,  wm.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length  +  1);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
284	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length  +  1);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length  +  1);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
285	[BUG]  [BUGGY]  int  criterion  =  0d;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0d;	  double    criterion    =    0d;    int    criterion    =    0d;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
286	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm,  problem.getSizes();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  wm,  problem.getSizes();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  wm,  problem.getSizes();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  ';'  expected	32	None	replace
287	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  double  criterion  =  Math.min(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  double  criterion  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    double  criterion  =  Math.min(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	107	None	add
288	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  Double  criterion  =  Math.min(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  Double  criterion  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    Double  criterion  =  Math.min(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	107	None	add
289	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  int  criterion  =  Math.min(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  int  criterion  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    int  criterion  =  Math.min(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	107	None	add
290	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  Math  criterion  =  Math.min(wm.length,  2);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  Math  criterion  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    Math  criterion  =  Math.min(wm.length,  2);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	107	None	add
291	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  double  criterion  =  Math.min(wm.length,  3);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  double  criterion  =  Math.min(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    double  criterion  =  Math.min(wm.length,  3);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	107	None	add
292	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  parameters  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	41	None	replace
293	[BUG]  [BUGGY]  Double  criterion  =  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  1;	  double    criterion    =    1;    Double    criterion    =    1;    	non-compiled	[CE]  incompatible  types	81	None	replace
294	[BUG]  [BUGGY]  SizedMeasurement  criterion  =  new  SizedMeasurement(wm.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement  criterion  =  new  SizedMeasurement(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement  criterion  =  new  SizedMeasurement(wm.length);	  double    criterion    =    1;    Double    criterion    =    1;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
295	[BUG]  [BUGGY]  SizedMeasurement  criterion  =  new  SizedMeasurement[wm.length];  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement  criterion  =  new  SizedMeasurement[wm.length];  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement  criterion  =  new  SizedMeasurement[wm.length];	  double    criterion    =    1;    Double    criterion    =    1;    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
296	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	Double  criterion  =  0d;	  double    criterion    =    0d;    Double    criterion    =    0d;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
297	[BUG]  [BUGGY]  Double  criterion  =  0d;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Double  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Double  criterion  =  0d;	  double    criterion    =    0d;    Double    criterion    =    0d;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
298	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  double  criterion  =  0d  *  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  double  criterion  =  0d  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    double  criterion  =  0d  *  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	add
299	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  Double  criterion  =  0d  *  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  Double  criterion  =  0d  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    Double  criterion  =  0d  *  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	add
300	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  int  criterion  =  0d  *  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  int  criterion  =  0d  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    int  criterion  =  0d  *  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	add
301	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  criterion  =  0d  *  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  criterion  =  0d  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    criterion  =  0d  *  wm.length;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	add
302	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  Math.min(wm.length,  0d);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  Math.min(wm.length,  0d);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    int  wm.length  =  Math.min(wm.length,  0d);	  	non-compiled	[CE]  ';'  expected	28	None	add
303	[BUG]  [BUGGY]  int  criterion  =  0L;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0L;	  double    criterion    =    0L;    int    criterion    =    0L;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
304	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem()  *  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem()  *  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem()  *  1;	  EstimationProblem    wm    =    problem.getStandardProblem()    +    1;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
305	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(wm);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(wm);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(wm);	  EstimationProblem    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
306	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(variable);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(variable);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(variable);	  EstimationProblem    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
307	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(remaining);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(remaining);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(remaining);	  EstimationProblem    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	117	None	replace
308	[BUG]  [BUGGY]  Math.max(wm.length,  cost);  [CE]  cannot  find  symbol  criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.max(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.max(wm.length,  cost);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	62	None	replace
309	[BUG]  [BUGGY]  Math.max(wm.length,  0);  [CE]  cannot  find  symbol  criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.max(wm.length,  0);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	62	None	replace
310	[BUG]  [BUGGY]  Math.min(wm.length,  wm.length);  [CE]  cannot  find  symbol  criterion  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.min(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	62	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(1,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(1,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Double    criterion    =    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	66	9	replace
312	[BUG]  [BUGGY]  double  criterion  =  Math.max(1,  wm.length);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(1,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(1,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Double    criterion    =    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	66	9	replace
313	[BUG]  [BUGGY]  int  cols  =  dimensions.length;  [CE]  cannot  find  symbol  dimensions  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  dimensions.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  dimensions.length;	          int    cols    =    parameters.length;    int    cols    =    measurements.length;    	non-compiled	[CE]  cannot  find  symbol  dimensions	126	None	replace
314	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  cost);  int  wm.length  =  Math.max(wm.length,  0);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  cost);  int  wm.length  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  cost);  int  wm.length  =  Math.max(wm.length,  0);	  double    criterion    =    Math.min(wm.length,    cost);    int    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	77	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  wm.length  +  1);	  double    criterion    =    Math.min(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	53	9	replace
316	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  wm.length  +  1);	  double    criterion    =    Math.min(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	53	9	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	9	replace
318	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  1;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  criterion  =  1;	  double    criterion    =    1;    criterion    =    1;    	compilable	  [FE]  AssertionFailedError  	82	9	replace
319	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem()  +  2;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem()  +  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem()  +  2;	  EstimationProblem    wm    =    problem.getStandardProblem()    +    1;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
320	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  int  wm.length  =  Math.max(wm.length,  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2);  int  wm.length  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    2);    int  wm.length  =  Math.max(wm.length,  2);	  	non-compiled	[CE]  ';'  expected	118	None	add
321	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0].getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0].getResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0].getResidual();	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	87	None	replace
322	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.value);  [CE]  cannot  find  symbol  value  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.value);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.value);	  double    criterion    =    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  value	106	None	replace
323	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  wm.length  +  1;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
324	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  1;  int  wm.length  =  wm.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
325	[BUG]  [BUGGY]  int  criterion  =  0;  Double  criterion  =  0d;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  Double  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  Double  criterion  =  0d;	  double    criterion    =    0d;    Double    criterion    =    0d;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	23	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	int  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
327	[BUG]  [BUGGY]  int  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  Math.max(0,  wm.length);  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
328	[BUG]  [BUGGY]  int  criterion  =  Math.min(wm.length,  cost);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  Math.min(wm.length,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  Math.min(wm.length,  cost);	  double    criterion    =    Math.min(wm.length,    cost);    double    criterion    =    Math.min(wm.length,    Cost);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getWeight());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  +  Math.sqrt(wm[0].getWeight());	  double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    	compilable	  [FE]  AssertionFailedError  	103	9	replace
330	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getWeight());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm[0].getWeight());  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  Math.sqrt(wm[0].getWeight());	  double    criterion    =    0d    +    Math.sqrt(wm[0].getResidual());    	compilable	  [FE]  AssertionFailedError  	103	9	replace
331	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0;  criterion  =  0L;	  double    criterion    =    0L;    criterion    =    0L;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
332	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  0L;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0L;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  criterion  =  0L;	  double    criterion    =    0L;    criterion    =    0L;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
333	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    int  wm.length  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	28	None	add
334	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  null  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  null  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem!=  null?  null  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    null    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
335	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  *  wm.length  /  wm.length;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
336	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length  /  wm.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length  /  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  *  wm.length  /  wm.length;	  double    criterion    =    0d    *    wm.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
337	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  double  wm  =  Math.max(0,  wm.length  +  1);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  +  1);  double  wm  =  Math.max(0,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    +    1);    double  wm  =  Math.max(0,  wm.length  +  1);	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	9	None	add
338	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    issues[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	111	None	replace
339	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1  +  cost;  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  1  +  cost;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  1  +  cost;	  int    cols    =    wm.length    -    1;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  /  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.sqrt(wm.length  /  wm.length);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
341	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length  /  wm.length);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  /  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length  /  wm.length);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.sqrt(wm.length  +  2);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
343	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length  +  2);	  double    criterion    =    Math.sqrt(wm.length);    	compilable	  [FE]  AssertionFailedError  	55	9	replace
344	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  4;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  4;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  *  4;	  EstimationProblem    wm    =    problem.getMeasurements()    *    2;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
345	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  problems[i].getResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  problems[i].getResidual();	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	70	None	replace
346	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  +  1;  Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
347	[BUG]  [BUGGY]  Int  cols  =  wm.length;  Int  cols  =  wm.length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Int  cols  =  wm.length;  Int  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Int  cols  =  wm.length;  Int  cols  =  wm.length;	          int    cols    =    wm.length;    Int    cols    =    wm.length;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
348	[BUG]  [BUGGY]  double  criterion  =  0d  /  wm.length;  int  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  /  wm.length;  int  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    /    wm.length;    int  wm.length  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  ';'  expected	30	None	add
349	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    int    wm.length    =    Math.max(0,    wm.length);    	non-compiled	[CE]  ';'  expected	67	None	replace
350	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length);  int  wm.length  =  Math.max(0,  wm.length  -  1);	  double    criterion    =    Math.max(0,    wm.length);    int    wm.length    =    Math.max(0,    wm.length);    	non-compiled	[CE]  ';'  expected	67	None	replace
351	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  parameters.length  =  wm.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length;  int  parameters.length  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length;  int  parameters.length  =  wm.length;	          int    cols    =    parameters.length;    int    parameters.length    =    parameters.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
352	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  parameters.length  =  parameters.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  parameters.length  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  -  1;  int  parameters.length  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters.length    =    parameters.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
353	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   "));    }    	non-compiled	[CE]  >  expected	93	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  wm.length  +  1);	  double    criterion    =    Math.max(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	95	9	replace
355	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  wm.length  +  1);	  double    criterion    =    Math.max(wm.length,    wm.length);    	compilable	  [FE]  AssertionFailedError  	95	9	replace
356	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  int  wm.length  =  Math.max(wm.length,  0);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  int  wm.length  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    0);    int  wm.length  =  Math.max(wm.length,  0);	  	non-compiled	[CE]  ';'  expected	50	None	add
357	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d;  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d;  Math.sqrt(wm.length);	  double    criterion    =    0d;    Math.sqrt(result);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
358	[BUG]  [BUGGY]  double  criterion  =  0d;  Math.sqrt(wm.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d;  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d;  Math.sqrt(wm.length);	  double    criterion    =    0d;    Math.sqrt(result);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	1	replace
359	[BUG]  [BUGGY]  double  criterion  =  0d;  Math.sqrt(variables);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d;  Math.sqrt(variables);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d;  Math.sqrt(variables);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  	99	None	replace
360	[BUG]  [BUGGY]  double  criterion  =  0d;  Math.sqrt(wm.value);  [CE]  cannot  find  symbol  value  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d;  Math.sqrt(wm.value);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d;  Math.sqrt(wm.value);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  value	99	None	replace
361	[BUG]  [BUGGY]  double  criterion  =  0;  int  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  int  criterion  =  0;	  double    criterion    =    0L;    int    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length  *  1);	  double    criterion    =    Math.max(0,    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	10	9	replace
363	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  *  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length  *  1);	  double    criterion    =    Math.max(0,    wm.length    +    1);    	compilable	  [FE]  AssertionFailedError  	10	9	replace
364	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  cost;  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  2  +  cost;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  2  +  cost;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
365	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  parameters  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length;  int  parameters  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length;  int  parameters  =  wm.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	41	None	replace
366	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  cms  =  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  -  1;  int  cms  =  parameters.length;	          int    cols    =    parameters.length;    int    cms    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	45	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  0);  Math.max(wm.length,  0);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	62	9	replace
368	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Math.max(wm.length,  0);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  0);  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  0);  Math.max(wm.length,  0);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	62	9	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.min(wm.length,  wm.length);  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	62	9	replace
370	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Math.max(wm.length,  wm.length);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  wm.length);  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	compilable	  [FE]  AssertionFailedError  	62	9	replace
371	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  costEvaluations);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null,  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getRMS(null,  costEvaluations);	  EstimationProblem    wm    =    problem.getRMS(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	88	None	replace
372	[BUG]  [BUGGY]  int  wm.length  =  Math.max(wm.length,  wm.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    int    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	61	None	replace
373	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  float  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  +  1;  float  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  +  1;  float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
374	[BUG]  [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations);  float  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  Math.min(wm.length,  costEvaluations);  float  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  Math.min(wm.length,  costEvaluations);  float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
375	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm!=  null?  null  :  wm.getSizes();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  wm!=  null?  null  :  wm.getSizes();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  wm!=  null?  null  :  wm.getSizes();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
376	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm!=  null?  new  SizedMeasurement[0]  :  problem.getSizes();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  wm!=  null?  new  SizedMeasurement[0]  :  problem.getSizes();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  wm!=  null?  new  SizedMeasurement[0]  :  problem.getSizes();	  SizedMeasurement[]    measurements    =    wm.getSizes();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
377	[BUG]  [BUGGY]  int  criterion  =  0;  int  criterion  =  0d;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  int  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  int  criterion  =  0d;	  double    criterion    =    0d;    double    criterion    =    0d;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	22	None	replace
378	[BUG]  [BUGGY]  int  criterion  =  0;  int  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  int  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  int  criterion  =  0;	  double    criterion    =    0d;    double    criterion    =    0d;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	22	None	replace
379	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  wm  =  Math.min(wm.length,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  double  wm  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    double  wm  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	add
380	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  int  wmLength  =  Math.min(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  wm.length);  int  wmLength  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    wm.length);    int  wmLength  =  Math.min(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	52	None	add
381	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  double  wm  =  Math.sqrt(wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length);  double  wm  =  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.sqrt(wm.length);    double  wm  =  Math.sqrt(wm.length);	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	54	None	add
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2  +  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  2  +  cost);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
383	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  2  +  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  2  +  cost);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  2  +  cost);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
384	[BUG]  [BUGGY]  int  cols  =  wm.length  *  1;  [CE]  cannot  find  symbol  criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  *  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  *  1;	  int    cols    =    wm.length    +    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	3	None	replace
385	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  1;  int  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  1;  int  wm.length;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	105	None	replace
386	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wmLength  =  Math.max(wm.length,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wmLength  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    int  wmLength  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	add
387	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  problems.getSize()  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem!=  null?  problems.getSize()  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem!=  null?  problems.getSize()  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    problem.getSize()    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
388	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  int  wm.length  =  Math.min(wm.length,  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  2);  int  wm.length  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    2);    int  wm.length  =  Math.min(wm.length,  2);	  	non-compiled	[CE]  ';'  expected	107	None	add
389	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  metrics.length;  ++i)  {  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  For(int  i  =  0;  i  <  metrics.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	For(int  i  =  0;  i  <  metrics.length;  ++i)  {	  For(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	48	None	replace
390	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  Integer  cols  =  parameters.length;  int  cms  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  cms  =  parameters.length;  Integer  cols  =  parameters.length;  int  cms  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    cms    =    parameters.length;    Integer  cols  =  parameters.length;  int  cms  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	add
391	[BUG]  [BUGGY]  int  criterion  =  0;  Math  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  Math  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  Math  criterion  =  0;	  double    criterion    =    1;    Math    criterion    =    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	83	None	replace
392	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0;  criterion  =  0d;	  double    criterion    =    0d;    criterion    =    0d;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
393	[BUG]  [BUGGY]  double  criterion  =  0;  criterion  =  0d;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  criterion  =  0d;	  double    criterion    =    0d;    criterion    =    0d;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	25	1	replace
394	[BUG]  [BUGGY]  int  criterion  =  0;  criterion  =  0d;  [CE]  possible  loss  of  precision  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  criterion  =  0d;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  criterion  =  0d;	  double    criterion    =    0d;    criterion    =    0d;    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
395	[BUG]  [BUGGY]  int  criterion  =  0;  double  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  criterion  =  0;  double  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  criterion  =  0;  double  criterion  =  0;	  double    criterion    =    0L;    double    criterion    =    0L;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
396	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  int  wm.length  =  Math.max(0,  wm.length  -  2);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  2);  int  wm.length  =  Math.max(0,  wm.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    2);    int  wm.length  =  Math.max(0,  wm.length  -  2);	  	non-compiled	[CE]  ';'  expected	7	None	add
397	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  costEvaluations);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(this,  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(this,  costEvaluations);	  EstimationProblem    wm    =    problem.getStandardProblem(this);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	92	None	replace
398	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  int  wmLength  =  Math.max(0,  wm.length  -  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length  -  1);  int  wmLength  =  Math.max(0,  wm.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(0,    wm.length    -    1);    int  wmLength  =  Math.max(0,  wm.length  -  1);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	5	None	add
399	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  costEvaluations);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null,  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(null,  costEvaluations);	  EstimationProblem    wm    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
400	[BUG]  [BUGGY]  Math  criterion  =  Math.max(wm.length,  0);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.max(wm.length,  0);	  double    criterion    =    Math.max(wm.length,    cost);    Math    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  incompatible  types	96	None	replace
401	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  Integer  cols  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  Integer  cols  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    Integer  cols  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	42	None	add
402	[BUG]  [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wmLength  =  Math.min(0,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(0,  wm.length);  int  wmLength  =  Math.min(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(0,    wm.length);    int  wmLength  =  Math.min(0,  wm.length);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	add
403	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	43	None	replace
404	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  colls  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  parameters.length;  int  colls  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  parameters.length;  int  colls  =  wm.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	43	None	replace
405	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2  +  costEvaluations;  [CE]  cannot  find  symbol  criterion  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  2  +  costEvaluations;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  2  +  costEvaluations;	  int    cols    =    wm.length    -    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	2	None	replace
406	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  factor;  }	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
407	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  0.0;  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  0.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  0.0;  }	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
408	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result;  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(result  ==  null)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result;  }	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
409	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  task.getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  task.getMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  task.getMeasurements();	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
410	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  factor);  [CE]  cannot  find  symbol  factor  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  factor);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  factor);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  factor	49	None	replace
411	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  coefficient);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  coefficient	49	None	replace
412	[BUG]  [BUGGY]  n  =  Math.min(wm.length,  wm.length);  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  n  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	n  =  Math.min(wm.length,  wm.length);	  double    criterion    =    Math.min(wm.length,    cost);    Math    criterion    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  n	76	None	replace
413	[BUG]  [BUGGY]  if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	if(wm!=  null)  {  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  10.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
415	[BUG]  [BUGGY]  double  criterion  =  10.0;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  10.0;	  double    criterion    =    0.0;    	compilable	  [FE]  AssertionFailedError  	116	9	replace
416	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  parameters.length);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.length,  parameters.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.length,  parameters.length);	  double    criterion    =    Math.sqrt(wm.length,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	49	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  +  wm.length;	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	9	replace
418	[BUG]  [BUGGY]  double  criterion  =  0d  +  wm.length;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  wm.length;	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	9	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  0d  +  Math.sqrt(wm.length);	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	9	replace
420	[BUG]  [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm.length);  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  +  Math.sqrt(wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0d  +  Math.sqrt(wm.length);	  double    criterion    =    0d;    double    criterion    =    0d;    	compilable	  [FE]  AssertionFailedError  	22	9	replace
421	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	70	None	replace
422	[BUG]  [BUGGY]  int  cols  =  measurements.length;  int  parameters  =  parameters.length;  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  measurements.length;  int  parameters  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  measurements.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	41	None	replace
423	[BUG]  [BUGGY]  int  cols  =  dimensions.length;  int  parameters  =  parameters.length;  [CE]  cannot  find  symbol  dimensions  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  dimensions.length;  int  parameters  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  dimensions.length;  int  parameters  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  dimensions	41	None	replace
424	[BUG]  [BUGGY]  int  cols  =  measurements.length  -  1;  [CE]  cannot  find  symbol  criterion  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  measurements.length  -  1;	  int    cols    =    parameters.length    -    1;    	non-compiled	[CE]  cannot  find  symbol  criterion	34	None	replace
425	[BUG]  [BUGGY]  int  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.min(wm.length,  wm.length);	  double    criterion    =    Math.min(wm.length,    cost);    int    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	77	None	replace
426	[BUG]  [BUGGY]  int  wm.length  =  Math.max(wm.length,  0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.max(wm.length,  0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.max(wm.length,  0);	  double    criterion    =    Math.min(wm.length,    cost);    int    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	77	None	replace
427	[BUG]  [BUGGY]  int  wm.length  =  Math.min(wm.length,  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.min(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.min(wm.length,  2);	  double    criterion    =    Math.min(wm.length,    cost);    int    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	77	None	replace
428	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  parameters.getMeasurements();	  SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
429	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  measurements.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  3;	  double    criterion    =    1;    double    criterion    =    2;    	compilable	  [FE]  AssertionFailedError  	122	9	replace
431	[BUG]  [BUGGY]  double  criterion  =  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  3;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  3;	  double    criterion    =    1;    double    criterion    =    2;    	compilable	  [FE]  AssertionFailedError  	122	9	replace
432	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  wm[i].getWeight()  *  factor  *  factor;  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  wm[i].getWeight()  *  factor  *  factor;  }  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  cost  +=  wm[i].getWeight()  *  factor  *  factor;  }	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
433	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *	  	non-compiled	[CE]  '.class'  expected	115	None	add
434	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  wm[i].getResidual();  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  wm[i].getResidual();	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
435	[BUG]  [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  factor  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0.0;  if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  factor  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0.0;    if(wm.length  >  0)  {  double  criterion  =  0.0;  }  else  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  wm[i]  =  problem.getResidual();  criterion  +=  wm[i].getWeight()  *  factor  *  factor	  	non-compiled	[CE]  ';'  expected	115	None	add
436	[BUG]  [BUGGY]  int  wm  =  Math.max(0,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    double    wm    =    Math.max(0,    wm.length);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
437	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0],  cost);	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  ';'  expected	87	None	replace
438	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0].getStandardErrors();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [0].getStandardErrors();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [0].getStandardErrors();	  EstimationProblem    wm    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	87	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(1,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(0,  wm.length);  Math.max(1,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
440	[BUG]  [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(1,  wm.length);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(0,  wm.length);  Math.max(1,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(0,  wm.length);  Math.max(1,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    Math.max(0,    wm.length);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
441	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements()!=  null?  null  :  wm.getSize();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  SizedMeasurement[]  measurements  =  problem.getMeasurements()!=  null?  null  :  wm.getSize();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	SizedMeasurement[]  measurements  =  problem.getMeasurements()!=  null?  null  :  wm.getSize();	  SizedMeasurement[]    measurements    =    wm!=    null?    null    :    wm.getSize();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
442	[BUG]  [BUGGY]  int  wm.length  =  Math.max(wm.length,  2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  wm.length  =  Math.max(wm.length,  2);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  wm.length  =  Math.max(wm.length,  2);	  double    criterion    =    Math.max(wm.length,    cost);    int    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	61	None	replace
443	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  float  cols  =  wm.length;  [CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  1;  float  cols  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  1;  float  cols  =  wm.length;	          int    cols    =    wm.length;    float    cols    =    wm.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
444	[BUG]  [BUGGY]  int  colls  =  wm.length;  [CE]  cannot  find  symbol  criterion  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  colls  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  colls  =  wm.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol  criterion	43	None	replace
445	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2  +  cost;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  2  +  cost;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  2  +  cost;	  int    cols    =    wm.length    -    2;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
446	[BUG]  [BUGGY]  double  wm  =  Math.max(wm.length,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm  =  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    double    wm.length    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	60	None	replace
447	[BUG]  [BUGGY]  int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	86	None	replace
448	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  2;  int  wm.length  =  wm.length;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
449	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  wm.length  -  1;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
450	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length;  int  wm.length  =  wm.length  -  2;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length;  int  wm.length  =  wm.length  -  2;	          int    cols    =    wm.length;    int    wm.length    =    wm.length;    	non-compiled	[CE]  ';'  expected	38	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	double  criterion  =  Math.max(wm.length,  3);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
452	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  3);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.max(wm.length,  3);	  double    criterion    =    Math.max(wm.length,    2);    	compilable	  [FE]  AssertionFailedError  	119	9	replace
453	[BUG]  [BUGGY]  double  wm.length  =  Math.min(wm.length,  wm.length);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm.length  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm.length  =  Math.min(wm.length,  wm.length);	  double    criterion    =    Math.min(wm.length,    cost);    double    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  ';'  expected	90	None	replace
454	[BUG]  [BUGGY]  double  wm  =  Math.min(wm.length,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  wm  =  Math.min(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  wm  =  Math.min(wm.length,  wm.length);	  double    criterion    =    Math.min(wm.length,    cost);    double    wm.length    =    Math.min(wm.length,    cost);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
455	[BUG]  [BUGGY]  double  criterion  =  Math.sqrt(wm.result);  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.sqrt(wm.result);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.sqrt(wm.result);	  double    criterion    =    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  result	106	None	replace
456	[BUG]  [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wm  =  Math.max(wm.length,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.max(wm.length,  wm.length);  int  wm  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.max(wm.length,    wm.length);    int  wm  =  Math.max(wm.length,  wm.length);	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	add
457	[BUG]  [BUGGY]  Math  criterion  =  Math.max(wm.length,  wm.length);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math  criterion  =  Math.max(wm.length,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math  criterion  =  Math.max(wm.length,  wm.length);	  double    criterion    =    Math.max(wm.length,    cost);    Math    criterion    =    Math.max(wm.length,    cost);    	non-compiled	[CE]  incompatible  types	96	None	replace
458	[BUG]  [BUGGY]  int  cols  =  0;  int  parameters.length  =  parameters.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  0;  int  parameters.length  =  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  0;  int  parameters.length  =  parameters.length;	          int    cols    =    parameters.length;    int    parameters.length    =    parameters.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
459	[BUG]  [BUGGY]  int  cols  =  wm.length  /  2  +  parameters.length;  [CE]  cannot  find  symbol  criterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  /  2  +  parameters.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  /  2  +  parameters.length;	  int    cols    =    wm.length    /    2;    	non-compiled	[CE]  cannot  find  symbol  criterion	4	None	replace
460	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRsidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRsidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRsidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " "));  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   "));    }    	non-compiled	[CE]  	93	None	replace
461	[BUG]  [BUGGY]  int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  1;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	72	None	replace
462	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  i  =  Math.min(wm.length,  costEvaluations);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  costEvaluations);  int  i  =  Math.min(wm.length,  costEvaluations);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    Math.min(wm.length,    costEvaluations);    int  i  =  Math.min(wm.length,  costEvaluations);	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	109	None	add
463	[BUG]  [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  i  =  0;  i  <  parameters.length;  ++i)  {  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  i  =  0;  i  <  parameters.length;  ++i)  {	  int    i    =    0;    i    <    measurements.length;    ++i)    {    	non-compiled	[CE]  >  expected	120	None	replace
464	[BUG]  [BUGGY]  Math.max(wm.length,  0.0);  [CE]  cannot  find  symbol  criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Math.max(wm.length,  0.0);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Math.max(wm.length,  0.0);	  double    criterion    =    Math.max(wm.length,    cost);    Math.max(wm.length,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	62	None	replace
465	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  int  cols  =  wm.length  -  2;  int  wm.length;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	int  cols  =  wm.length  -  2;  int  wm.length;	          int    cols    =    wm.length;    int    wm.length;    	non-compiled	[CE]  ';'  expected	105	None	replace
466	[BUG]  [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	EstimationProblem  problem  =  parameters[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
467	[BUG]  [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  0d  *  wm.length;  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0d  *  wm.length;  int  wm.length  =  0d  *  wm.length;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double    criterion    =    0d    *    wm.length;    int  wm.length  =  0d  *  wm.length;	  	non-compiled	[CE]  ';'  expected	28	None	add
468	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  reciterion);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  reciterion);	  double    criterion    =    Math.min(wm.length,    factor);    	non-compiled	[CE]  cannot  find  symbol  reciterion	123	None	replace
469	[BUG]  [BUGGY]  double  criterion  =  Math.min(wm.length,  problem.resid);  [CE]  cannot  find  symbol  resid  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  Math.min(wm.length,  problem.resid);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  Math.min(wm.length,  problem.resid);	  double    criterion    =    Math.min(wm.length,    factor);    	non-compiled	[CE]  cannot  find  symbol  resid	123	None	replace
470	[BUG]  [BUGGY]  Integer  wm.length  =  Math.max(0,  wm.length);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  Integer  wm.length  =  Math.max(0,  wm.length);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	Integer  wm.length  =  Math.max(0,  wm.length);	  double    criterion    =    Math.max(0,    wm.length);    int    wm.length    =    Math.max(0,    wm.length);    	non-compiled	[CE]  ';'  expected	67	None	replace
471	[BUG]  [BUGGY]  double  criterion  =  0,  criterion  =  0;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0,  criterion  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0,  criterion  =  0;	  double    criterion    =    1;    criterion    =    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	82	None	replace
472	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  issues[i].getResidual();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getResidual();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
473	[BUG]  [BUGGY]  double  criterion  =  0;  Math.sqrt(variable);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();      [BUGGY]  double  criterion  =  0;  Math.sqrt(variable);  [BUGGY]      for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	double  criterion  =  0;  Math.sqrt(variable);	  double    criterion    =    0d;    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  	99	None	replace
