bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
2	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  index;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
4	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  index;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
5	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColsCount()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  +  1;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
6	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColsCount()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  -  1;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
7	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColsCount()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  *  factor;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
8	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters.length  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  1;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
9	[BUG]  [BUGGY]  int  cols  =  wm.length;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
10	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters.length  -  2;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  2;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
11	[BUG]  [BUGGY]  int  cols  =  factor.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  factor.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.length;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
12	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters[i].getColumnCount()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getColumnCount()  -  1;	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
13	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  measurements[i].getColumnCount();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getColumnCount();	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
14	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
15	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int  index  =  0;  j  <  parameters.length;  ++j)  {	  	non-compiled	[CE]  >  expected	8	None	add
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    For(int  j  =  0;  j  <  parameters.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int  j  =  0;  j  <  parameters.length;  ++j)  {	  	non-compiled	[CE]  >  expected	8	None	add
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	1	replace
22	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    int  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	13	None	add
23	[BUG]  [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  Integer  cols  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    Integer  cols  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	13	None	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
25	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    int  rows  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
27	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    int  columns  =  parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
28	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnSize()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  +  1;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
29	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnSize()  +  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  +  factor;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
30	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  *  factor;	      int    cols    =    wm.getColumnSize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
31	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    For(int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    int  index  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  >  expected	6	None	add
34	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  columns;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
35	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  >  expected	6	None	add
36	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnIndex()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  +  1;	      int    cols    =    wm.getColumnIndex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
37	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnIndex()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  -  1;	      int    cols    =    wm.getColumnIndex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
38	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnsCount()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  +  1;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
39	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnsCount()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  *  factor;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
40	[BUG]  [BUGGY]  int  cols  =  wm.getRowsCount();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getRowsCount();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowsCount();	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
41	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnCount()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  +  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
42	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnCount()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  *  factor;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
43	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnCount()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  -  1;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
44	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols();  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  measurements[i].getCols();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getCols();	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
45	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getCols()  -  1;	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
46	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getCols()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  +  1;	      int    cols    =    wm.getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
47	[BUG]  [BUGGY]  int  cols  =  wm.cols();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.cols();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.cols();	      int    cols    =    wm.getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
48	[BUG]  [BUGGY]  int  cols  =  wm.getRows();  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getRows();  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRows();	      int    cols    =    wm.getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
49	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  for(int  j  =  0;  j  <  parameters.length);  ++j)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  for(int  j  =  0;  j  <  parameters.length);  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++j)    {    for(int  j  =  0;  j  <  parameters.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
51	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getCols()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  *  factor;	      int    cols    =    wm.getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
52	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getCols()  +  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  +  factor;	      int    cols    =    wm.getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
53	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters[i].getColumnCount()  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getColumnCount()  +  1;	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  metrics.length;  ++j)  {  [CE]  cannot  find  symbol  metrics  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  metrics.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  metrics.length;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  metrics	7	None	replace
55	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnIndex()  *  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  *  factor;	      int    cols    =    wm.getColumnIndex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
56	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  parameters.length  +  1;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  +  1;	      int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
57	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColsCount()  +  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  +  factor;	      int    cols    =    wm.getColsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
58	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  rows;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
59	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows);  ++j)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  for(int  j  =  0;  j  <  rows);  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    rows;    ++j)    {    for(int  j  =  0;  j  <  rows);  ++j)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
60	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnCount()  +  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  +  factor;	      int    cols    =    wm.getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
61	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  int  cols  =  wm.getColumnsCount()  +  factor;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  +  factor;	      int    cols    =    wm.getColumnsCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
62	[BUG]  [BUGGY]  for(int  j  =  0,  j  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]  for(int  j  =  0,  j  <  parameters.length;  ++j)  {  [BUGGY]    jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
63	[BUG]  [BUGGY]      int  cols  =  parameters.length;  Int  cols  =  parameters.length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  Int  cols  =  parameters.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    Int  cols  =  parameters.length;	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
64	[BUG]  [BUGGY]      int  cols  =  parameters.length;  int  cols  =  variables.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());    [BUGGY]      int  cols  =  parameters.length;  int  cols  =  variables.length;  [BUGGY]    for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	        int    cols    =    parameters.length;    int  cols  =  variables.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	13	None	add
