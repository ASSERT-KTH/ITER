bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getCols()  -  1;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
2	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
3	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
4	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
5	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getCols()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getCols()  +  1;	  int    cols    =    measurements[i].getCols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
6	[BUG]  [BUGGY]  int  cols  =  wm.cols()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.cols()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.cols()  +  1;	  int    cols    =    wm.cols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
7	[BUG]  [BUGGY]  int  cols  =  wm.cols()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.cols()  *  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.cols()  *  factor;	  int    cols    =    wm.cols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
8	[BUG]  [BUGGY]  int  cols  =  wm.cols()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.cols()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.cols()  -  1;	  int    cols    =    wm.cols();    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
9	[BUG]  [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  cols  =  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
10	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	For(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	49	None	replace
11	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  measurements.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
12	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  measurements.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
13	[BUG]  [BUGGY]  int  cols  =  wm.getRowCount();  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRowCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowCount();	  int    cols    =    wm.getColumnCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
14	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
15	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  index  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  >  expected	20	None	add
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  For(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  For(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    For(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  >  expected	20	None	add
18	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  -  1;	  int    cols    =    wm.getColumnIndex()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
19	[BUG]  [BUGGY]  int  cols  =  wm.getRowIndex();  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRowIndex();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowIndex();	  int    cols    =    wm.getColumnIndex()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    For(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  index  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  index  =  0;  j  <  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  index  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length);  ++j)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length);  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length);  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    for(int    j    =    0;    j    <    parameters.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
25	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnCount()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  /  factor;	  int    cols    =    wm.getColumnCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
26	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  -  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnCount()  -  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  -  factor;	  int    cols    =    wm.getColumnCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
27	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnCount()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  *  factor  +  1;	  int    cols    =    wm.getColumnCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
28	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getColumnCount()  -  1;	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
29	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getColumnCount()  +  1;	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
30	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnSize();  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getColumnSize();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getColumnSize();	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
31	[BUG]  [BUGGY]  int  index  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  index  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  index  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    index    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  >  expected	15	None	replace
32	[BUG]  [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    index    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  measurements.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    index    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  >  expected	15	None	replace
34	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	24	None	add
35	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  measurements.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	24	None	add
36	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  variables.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	24	None	add
37	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Integer  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	24	None	add
38	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  *  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  *  1;	  int    cols    =    wm.getColsCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
39	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  /  factor;	  int    cols    =    wm.getColumnSize()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
40	[BUG]  [BUGGY]  int  cols  =  wm.getRowSize()  +  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRowSize()  +  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowSize()  +  factor;	  int    cols    =    wm.getColumnSize()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
41	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnIndex()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  /  factor;	  int    cols    =    wm.getColumnIndex()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
42	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  -  factor;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnIndex()  -  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  -  factor;	  int    cols    =    wm.getColumnIndex()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
43	[BUG]  [BUGGY]  int  cols  =  wm.getColumnIndex()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnIndex()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnIndex()  *  factor  +  1;	  int    cols    =    wm.getColumnIndex()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  3;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  3;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
46	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
48	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters[i].getColumnCount()  /  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getColumnCount()  /  1;	  int    cols    =    parameters[i].getColumnCount()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
49	[BUG]  [BUGGY]  int  cols  =  variables.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  variables.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  variables.length;	          int    cols    =    parameters.length;    int    cols    =    variables.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
50	[BUG]  [BUGGY]  int  cols  =  wm.length;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
51	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  for(int  j  =  0;  j  <  index;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    for(int  j  =  0;  j  <  index;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
53	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  int  index  =  0;  j  <  index;  ++j)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  int  index  =  0;  j  <  index;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    int  index  =  0;  j  <  index;  ++j)  {	  	non-compiled	[CE]  >  expected	3	None	add
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  For(int  j  =  0;  j  <  index;  ++j)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  For(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    For(int  j  =  0;  j  <  index;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
55	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  int  j  =  0;  j  <  index;  ++j)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    int  j  =  0;  j  <  index;  ++j)  {	  	non-compiled	[CE]  >  expected	3	None	add
56	[BUG]  [BUGGY]  int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  >  expected	17	None	replace
57	[BUG]  [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
58	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
59	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  variables.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
60	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  measurements.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  measurements.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  measurements.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
61	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	26	None	add
62	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
63	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  +  2;	  int    cols    =    parameters.length    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
64	[BUG]  [BUGGY]  int  cols  =  wm.getColumns();  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumns();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumns();	  int    cols    =    wm.getRows();    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
65	[BUG]  [BUGGY]  int  cols  =  wm.getRows()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRows()  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRows()  +  1;	  int    cols    =    wm.getRows();    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
66	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnsCount()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  /  factor;	  int    cols    =    wm.getColumnsCount()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
67	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  -  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnsCount()  -  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  -  factor;	  int    cols    =    wm.getColumnsCount()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
68	[BUG]  [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  cols  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    For(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  Integer  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length  +  2;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
71	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  2;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length  +  2;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  3;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length  +  3;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
73	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  3;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  3;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length  +  3;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
74	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length  +  1;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
75	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length  +  1;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
76	[BUG]  [BUGGY]  Int  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Int  cols  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	Int  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
77	[BUG]  [BUGGY]  int  cols  =  wm.length;  Integer  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.length;  Integer  cols  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    index    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	33	None	replace
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    index    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	33	None	replace
80	[BUG]  [BUGGY]  int  index  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  index  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  index  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    index    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	33	None	replace
81	[BUG]  [BUGGY]  int  cols  =  factor.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factor.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.length  -  1;	  int    cols    =    factor.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
82	[BUG]  [BUGGY]  int  cols  =  factor.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factor.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.length  -  2;	  int    cols    =    factor.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
83	[BUG]  [BUGGY]  int  cols  =  factor.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factor.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.length  +  1;	  int    cols    =    factor.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
84	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  *  factor  +  1;	  int    cols    =    wm.getColumnSize()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
85	[BUG]  [BUGGY]  int  cols  =  wm.getRowSize()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRowSize()  *  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowSize()  *  factor;	  int    cols    =    wm.getColumnSize()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
86	[BUG]  [BUGGY]  int  cols  =  factors.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factors.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factors.length  -  1;	  int    cols    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
87	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    for(int  j  =  0;  j  <  parameters.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
88	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  index  =  0;  j  <  parameters.length;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  index  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    int  index  =  0;  j  <  parameters.length;  ++i)  {	  	non-compiled	[CE]  >  expected	18	None	add
89	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  For(int  j  =  0;  j  <  parameters.length;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  For(int  j  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    For(int  j  =  0;  j  <  parameters.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
90	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  j  =  0;  j  <  parameters.length;  ++i)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  j  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    int  j  =  0;  j  <  parameters.length;  ++i)  {	  	non-compiled	[CE]  >  expected	18	None	add
91	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  /  factor;	  int    cols    =    wm.getColsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
92	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  *  factor  +  1;	  int    cols    =    wm.getColsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
93	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  -  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  -  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  -  factor;	  int    cols    =    wm.getColsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
94	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getCols()  *  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  *  1;	  int    cols    =    wm.getCols()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
95	[BUG]  [BUGGY]  int  cols  =  wm.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length  -  1;	  int    cols    =    wm.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
96	[BUG]  [BUGGY]  int  cols  =  wm.length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.length  -  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length  -  2;	  int    cols    =    wm.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
97	[BUG]  [BUGGY]  int  cols  =  wm.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.length  +  1;	  int    cols    =    wm.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
98	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
99	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  /  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getCols()  /  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  /  factor;	  int    cols    =    wm.getCols()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
100	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  +  coefficient;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getCols()  +  coefficient;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  +  coefficient;	  int    cols    =    wm.getCols()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
101	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getCols()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  *  factor  +  1;	  int    cols    =    wm.getCols()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
102	[BUG]  [BUGGY]  int  cols  =  wm.getCols()  *  factor  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getCols()  *  factor  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getCols()  *  factor  +  2;	  int    cols    =    wm.getCols()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
103	[BUG]  [BUGGY]  int  cols  =  wm.getRowSize();  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getRowSize();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getRowSize();	  int    cols    =    wm.getColumnSize()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
104	[BUG]  [BUGGY]  int  cols  =  parameters[i].getRowCount();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters[i].getRowCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getRowCount();	  int    cols    =    parameters[i].getColumnCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  parameters.length;  ++i)  {  [CE]  variable  i  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  i  =  0;  j  <  parameters.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  i  =  0;  j  <  parameters.length;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++i)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  method  updateJacobian()	19	None	replace
106	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  -  1;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length  -  1;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
107	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  -  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  -  1;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length  -  1;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
108	[BUG]  [BUGGY]  for(int  j  =  0,  cols  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  cols  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  cols  <  parameters.length;  ++j)  {	  for(int    j    =    0,    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
109	[BUG]  [BUGGY]  for(int  j  =  0,  len  =  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  len  =  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  len  =  parameters.length;  ++j)  {	  for(int    j    =    0,    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
110	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
111	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  *  factor  +  1;	  int    cols    =    wm.getColumnsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
112	[BUG]  [BUGGY]  int  cols  =  factor.getColsCount()  +  wm.getColsCount();  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factor.getColsCount()  +  wm.getColsCount();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.getColsCount()  +  wm.getColsCount();	  int    cols    =    wm.getColsCount()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
113	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	35	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	35	None	replace
115	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	35	None	replace
116	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnsCount()  *  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  *  2;	  int    cols    =    wm.getColumnsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
117	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
118	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
119	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  }  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  }  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {  int  index  =  0;  j  <  parameters.length;  ++j)  {  }	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    index    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  >  expected	15	None	replace
120	[BUG]  [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnCount()  *  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnCount()  *  2;	  int    cols    =    wm.getColumnCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
121	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  0;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  0;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
123	[BUG]  [BUGGY]  int  cols  =  wm.getColumnLength();  [CE]  class,  interface,  or  enum  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnLength();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnLength();	  int    cols    =    wm.getColumnCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
124	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  metrics.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  metrics.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  metrics.length;  ++j)  {  int  index  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    index    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	33	None	replace
125	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Integer  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	26	None	add
126	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  colls  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  colls  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  colls  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	26	None	add
127	[BUG]  [BUGGY]  int  cols  =  wm.getColumns(index);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumns(index);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumns(index);	  int    cols    =    wm.getRows();    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
128	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols().length;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters[i].getCols().length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getCols().length;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
129	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  *  factor  +  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  *  factor  +  2;	  int    cols    =    wm.getColumnSize()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
130	[BUG]  [BUGGY]  int  cols  =  wm.getColumnsCount()  +  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnsCount()  +  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnsCount()  +  factor  +  1;	  int    cols    =    wm.getColumnsCount()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  Integer  index  =  wm.getIndex(variants[j]);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  Integer  index  =  wm.getIndex(variants[j]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    Integer  index  =  wm.getIndex(variants[j]);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
132	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  Integer  index  =  wm.getIndex(variants[i]);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  Integer  index  =  wm.getIndex(variants[i]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    Integer  index  =  wm.getIndex(variants[i]);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
133	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  +  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  +  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  +  factor  +  1;	  int    cols    =    wm.getColsCount()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
134	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  0;  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  0;  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  index  =  0;  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
135	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    Arrays.fill(jacobian,  0,  j);  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
136	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
137	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
138	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  +  factor  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  +  factor  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  +  factor  +  1;	  int    cols    =    wm.getColumnSize()    +    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
139	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  index;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  index;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
140	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  for(int  j  =  0;  j  <  index);  ++j)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  for(int  j  =  0;  j  <  index);  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    index;    ++j)    {    for(int  j  =  0;  j  <  index);  ++j)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
141	[BUG]  [BUGGY]  for(int  j  =  0,  index  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  index  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  index  =  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    For(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
143	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	Arrays.fill(jacobian,  0);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	replace
144	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	Arrays.fill(jacobian,  0,  parameters.length);  for(int  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	49	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  0,  j  =  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  j  =  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  j  =  parameters.length;  ++j)  {	  for(int    j    =    0,    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
146	[BUG]  [BUGGY]  for(int  j  =  0,  index  <  parameters.length;  ++j)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0,  index  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0,  index  <  parameters.length;  ++j)  {	  for(int    j    =    0,    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
147	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  +  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
148	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
149	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  For(int  j  =  0;  j  <  rows;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    For(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
150	[BUG]  [BUGGY]  int  cols  =  wm.getColsCount()  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColsCount()  *  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColsCount()  *  2;	  int    cols    =    wm.getColsCount()    *    factor;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
151	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
152	[BUG]  [BUGGY]  int  cols  =  wm.getColumnSize()  *  1;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumnSize()  *  1;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumnSize()  *  1;	  int    cols    =    wm.getColumnSize()    +    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
153	[BUG]  [BUGGY]  int  cols  =  factor.length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  factor.length  /  2;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  factor.length  /  2;	  int    cols    =    factor.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
154	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  variables;  ++j)  {  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  variables;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  variables;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    Arrays.fill(jacobian,    0);    for(int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  	58	None	replace
155	[BUG]  [BUGGY]  int  cols  =  variables.length;  int  rows  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  variables.length;  int  rows  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  variables.length;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
156	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  index  =  -Math.sqrt(wm.getWeight());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  int  index  =  -Math.sqrt(wm.getWeight());  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    int  index  =  -Math.sqrt(wm.getWeight());	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
157	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  for(int  j  =  0;  j  <  parameters.length);  ++i)  {  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++i)  {  for(int  j  =  0;  j  <  parameters.length);  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length;    ++i)    {    for(int  j  =  0;  j  <  parameters.length);  ++i)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
158	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  parameters.length;  ++j)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  Integer  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	Integer  j  =  0;  j  <  parameters.length;  ++j)  {	  for(int    j    =    0;    j    <    parameters.length;    ++j)    {    int    j    =    0;    j    <    parameters.length;    ++j)    {    	non-compiled	[CE]  >  expected	17	None	replace
159	[BUG]  [BUGGY]  int  cols  =  wm.getColumns(variants);  [CE]  class,  interface,  or  enum  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  wm.getColumns(variants);  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  wm.getColumns(variants);	  int    cols    =    wm.getRows();    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
160	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnSize();  [CE]  class,  interface,  or  enum  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters[i].getColumnSize();  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters[i].getColumnSize();	  int    cols    =    parameters[i].getColumnCount()    -    1;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
161	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
162	[BUG]  [BUGGY]  int  j  =  0;  j  <  columns;  ++j)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  j  =  0;  j  <  columns;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	35	None	replace
163	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  j  =  0;  j  <  cols;  ++j)  {	  for(int    j    =    0;    j    <    rows;    ++j)    {    int    j    =    0;    j    <    rows;    ++j)    {    	non-compiled	[CE]  >  expected	35	None	replace
164	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  measurements.length;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
165	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  measurements.length;  ++i)  {  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  measurements.length;  ++i)  {	  for(int    j    =    0;    j    <    parameters.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
166	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  *  factor;  [CE]  class,  interface,  or  enum  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  *  factor;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  measurements[i].getColumnCount()  *  factor;	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
167	[BUG]  [BUGGY]  int  cols  =  parameter.length;  Int  cols  =  parameters.length;  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameter.length;  Int  cols  =  parameters.length;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameter.length;  Int  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
168	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
169	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(parameters[index]);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(parameters[index]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  index  =  wm.getIndex(parameters[index]);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
170	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(parameters[i]);  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(parameters[i]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  index  =  wm.getIndex(parameters[i]);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
171	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(variants[index]);  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  for(int  j  =  0;  j  <  parameters.length  +  1;  ++j)  {  int  index  =  wm.getIndex(variants[index]);  [BUGGY]      jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int    j    =    0;    j    <    parameters.length    +    1;    ++j)    {    int  index  =  wm.getIndex(variants[index]);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
172	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  3;  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());      [BUGGY]  int  cols  =  parameters.length  -  3;  [BUGGY]      for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	int  cols  =  parameters.length  -  3;	  int    cols    =    parameters.length    -    2;    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
