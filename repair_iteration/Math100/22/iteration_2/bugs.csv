bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  2  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
2	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  2  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	3	replace
4	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	3	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
6	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
7	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  result;  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  result;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  result;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	15	None	replace
8	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	17	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
17	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	17	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	17	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
20	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	20	None	replace
21	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
22	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
23	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(	  	non-compiled	[CE]  ')'  expected	5	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  criterion    +=    wm[i].getWeight()    *    residual    *    factor;    	compilable	  [FE]  AssertionFailedError  	4	5	replace
25	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [FE]  AssertionFailedError  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  criterion    +=    wm[i].getWeight()    *    residual    *    factor;    	compilable	  [FE]  AssertionFailedError  	4	5	replace
26	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	16	None	replace
27	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
28	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  criterion;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	16	None	replace
29	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
30	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  result  *  factor;  [CE]  cannot  find  symbol  result  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  result  *  factor;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  result  *  factor;	  criterion    +=    wm[i].getWeight()    *    result    *    residual;    	non-compiled	[CE]  cannot  find  symbol  result	3	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
34	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  problem;  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  problem;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  problem;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	14	None	replace
35	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	10	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	10	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
39	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
40	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  ';'  expected	1	None	add
41	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  result;  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  result;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  result;	  	non-compiled	[CE]  cannot  find  symbol  result	1	None	add
42	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  remaining;  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  remaining;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  remaining;	  	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	add
43	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  ';'  expected	1	None	add
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
45	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  factor;	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	19	None	replace
46	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
48	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
51	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    factor    *    residual;    	non-compiled	[CE]  cannot  find  symbol  Criterion	12	None	replace
52	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
53	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
54	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	21	None	replace
55	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
56	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
57	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
58	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  residual;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  residual;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	13	None	replace
59	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
60	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	20	None	replace
65	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
66	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
68	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
69	[BUG]  [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
71	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
72	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
73	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
74	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
76	[BUG]  [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
77	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
78	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
79	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
85	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
86	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
87	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
88	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
89	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	14	None	replace
91	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
92	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
93	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS	  	non-compiled	[CE]  ';'  expected	5	None	add
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	21	None	replace
95	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
96	[BUG]  [BUGGY]  foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
97	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
99	[BUG]  [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
100	[BUG]  [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt	  	non-compiled	[CE]  ';'  expected	5	None	add
101	[BUG]  [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt	  	non-compiled	[CE]  ';'  expected	5	None	add
102	[BUG]  [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]      if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	        if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(	  	non-compiled	[CE]  ')'  expected	5	None	add
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	11	None	replace
104	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
105	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual());  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual());	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
106	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getResidual();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  wm  =  parameters[i].getResidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters[i].getResidual();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
107	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  wm  =  parameters[i].getMeasurements();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters[i].getMeasurements();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
108	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
109	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	21	None	replace
110	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	21	None	replace
111	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
112	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  result;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  result;  }  [BUGGY]    }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  result;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
113	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	20	None	replace
114	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	20	None	replace
115	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(redemainder  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(redemainder  *  wm.length);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(redemainder  *  wm.length);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	20	None	replace
116	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  >  expected	7	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  ';'  expected	7	None	replace
118	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problem.getMeasurements();	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }	      for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	10	None	replace
120	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  residual  *  factor;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  residual  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  residual  *  factor;	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
121	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getResidual();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterian  criterion  =  wm[i].getResidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getResidual();	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
122	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  result  *  factor;	      if(result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	19	None	replace
123	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  factor  *  residual;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	13	None	replace
124	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  remaining  *  factor;	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	18	None	replace
125	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();    [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(remaining);	      if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
