bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  2;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	9	replace
2	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  2;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	9	replace
3	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual  =  residual;  [CE]  unexpected  type  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual  =  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  2  *  residual  =  residual;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	non-compiled	[CE]  unexpected  type	2	None	replace
4	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  Criterion    +=    wm[i].getWeight()    *    factor    *    residual;    	non-compiled	[CE]  cannot  find  symbol  Criterion	123	None	replace
5	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  result  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  result  *  residual;	  Criterion    +=    wm[i].getWeight()    *    factor    *    residual;    	non-compiled	[CE]  cannot  find  symbol  Criterion	123	None	replace
6	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
7	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
8	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(result);  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	36	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterian    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterian    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
12	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  factor);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	110	None	replace
13	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  factor);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	110	None	replace
14	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(cost  *  residual);  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(cost  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(cost  *  residual);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	110	None	replace
15	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  residual);  [CE]  cannot  find  symbol  Criterion  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  residual);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	110	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result!=    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	23	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result!=    0)    {    return    Math.sqrt(    	non-compiled	[CE]  '.class'  expected	23	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.sqrt(	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result!=    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    residual;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
20	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
21	[BUG]  [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
22	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	14	None	replace
24	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
25	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
26	[BUG]  [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
27	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  factor;  [CE]  cannot  find  symbol  factor  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  factor;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  cost  *  factor;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion    +=    wm[i].getWeight()    *    cost    *    remaining;    	non-compiled	[CE]  cannot  find  symbol  factor	42	None	replace
28	[BUG]  [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
29	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
30	[BUG]  [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
31	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
32	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length    	non-compiled	[CE]  not  a  statement	22	None	replace
33	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length    	non-compiled	[CE]  not  a  statement	22	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(result);  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(result);  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(result);  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
36	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	82	None	replace
37	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  Criterion  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criteria    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	79	None	replace
38	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion);  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  Criterion	17	None	replace
39	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.rint(result);  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.rint(result);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.rint(result);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  Criterion	17	None	replace
40	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion);  [CE]  cannot  find  symbol  Criterion  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  Criterion	17	None	replace
41	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
42	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  '.class'  expected	56	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  '.class'  expected	56	None	replace
45	[BUG]  [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	43	None	replace
46	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    ref;    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
47	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  ref;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    ref;    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	101	None	replace
49	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	101	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	101	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	101	None	replace
52	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
53	[BUG]  [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(problem);    }    	non-compiled	[CE]  not  a  statement	89	None	replace
54	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(problem);    }    	non-compiled	[CE]  not  a  statement	89	None	replace
55	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	60	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  residual  *  criterion;	  criterion    +=    wm[i].getWeight()    *    result    *    factor;    	compilable	  [FE]  AssertionFailedError  	30	3	replace
57	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [FE]  AssertionFailedError  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  residual  *  criterion;	  criterion    +=    wm[i].getWeight()    *    result    *    factor;    	compilable	  [FE]  AssertionFailedError  	30	3	replace
58	[BUG]  [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  remaining  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	remaining  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
59	[BUG]  [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  restul  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	restul  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
60	[BUG]  [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  remainder  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	remainder  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
61	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  '.class'  expected	44	None	replace
62	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  '.class'  expected	44	None	replace
63	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  >  expected	116	None	replace
64	[BUG]  [BUGGY]  double  criterion  =  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  =  wm[i].getWeight();	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	116	None	replace
65	[BUG]  [BUGGY]  long  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  long  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	long  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  >  expected	116	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(remaining);  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(remaining);  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(remaining);  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  ref  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
72	[BUG]  [BUGGY]  RectangleEdge  wm  =  wm[i].getResidual();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  wm[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
73	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems[i].getResidual();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problems[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problems[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
74	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problem.getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problem.getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
75	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  remaining  *  residual;	  Criterion    +=    wm[i].getWeight()    *    remaining    *    factor;    	non-compiled	[CE]  cannot  find  symbol  Criterion	124	None	replace
76	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  result;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost  *  result;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  cost  *  result;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion    +=    wm[i].getWeight()    *    cost    *    result;    	non-compiled	[CE]  cannot  find  symbol  result	41	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	75	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	75	None	replace
79	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
80	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
81	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	80	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
83	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	80	None	replace
84	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm,  residual  *  factor);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm,  residual  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(wm,  residual  *  factor);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
85	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm[i],  residual  *  factor);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm[i],  residual  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(wm[i],  residual  *  factor);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
86	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm.length  *  residual);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm.length  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(wm.length  *  residual);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
87	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm.length);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm.length);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	49	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.sqrt	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(reciterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	100	None	replace
90	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(reciterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	100	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(reciterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  <identifier>  expected	100	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(reciterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	100	None	replace
93	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length,  i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length,  i);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length,  i);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
94	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  -  1);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  -  1);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  -  1);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
95	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  +  1);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  +  1);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm,  0,  wm.length  +  1);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(variable);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	103	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(variable);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	103	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
99	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  '.class'  expected	99	None	replace
100	[BUG]  [BUGGY]  while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
101	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
102	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  factor;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  factor;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
103	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  residual;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    remaining    *    problem;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
104	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    remaining    *    problem;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
105	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    result;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
106	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    result;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
107	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  return  problem.getRMS	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS    	non-compiled	[CE]  ';'  expected	93	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS    	non-compiled	[CE]  ';'  expected	93	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS    	non-compiled	[CE]  ';'  expected	93	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
112	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
113	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  residual);  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  residual);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
114	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  factor);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
115	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  residual);  [CE]  cannot  find  symbol  Criterion  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  residual);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
117	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	81	None	replace
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
119	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(redemainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	115	None	replace
120	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(redemainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	115	None	replace
121	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  criterion);  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  criterion);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(redemainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	115	None	replace
122	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  criterion);  [CE]  cannot  find  symbol  Criterion  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  criterion);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	114	None	replace
123	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(criterion  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	114	None	replace
124	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	114	None	replace
125	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
126	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
127	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problems[i].getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problems[i].getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
128	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem,  parameters.getMeasurements();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problem,  parameters.getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problem,  parameters.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  ';'  expected	118	None	replace
129	[BUG]  [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements()  ||  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problem.getMeasurements()  ||  problem.getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problem.getMeasurements()  ||  problem.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
130	[BUG]  [BUGGY]  Criterian  criterion  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  problem.getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  problem.getResidual();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
131	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getRsidual();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getRsidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getRsidual();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
132	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getStandardResidual();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getStandardResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getStandardResidual();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
133	[BUG]  [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
134	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
135	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
136	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  cost;  [CE]  cannot  find  symbol  factor  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  factor  *  cost;	  criterion    +=    wm[i].getWeight()    *    residual    *    cost;    	non-compiled	[CE]  cannot  find  symbol  factor	25	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
139	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
140	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	add
141	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	38	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getResidual()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  AssertionFailedError  	38	2	add
143	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getResidual()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	compilable	  [FE]  AssertionFailedError  	38	2	add
144	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    Criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol  Criterion	38	None	add
145	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWidth()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWidth()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWidth()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
146	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  not  a  statement	21	None	replace
147	[BUG]  [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	61	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	replace
150	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    }    	non-compiled	[CE]  '.class'  expected	62	None	replace
151	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    }    	non-compiled	[CE]  '.class'  expected	55	None	replace
152	[BUG]  [BUGGY]  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
153	[BUG]  [BUGGY]  result  +=  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  +=  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  +=  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
154	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
155	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
156	[BUG]  [BUGGY]  Criterion  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getResidual()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    }    	compilable	  [FE]  AssertionFailedError  	111	2	replace
158	[BUG]  [BUGGY]  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getResidual()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    }    	compilable	  [FE]  AssertionFailedError  	111	2	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	12	None	replace
160	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    return    Math.sqrt(    	non-compiled	[CE]  '.class'  expected	12	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
163	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  '.class'  expected	5	None	replace
164	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  '.class'  expected	5	None	replace
165	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  '.class'  expected	5	None	replace
166	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  criterion  *  factor;	  Criterion    +=    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol  Criterion	45	None	replace
167	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(cost  *  residual);  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(cost  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(cost  *  residual);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	54	None	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion    +=    wm[i].getWeight()    *    2    *    residual;    criterion  +=  wm[i].getWeight()  *  2  *  residual;	  	compilable	  [FE]  AssertionFailedError  	1	3	add
169	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    criterion  +=  wm[i].getWeight()  *  2  *  residual;	  	compilable	  [FE]  AssertionFailedError  	1	3	add
170	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  int  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  int  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    int  criterion  +=  wm[i].getWeight()  *  2  *  residual;	  	non-compiled	[CE]  ';'  expected	1	None	add
171	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  double  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  double  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    double  criterion  +=  wm[i].getWeight()  *  2  *  residual;	  	non-compiled	[CE]  ';'  expected	1	None	add
172	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  2  *  remaining;  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  2  *  remaining;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    criterion  +=  wm[i].getWeight()  *  2  *  remaining;	  	non-compiled	[CE]  cannot  find  symbol  remaining	1	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  	compilable	  [FE]  AssertionFailedError  	24	2	add
174	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  	compilable	  [FE]  AssertionFailedError  	24	2	add
175	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  remaining  *  cost;  [CE]  cannot  find  symbol  remaining  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  remaining  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  remaining  *  cost;	  	non-compiled	[CE]  cannot  find  symbol  remaining	24	None	add
176	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  result  *  cost;  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  result  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  result  *  cost;	  	non-compiled	[CE]  cannot  find  symbol  result	24	None	add
177	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  residual  *  Cost;  [CE]  cannot  find  symbol  Cost  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  residual  *  Cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  residual  *  Cost;	  	non-compiled	[CE]  cannot  find  symbol  Cost	24	None	add
178	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  ref  *  cost;  [CE]  cannot  find  symbol  ref  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  criterion  +=  wm[i].getWeight()  *  ref  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    criterion  +=  wm[i].getWeight()  *  ref  *  cost;	  	non-compiled	[CE]  cannot  find  symbol  ref	24	None	add
179	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	95	None	replace
180	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	95	None	replace
181	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	95	None	replace
182	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  Criterion    +=    wm[i].getWeight()    *    residual    *    result;    	non-compiled	[CE]  cannot  find  symbol  Criterion	7	None	replace
183	[BUG]  [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	102	None	replace
184	[BUG]  [BUGGY]  ||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  ||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
185	[BUG]  [BUGGY]  ||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  ||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	||  residual  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
186	[BUG]  [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra  noastra	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	102	None	replace
187	[BUG]  [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
188	[BUG]  [BUGGY]  NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
189	[BUG]  [BUGGY]  NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
190	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    factor;    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
191	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  /  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  /  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(criterion  /  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	113	None	replace
192	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  factor);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  factor);	  RectangleEdge    criterion    =    new    RectangleEdge(wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
193	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  residual);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  residual);	  RectangleEdge    criterion    =    new    RectangleEdge(wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
194	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  problem.getResidual());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  problem.getResidual());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  problem.getResidual());	  RectangleEdge    criterion    =    new    RectangleEdge(wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
195	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  wm.getResidual());  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  wm.getResidual());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i],  wm.getResidual());	  RectangleEdge    criterion    =    new    RectangleEdge(wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  problem;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.log(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.log(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result,  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result,  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.log(result,  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.log(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
201	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
202	[BUG]  [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
203	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
204	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  factor;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  factor;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
205	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  cost  *  residual;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
206	[BUG]  [BUGGY]  Criterian  criterion  =  factor[i].getWeight()  *  wm[i]  *  factor;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  factor[i].getWeight()  *  wm[i]  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  factor[i].getWeight()  *  wm[i]  *  factor;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
207	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  residual;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  criterion  *  residual;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
208	[BUG]  [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    int    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	40	None	replace
209	[BUG]  [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    int    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	40	None	replace
210	[BUG]  [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  result  *  residual;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  result  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  criterion  +=  wm[i].getWeight()  *  result  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    int    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	40	None	replace
211	[BUG]  [BUGGY]  RectangleEdge  wm  =  wm[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  wm[i].getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  wm[i].getMeasurements();	  RectangleEdge    wm    =    parameters[i].getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
212	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	77	None	replace
213	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	77	None	replace
214	[BUG]  [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result>  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	77	None	replace
215	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
216	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  criterion;	  criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
218	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  criterion;	  criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    	compilable	  [FE]  AssertionFailedError  	4	3	replace
219	[BUG]  [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
220	[BUG]  [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
221	[BUG]  [BUGGY]  NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	119	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	119	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	119	None	replace
225	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  '.class'  expected	119	None	replace
226	[BUG]  [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    factor;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
229	[BUG]  [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
230	[BUG]  [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
231	[BUG]  [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
232	[BUG]  [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor  [CE]  ';'  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Math.rint(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
233	[BUG]  [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Pentru(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  '.class'  expected	52	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result,  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
236	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
237	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  parameters.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
238	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
239	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  '.class'  expected	98	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	98	None	replace
241	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  Double  criterion  =  wm[i].getResidual();  }  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  Double  criterion  =  wm[i].getResidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  Double  criterion  =  wm[i].getResidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  '.class'  expected	98	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  	compilable	  [FE]  AssertionFailedError  	3	2	add
243	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  	compilable	  [FE]  AssertionFailedError  	3	2	add
244	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    int  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  	non-compiled	[CE]  ';'  expected	3	None	add
245	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  	non-compiled	[CE]  ';'  expected	3	None	add
246	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  remaining;  [CE]  cannot  find  symbol  remaining  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  remaining;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    criterion  +=  wm[i].getWeight()  *  criterion  *  remaining;	  	non-compiled	[CE]  cannot  find  symbol  remaining	3	None	add
247	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  result;  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  criterion  +=  wm[i].getWeight()  *  criterion  *  result;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    criterion  +=  wm[i].getWeight()  *  criterion  *  result;	  	non-compiled	[CE]  cannot  find  symbol  result	3	None	add
248	[BUG]  [BUGGY]  foundRaw(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(criterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
249	[BUG]  [BUGGY]  foundRaw(remainder,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
250	[BUG]  [BUGGY]  foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor);  }	  foundRaw(remainder,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
251	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  2;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
252	[BUG]  [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    problem;    }    	non-compiled	[CE]  ';'  expected	92	None	replace
253	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(residual);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(residual);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
254	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(resid);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(resid);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(resid);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
255	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(resitive);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(resitive);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(resitive);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
257	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  factor  *  residual;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  factor  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  factor  *  residual;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result!=  0)  {  return  Math.	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result!=    0)    {    return    Math.sqrt(    	non-compiled	[CE]  <identifier>  expected	23	None	replace
259	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length    	non-compiled	[CE]  not  a  statement	22	None	replace
260	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    factor;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
261	[BUG]  [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    factor;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
262	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  >  0)  {  return  Math	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(reciterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	100	None	replace
263	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(result);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(result);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(result);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
264	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  double  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  double  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    double  criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  	non-compiled	[CE]  ';'  expected	24	None	add
265	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  int  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  int  criterion  +=  wm[i].getWeight()  *  residual  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    residual    *    cost;    int  criterion  +=  wm[i].getWeight()  *  residual  *  cost;	  	non-compiled	[CE]  ';'  expected	24	None	add
266	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  problem;  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  problem;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  criterion  *  problem;	  Criterion    +=    wm[i].getWeight()    *    residual    *    problem;    	non-compiled	[CE]  cannot  find  symbol  Criterion	34	None	replace
267	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	80	None	replace
268	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);  [CE]  cannot  find  symbol  Criterion  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(problem);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    	non-compiled	[CE]  cannot  find  symbol  Criterion	17	None	replace
269	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
270	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  >  expected	11	None	replace
271	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterian    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  '.class'  expected	63	None	replace
272	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	20	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  /  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  criterion  /  residual;	  criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    	compilable	  [FE]  AssertionFailedError  	4	10	replace
274	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  /  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  /  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  criterion  /  residual;	  criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    	compilable	  [FE]  AssertionFailedError  	4	10	replace
275	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.rint(result);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
276	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i],  problem.getResidual();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i],  problem.getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i],  problem.getResidual();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  ';'  expected	121	None	replace
277	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getCost();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getCost();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getCost();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
278	[BUG]  [BUGGY]  Criterian  criterion  =  problem[i].getResidual();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  problem[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  problem[i].getResidual();	  Criterian    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	75	None	replace
280	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  >  expected	119	None	replace
281	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
282	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  return  Math.sqrt	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    return    Math.sqrt(    	non-compiled	[CE]  '.class'  expected	12	None	replace
283	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  factor  *  criterion;	  Criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    	non-compiled	[CE]  cannot  find  symbol  Criterion	28	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
286	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result  *  factor);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	55	None	replace
288	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	113	None	replace
289	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
290	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
291	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  2  *  residual;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
292	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
293	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(result  >  0)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(result  >  0)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    for(int  i  =  0;  i  <  wm.length;  ++i)  {  if(result  >  0)  {  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
294	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  >  expected	83	None	replace
295	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  '.class'  expected	83	None	replace
296	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  '.class'  expected	56	None	replace
297	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
298	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(redemainder    *    wm.length);    	non-compiled	[CE]  cannot  find  symbol  Criterion	115	None	replace
299	[BUG]  [BUGGY]  double  criterion  =  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  =  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  =  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
300	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  ';'	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
301	[BUG]  [BUGGY]  RectangleEdge  wm  =  variables[i].getResidual();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  variables[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  variables[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
302	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters[i].getStandardResidual();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters[i].getStandardResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters[i].getStandardResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
303	[BUG]  [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  }	  int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    }    	non-compiled	[CE]  >  expected	116	None	replace
304	[BUG]  [BUGGY]  RectangleEdge  wm  =  measurements[i].getMeasurements();  [timeout]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  measurements[i].getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  measurements[i].getMeasurements();	  RectangleEdge    wm    =    parameters[i].getMeasurements();    	non-compiled	[timeout]	107	None	replace
305	[BUG]  [BUGGY]  RectangleEdge  wm  =  variables[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  variables[i].getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  variables[i].getMeasurements();	  RectangleEdge    wm    =    parameters[i].getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
306	[BUG]  [BUGGY]  result  =  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  =  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  =  Math.rint(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
307	[BUG]  [BUGGY]  double  result  =  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  result  =  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  result  =  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
308	[BUG]  [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)>  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
309	[BUG]  [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
310	[BUG]  [BUGGY]  results  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  results  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	results  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
311	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length  -  1;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  >  expected	37	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaine  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaine  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaine  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
313	[BUG]  [BUGGY]  Criterion  -=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  -=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  -=  wm[i].getWeight()  *  cost  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	111	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
316	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    residual;    }    	non-compiled	[CE]  not  a  statement	59	None	replace
317	[BUG]  [BUGGY]  Quarters  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Quarters  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Quarters  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
318	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
319	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  result;  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  criterion  *  result;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  criterion  *  result;	  Criterion    +=    wm[i].getWeight()    *    residual    *    result;    	non-compiled	[CE]  cannot  find  symbol  Criterion	7	None	replace
320	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [CE]  '.class'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    ref;    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
321	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }  [CE]  '.class'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  ref;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    ref;    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
322	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
323	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getResidual()  *  residual  *  criterion;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  '.class'  expected	26	None	replace
324	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.floor(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.floor(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.floor(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.log(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	18	None	replace
325	[BUG]  [BUGGY]  foundRaw(reciterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(reciterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(reciterion,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
326	[BUG]  [BUGGY]  foundRaw(remainder,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder,  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
327	[BUG]  [BUGGY]  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criteria    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	79	None	replace
328	[BUG]  [BUGGY]  Criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getResidual()  *  cost  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criteria    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	79	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.sqrt(	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRM  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRM  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRM	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS    	non-compiled	[CE]  ';'  expected	93	None	replace
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS    	non-compiled	[CE]  <identifier>  expected	93	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  factor;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
334	[BUG]  [BUGGY]  result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
335	[BUG]  [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *=  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  criterion;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
336	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    problem;    }    	non-compiled	[CE]  not  a  statement	92	None	replace
337	[BUG]  [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result,  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
338	[BUG]  [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  ';'  expected	101	None	replace
339	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  /  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  /  2  *  residual;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
341	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  /  2  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  /  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  /  2  *  residual;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  2  *  cost;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	4	replace
343	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  cost;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  2  *  cost;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	4	replace
344	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  not  a  statement	98	None	replace
345	[BUG]  [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  not  a  statement	98	None	replace
346	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResi  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResi  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResi	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  not  a  statement	98	None	replace
347	[BUG]  [BUGGY]  while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	while(remaining  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  }	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
348	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm[i  *  residual);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(wm[i  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(wm[i  *  residual);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  ']'  expected	108	None	replace
349	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  wm);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
350	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(variable  *  residual);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(variable  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(variable  *  residual);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
351	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder);  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(problem);    }    	non-compiled	[CE]  not  a  statement	89	None	replace
352	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  factor;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getResidual();	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
354	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  factor);  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  /  factor);	  Criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    factor);    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
355	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    result;    }    	non-compiled	[CE]  not  a  statement	87	None	replace
356	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    	non-compiled	[CE]  not  a  statement	77	None	replace
357	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  result;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
358	[BUG]  [BUGGY]  RectangleEdge  wm  =  problematic.getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problematic.getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problematic.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variant  *  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
360	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  >  expected	82	None	replace
361	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  '.class'  expected	82	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  3;  ++i)  {  double  criterion  =  wm[i].getWeight();	  for(int    i    =    0;    i    <    wm.length    -    2;    ++i)    {    double    criterion    =    wm[i].getWeight();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
363	[BUG]  [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
364	[BUG]  [BUGGY]  NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	NeighborResistance  <  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  result;  }	  NeighborResistance    <    =    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    result;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
365	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	95	None	replace
366	[BUG]  [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  remaining  *  problem;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    remaining    *    problem;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
367	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  result;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  result  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  result;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  result;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol  result	38	None	add
368	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getRaw()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getRaw()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getRaw()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
369	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  >  expected	81	None	replace
370	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	81	None	replace
371	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  criterion;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
372	[BUG]  [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  criterion;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
373	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  problem;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
374	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  problem  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  problem  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  problem  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  problem;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
376	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(result,  0,  wm.length);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(result,  0,  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(result,  0,  wm.length);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
377	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(remaining,  0,  wm.length);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(remaining,  0,  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(remaining,  0,  wm.length);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(criterion);  if(problem!=  null)  {  return  problem.getRMS(result);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(criterion);  if(problem!=  null)  {  return  problem.getRMS(result);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(criterion);  if(problem!=  null)  {  return  problem.getRMS(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(result);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
379	[BUG]  [BUGGY]  if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [CE]  ')'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ')'  expected	97	None	replace
380	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(reciterion  *  factor	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
381	[BUG]  [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor    	non-compiled	[CE]  ';'  expected	97	None	replace
382	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  factor);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  factor);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
383	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor,  cost);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
384	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
385	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost  *  factor;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  cost  *  factor;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion    +=    wm[i].getWeight()    *    cost    *    remaining;    	non-compiled	[CE]  cannot  find  symbol  Criterion	42	None	replace
386	[BUG]  [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight();  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  >  expected	119	None	replace
387	[BUG]  [BUGGY]  double  criterion  +=  wm[i].getResidual();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  +=  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  +=  wm[i].getResidual();	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	119	None	replace
388	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(remainder);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(remainder);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(remainder);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(variable);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	103	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  residual);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  residual);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(variable,  residual);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(variable);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	103	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	90	None	replace
391	[BUG]  [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara  superioara	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	102	None	replace
392	[BUG]  [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  [i]  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  [i]  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  clientii  [i]	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt(    	non-compiled	[CE]  ';'  expected	102	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(reciterion  ==  0)  {  return  Math.sqrt(	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
394	[BUG]  [BUGGY]  RectangleEdge  wm  =  measurements[i].getResidual();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  measurements[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  measurements[i].getResidual();	  RectangleEdge    wm    =    parameters[i].getResidual();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  result;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
396	[BUG]  [BUGGY]  if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remainder  >  factor)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
397	[BUG]  [BUGGY]  if(remainder  >  factor)  {  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remainder  >  factor)  {  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remainder  >  factor)  {  foundRaw(remainder)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  foundRaw(remainder)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  ';'  expected	95	None	replace
398	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(wm[i].getResidual(),  criterion);	  RectangleEdge    criterion    =    new    RectangleEdge(wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
399	[BUG]  [BUGGY]  foundRaw(result)>  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)>  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)>  1)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result)>    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
400	[BUG]  [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  problem;  }  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  problem;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  ref  *  problem;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    problem;    }    	non-compiled	[CE]  not  a  statement	91	None	replace
401	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result!=  0)  {  return  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result!=  0)  {  return  Math.sqrt(  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result!=  0)  {  return  Math.sqrt(	          for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result!=    0)    {    return    Math.sqrt(    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
402	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
403	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  =  wm[i].getResidual();  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  =  wm[i].getResidual();	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	99	None	replace
404	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  '.class'  expected	44	None	replace
405	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalStateException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
406	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  cost;  [CE]  cannot  find  symbol  factor  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  cost;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  cost;	  criterion    +=    wm[i].getWeight()    *    residual    *    cost;    	non-compiled	[CE]  cannot  find  symbol  factor	25	None	replace
407	[BUG]  [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(remainder,  0,  wm.length);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  criterion  =  new  RectangleEdge(remainder,  0,  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  criterion  =  new  RectangleEdge(remainder,  0,  wm.length);	  RectangleEdge    criterion    =    new    RectangleEdge(wm,    0,    wm.length);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
408	[BUG]  [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  residual;  }  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  residual;  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    factor    *    residual;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion    +=    wm[i].getWeight()    *    2    *    residual;    criterion  +=  wm[i].getWeight()  *  3  *  residual;	  	compilable	  [FE]  AssertionFailedError  	1	2	add
410	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  2  *  residual;  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    2    *    residual;    criterion  +=  wm[i].getWeight()  *  3  *  residual;	  	compilable	  [FE]  AssertionFailedError  	1	2	add
411	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
412	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getMeasurements();  if(problem!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
413	[BUG]  [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result,  0,  wm.length)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  residual  *  factor;  }	  foundRaw(result,    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
414	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  Math.sqrt(result);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
415	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
416	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  ';'  expected	117	None	replace
417	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaining  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaining  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remaining  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(reciterion    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	64	None	replace
418	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getResidual();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getResidual();  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    double    criterion    =    wm[i].getResidual();    }    	non-compiled	[CE]  ';'  expected	37	None	replace
419	[BUG]  [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  int  criterion  +=  wm[i].getWeight()  *  2  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	int  criterion  +=  wm[i].getWeight()  *  2  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    int    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	40	None	replace
420	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	61	None	replace
421	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(problem);  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(problem);  if(problem!=  null)  {  return  problem.getRMS(problem);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  EstimationProblem  problem  =  problems[i].getRMS(problem);  if(problem!=  null)  {  return  problem.getRMS(problem);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    EstimationProblem    problem    =    problems[i].getMeasurements();    if(problem!=    null)    {    return    problem.getRMS(problem);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
422	[BUG]  [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  factor  +  residual;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterian  criterion  =  wm[i].getWeight()  *  factor  +  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterian  criterion  =  wm[i].getWeight()  *  factor  +  residual;	  Criterian    criterion    =    wm[i].getWeight()    *    residual    *    factor;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
423	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getMeasurements()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getMeasurements()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getMeasurements()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
424	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getRight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getRight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getRight()  *  cost  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
425	[BUG]  [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getResidual()  *  result  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [CE]  cannot  find  symbol  result  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getWeight()  *  cost  *  residual;  criterion  +=  wm[i].getResidual()  *  result  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion        +=        wm[i].getWeight()        *        cost        *        residual;        criterion    +=    wm[i].getWeight()    *    cost    *    residual;    criterion  +=  wm[i].getResidual()  *  result  *  residual;  criterion  +=  wm[i].getWeight()  *  cost  *  residual;	  	non-compiled	[CE]  cannot  find  symbol  result	38	None	add
426	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;  [CE]  cannot  find  symbol  Criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  problem;	  Criterion    +=    wm[i].getWeight()    *    residual    *    problem;    	non-compiled	[CE]  cannot  find  symbol  Criterion	34	None	replace
427	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  cannot  find  symbol  Criterion  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion    +=    wm[i].getWeight()    *    criterion    *    residual;    Criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  	non-compiled	[CE]  cannot  find  symbol  Criterion	3	None	add
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterian  +=  wm[i].getWeight()  *  Math.sqrt(variable  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterian    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	63	None	replace
429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	criterion  +=  wm[i].getWeight()  *  3  *  residual;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
430	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  3  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  3  *  residual;	  criterion    +=    wm[i].getWeight()    *    2    *    residual;    	compilable	  [FE]  AssertionFailedError  	2	5	replace
431	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;	  Criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    	non-compiled	[CE]  cannot  find  symbol  Criterion	28	None	replace
432	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getRsidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
433	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(result  ==  0)  {  throw  new  IllegalArgumentException( " ".);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(result    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
434	[BUG]  [BUGGY]  result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [CE]  not  a  statement  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	result  *  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  result  *  residual;  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    result    *    criterion;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
435	[BUG]  [BUGGY]  quarters  >  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  quarters  >  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	quarters  >  2)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(remainder  *  factor);  }	  quarters    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  not  a  statement	53	None	replace
436	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	For(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(remainder  *  factor);  }	  For(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(remainder    *    factor);    }    	non-compiled	[CE]  '.class'  expected	52	None	replace
437	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining,  coefficient);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining,  coefficient);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(remaining,  coefficient);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
438	[BUG]  [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining,  factor);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  parameters.get(remaining,  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  parameters.get(remaining,  factor);	  RectangleEdge    wm    =    parameters.get(remaining);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
439	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  factor  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criteria    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  factor	79	None	replace
440	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [CE]  cannot  find  symbol  Criterion  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Criterion  +=  wm[i].getWeight()  *  factor  *  residual;  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criteria  +=  wm[i].getWeight()  *  cost  *  residual;  }	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criteria    +=    wm[i].getWeight()    *    cost    *    residual;    }    	non-compiled	[CE]  cannot  find  symbol  Criterion	79	None	replace
441	[BUG]  [BUGGY]  RectangleEdge  wm  =  wm.getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  wm.getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  wm.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
442	[BUG]  [BUGGY]  RectangleEdge  wm  =  problems.getMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  RectangleEdge  wm  =  problems.getMeasurements();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	RectangleEdge  wm  =  problems.getMeasurements();	  RectangleEdge    wm    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
443	[BUG]  [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	if(remaining  <  =  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  double  criterion  =  wm[i].getResidual();  if(criterion  >  0)  {  return  Math.	          if(remaining    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    double    criterion    =    wm[i].getResidual();    if(criterion    >    0)    {    return    Math.sqrt    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
444	[BUG]  [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  +=  wm[i].getWeight()  *  criterion  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	43	None	replace
445	[BUG]  [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  result  *  residual;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  double  criterion  +=  wm[i].getWeight()  *  result  *  residual;  [BUGGY]      }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	double  criterion  +=  wm[i].getWeight()  *  result  *  residual;	  criterion    +=    wm[i].getWeight()    *    cost    *    residual;    double    criterion    +=    wm[i].getWeight()    *    cost    *    residual;    	non-compiled	[CE]  ';'  expected	43	None	replace
446	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(variant  *  residual);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(variant  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(variant  *  residual);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
447	[BUG]  [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor,  cost);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor,  cost);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	CercetaredWrapper  criterion  =  Math.sqrt(remainder  *  factor,  cost);	  CercetaredWrapper    criterion    =    Math.sqrt(remainder    *    factor);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
448	[BUG]  [BUGGY]  Resultate  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  Resultate  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	Resultate  >  0)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.sqrt(result);  }	  result    >    0)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.sqrt(result);    }    	non-compiled	[CE]  not  a  statement	88	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  Math.cos(reciterion  *  wm.length);  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    Math.cos(remainder    *    wm.length);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	replace
450	[BUG]  [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  factor;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  factor;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	foundRaw(result)  {  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  period  *  factor;  }	  foundRaw(result)    {    for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    factor;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
451	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length  -  1,  ++i)  {  double  criterion  =  wm[i].getWeight();  criterion  +=  Math.sqrt(result);  }	  for(int    i    =    0;    i    <    wm.length    -    1;    ++i)    {    double    criterion    =    wm[i].getWeight();    criterion    +=    Math.sqrt(result);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;  }  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();      [BUGGY]  for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	for(int  i  =  0;  i  <  wm.length;  ++i)  {  criterion  +=  wm[i].getWeight()  *  factor  *  residual  *  criterion;  }	  for(int    i    =    0;    i    <    wm.length;    ++i)    {    criterion    +=    wm[i].getWeight()    *    residual    *    criterion;    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
