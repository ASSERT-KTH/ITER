bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRangeParameters();	  final    int[][]    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	replace
2	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRangeParameters().length  +  1;	  final    int[][]    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	replace
3	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRangeParameters().length  -  1;	  final    int[][]    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	replace
4	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  /  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns().length  /  1;	  final    int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
5	[BUG]  [BUGGY]  final  int  cols  =  problems.getColumns().length  -  1;  [CE]  cannot  find  symbol  problems  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getColumns().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getColumns().length  -  1;	  final    int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  cannot  find  symbol  problems	38	None	replace
6	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows().length  -  1;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getRows().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows().length  -  1;	  final    int    cols    =    problem.getColumns().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  /  2;	  final    int    cols    =    problem.getAllParameters().length    /    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
8	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  /  2;	  final    int    cols    =    problem.getAllParameters().length    /    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	replace
9	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  final  int  residuals  =  problem.getAllParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  final  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    residuals    =    problem.getAllParameters().length    -    1;    final  int  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	24	None	add
10	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  Final  int  residuals  =  problem.getAllParameters().length  -  1;  [CE]  not  a  statement  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  Final  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    residuals    =    problem.getAllParameters().length    -    1;    Final  int  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  not  a  statement	24	None	add
11	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    residuals    =    problem.getAllParameters().length    -    1;    int  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	24	None	add
12	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  final  int  residuals  =  problem.getallParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  final  int  residuals  =  problem.getallParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    residuals    =    problem.getAllParameters().length    -    1;    final  int  residuals  =  problem.getallParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	24	None	add
13	[BUG]  [BUGGY]  final  int  cols  =  problems.getColumns();  [CE]  cannot  find  symbol  problems  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getColumns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getColumns();	  final    int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol  problems	36	None	replace
14	[BUG]  [BUGGY]  final  int  cols  =  problem.columns();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.columns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.columns();	  final    int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
15	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	45	1	replace
16	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	45	1	replace
17	[BUG]  [BUGGY]  null  residuals  =  problem.getAllParameters().length;  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  null  residuals  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	null  residuals  =  problem.getAllParameters().length;	          final    int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	45	None	replace
18	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  /  1  +  rows;	  final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
19	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1  +  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  /  1  +  rows;	  final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	71	1	replace
20	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;  [CE]  cannot  find  symbol  columns  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;	  final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    	non-compiled	[CE]  cannot  find  symbol  columns	71	None	replace
21	[BUG]  [BUGGY]  int  residuals  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows();	  int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
22	[BUG]  [BUGGY]  int  residuals  =  problem.getRows(),  rows.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRows(),  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows(),  rows.length;	  int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	12	None	replace
23	[BUG]  [BUGGY]  int  residuals  =  problem.getRows().length  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRows().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows().length  -  1;	  int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Integer  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	Integer  cols  =  problem.getAllParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
25	[BUG]  [BUGGY]  Integer  cols  =  problem.getAllParameters().length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Integer  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Integer  cols  =  problem.getAllParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	1	replace
26	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	add
27	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  columns;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  columns;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getAllParameters().length  +  columns;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	add
28	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getAllParameters().length  +  rows);	  	non-compiled	[CE]  ';'  expected	81	None	add
29	[BUG]  [BUGGY]  final  int  cols  =  problem.getallParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getallParameters().length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getallParameters().length  -  1;	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    cols    =    problem.getallParameters().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
30	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length  -  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows(),  rows.length  -  1;	  final    int    cols    =    problem.getRows(),    rows.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows(),  rows.length  +  1;	  final    int    cols    =    problem.getRows(),    rows.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  /  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters().length  /  1;	  int[][]    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	replace
33	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  -  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters().length  -  2;	  int[][]    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	replace
34	[BUG]  [BUGGY]  int[][]  rows  =  problem.getVars();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getVars();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getVars();	  int[][]    rows    =    problem.getAllParameters();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
35	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getAllParameters().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    final  int  cols  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	add
36	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	add
37	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getAllParameters().length  -  rows);  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getAllParameters().length  -  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    final  int  cols  =  problem.getAllParameters().length  -  rows);	  	non-compiled	[CE]  ';'  expected	77	None	add
38	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  Final  int  cols  =  problem.getAllParameters().length  -  rows;  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  Final  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    Final  int  cols  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  not  a  statement	77	None	add
39	[BUG]  [BUGGY]  Final  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  not  a  statement  [FE]            EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Final  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Final  int  cols  =  problem.getAllParameters().length  -  1;	  final    int    cols    =    problem.getAllParameters().length    -    1;    Final    int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  not  a  statement	10	None	replace
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  /  1;	  int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
41	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  /  1;	  int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
42	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  cols  =  problem.getAllParameters().length  -  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    2;    final  int  cols  =  problem.getAllParameters().length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	add
43	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  Final  int  cols  =  problem.getAllParameters().length  -  2;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  Final  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    2;    Final  int  cols  =  problem.getAllParameters().length  -  2;	  	non-compiled	[CE]  not  a  statement	51	None	add
44	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  int  cols  =  problem.getAllParameters().length  -  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    2;    int  cols  =  problem.getAllParameters().length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	add
45	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  rows  =  problem.getAllParameters().length  -  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  rows  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    2;    final  int  rows  =  problem.getAllParameters().length  -  2;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	add
46	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  1;  final  int  rows  =  problem.getAllParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    final    int    rows    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
47	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    final    int    rows    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
48	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRangeParameters();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRangeParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRangeParameters();	  final    int    residuals    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
49	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRangeParameters(),  parameters.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRangeParameters(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRangeParameters(),  parameters.length;	  final    int    residuals    =    problem.getRangeParameters().length;    	non-compiled	[CE]  ';'  expected	54	None	replace
50	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRangeParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRangeParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRangeParameters().length  -  1;	  final    int    residuals    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
51	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  /  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRows().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  /  1;	  final    int[][]    rows    =    problem.getRows().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
52	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  +  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRows().length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  +  2;	  final    int[][]    rows    =    problem.getRows().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
53	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Integer  residuals  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	Integer  residuals  =  problem.getAllParameters().length;	          int    residuals    =    problem.getAllParameters().length;    Integer    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	72	1	replace
54	[BUG]  [BUGGY]  Integer  residuals  =  problem.getAllParameters().length;  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Integer  residuals  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Integer  residuals  =  problem.getAllParameters().length;	          int    residuals    =    problem.getAllParameters().length;    Integer    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	72	1	replace
55	[BUG]  [BUGGY]  Integer  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Integer  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Integer  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;	  final    int    cols    =    problem.getAllParameters().length    -    1;    int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	replace
56	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainingParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters();	  int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
57	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainingParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters().length  -  1;	  int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
58	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters().length  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainingParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters().length  +  1;	  int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
59	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRows();	  final    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
60	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRows(),  rows;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRows(),  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRows(),  rows;	  final    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
61	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRows(),  rows.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRows(),  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRows(),  rows.length;	  final    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	22	None	replace
62	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  rows);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns(),  rows);  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  rows);	  final    int    cols    =    problem.getRows(),    rows);    	non-compiled	[CE]  ';'  expected	83	None	replace
63	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows(),  rows  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getRows(),  rows  +  1);  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows(),  rows  +  1);	  final    int    cols    =    problem.getRows(),    rows);    	non-compiled	[CE]  ';'  expected	83	None	replace
64	[BUG]  [BUGGY]  int  cols  =  problem.getColumns(),  rows);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getColumns(),  rows);  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getColumns(),  rows);	  final    int    cols    =    problem.getRows(),    rows);    	non-compiled	[CE]  ';'  expected	83	None	replace
65	[BUG]  [BUGGY]  Final  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Final  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Final  int  cols  =  problem.getAllParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    Final    int    cols    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
66	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  /  rows;	  int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
67	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  /  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  /  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  /  rows;	  int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  /  rows;	  final    int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  AssertionFailedError  	78	1	replace
69	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  rows;  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  /  rows;	  final    int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  AssertionFailedError  	78	1	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  -  rows  +  1;	  final    int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
71	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  rows  +  1;	  final    int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
72	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows.getAllParameters().length;  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows.getAllParameters().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  rows.getAllParameters().length;	  final    int    cols    =    rows.getAllParameters().length    +    problem.getAllParameters().length;    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
73	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns.getAllParameters().length;  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns.getAllParameters().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  columns.getAllParameters().length;	  final    int    cols    =    rows.getAllParameters().length    +    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  columns	18	None	replace
74	[BUG]  [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  problem.getAllParameters().length;  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  problem.getAllParameters().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getAllParameters().length  +  problem.getAllParameters().length;	  final    int    cols    =    rows.getAllParameters().length    +    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  problems	18	None	replace
75	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  fields.getAllParameters().length;  [CE]  cannot  find  symbol  fields  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  fields.getAllParameters().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  fields.getAllParameters().length;	  final    int    cols    =    rows.getAllParameters().length    +    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  fields	18	None	replace
76	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  rows.length  -  1;	  final    int    cols    =    problem.getColumns(),    rows.length;    	non-compiled	[CE]  ';'  expected	61	None	replace
77	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  rows.length  +  1;	  final    int    cols    =    problem.getColumns(),    rows.length;    	non-compiled	[CE]  ';'  expected	61	None	replace
78	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  rows;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns(),  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  rows;	  final    int    cols    =    problem.getColumns(),    rows.length;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
79	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	79	None	add
80	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows);  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getAllParameters().length  -  rows);	  	non-compiled	[CE]  ';'  expected	79	None	add
81	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  columns;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  columns;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getAllParameters().length  -  columns;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	79	None	add
82	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  fields;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getAllParameters().length  -  fields;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getAllParameters().length  -  fields;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	79	None	add
83	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  residuals  =  problem.getAllParameters().length  -  2;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
84	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  2;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length  -  2;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
85	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  -  2;	  final    int[][]    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
86	[BUG]  [BUGGY]  int  cols  =  problem.getColumns();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getColumns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getColumns();	  int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
87	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getColumns().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getColumns().length  -  1;	  int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
88	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getColumns().length  +  1;	  int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
89	[BUG]  [BUGGY]  int  residuals  =  problem.getRealm().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRealm().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRealm().length;	          int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getRealm().length;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
90	[BUG]  [BUGGY]  final  int  cols  =  problem.getCols();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getCols();  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getCols();	  final    int    cols    =    problem.getCols().length;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
91	[BUG]  [BUGGY]  final  int  cols  =  problem.getCols(),  rows.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getCols(),  rows.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getCols(),  rows.length;	  final    int    cols    =    problem.getCols().length;    	non-compiled	[CE]  ';'  expected	1	None	replace
92	[BUG]  [BUGGY]  final  int  cols  =  problems.getCols().length;  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getCols().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getCols().length;	  final    int    cols    =    problem.getCols().length;    	non-compiled	[CE]  cannot  find  symbol  problems	1	None	replace
93	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
94	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
95	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    final  int  cols  =  problem.getAllParameters().length  -  1  +  columns;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
96	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    int  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
97	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  Integer  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  Integer  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    Integer  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
98	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getallParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getallParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    int  cols  =  problem.getallParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
99	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  issue.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  issue.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    int  cols  =  issue.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
100	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRemainingParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters();	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
101	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRemainingParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters().length  -  1;	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
102	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  parameters.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters(),  parameters.length;	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  ';'  expected	23	None	replace
103	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  residuals  =  problem.getAllParameters().length  /  1;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
104	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  /  1;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getAllParameters().length  /  1;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
105	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  residuals  =  problem.getAllParameters().length  -  2;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
106	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  2;  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getAllParameters().length  -  2;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
107	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    int  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
108	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  Integer  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  Integer  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    Integer  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
109	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getallParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getallParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    int  cols  =  problem.getallParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
110	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  issue.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  issue.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    int  cols  =  issue.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
111	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  +  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters().length  +  2;	  int[][]    rows    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	66	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  -  rows  +  1;	  int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  AssertionFailedError  	80	1	replace
113	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  -  rows  +  1;	  int    cols    =    problem.getAllParameters().length    -    rows;    	compilable	  [FE]  AssertionFailedError  	80	1	replace
114	[BUG]  [BUGGY]  final  int  residuals  =  problem.getVariances().length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getVariances().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getVariances().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
115	[BUG]  [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
116	[BUG]  [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
117	[BUG]  [BUGGY]  int  residuals  =  problem.getVariances().length;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getVariances().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getVariances().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
118	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  /  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters().length  /  1;	  final    int[][]    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
119	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  -  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters().length  -  2;	  final    int[][]    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
120	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException();	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
121	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
122	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    /    1;    final  int  cols  =  problem.getAllParameters().length  /  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	add
123	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  cols  =  problem.getAllParameters().length  /  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  cols  =  problem.getAllParameters().length  /  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    /    1;    final  int  cols  =  problem.getAllParameters().length  /  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	add
124	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  Final  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  Final  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    /    1;    Final  int  cols  =  problem.getAllParameters().length  /  1;	  	non-compiled	[CE]  not  a  statement	31	None	add
125	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  int  cols  =  problem.getAllParameters().length  /  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    /    1;    int  cols  =  problem.getAllParameters().length  /  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	add
126	[BUG]  [BUGGY]  final  int  cols  =  problems.getRows();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getRows();  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getRows();	  final    int    cols    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol  problems	2	None	replace
127	[BUG]  [BUGGY]  null  residuals  =  problem.getRemainingParameters().length;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  null  residuals  =  problem.getRemainingParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	null  residuals  =  problem.getRemainingParameters().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  not  a  statement	75	None	replace
128	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealmParameters();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRealmParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealmParameters();	  final    int    residuals    =    problem.getRealmParameters().length;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
129	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealmParameters(),  parameters.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRealmParameters(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealmParameters(),  parameters.length;	  final    int    residuals    =    problem.getRealmParameters().length;    	non-compiled	[CE]  ';'  expected	55	None	replace
130	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealmParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRealmParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealmParameters().length  -  1;	  final    int    residuals    =    problem.getRealmParameters().length;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
131	[BUG]  [BUGGY]  int[][]  rows  =  problem.getRows().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getRows().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getRows().length  -  1;	  int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	4	None	replace
132	[BUG]  [BUGGY]  int[][]  rows  =  problem.getRows().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getRows().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getRows().length  +  1;	  int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	4	None	replace
133	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getAllParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    final  int  cols  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	add
134	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getAllParameters().length  +  columns;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getAllParameters().length  +  columns;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    final  int  cols  =  problem.getAllParameters().length  +  columns;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	add
135	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	add
136	[BUG]  [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  problem.length;  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  problem.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getAllParameters().length  +  problem.length;	  final    int    cols    =    rows.getAllParameters().length    +    problem.length;    	non-compiled	[CE]  cannot  find  symbol  problems	68	None	replace
137	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns;  [CE]  cannot  find  symbol  columns  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  columns;	  final    int    cols    =    rows.getAllParameters().length    +    problem.length;    	non-compiled	[CE]  cannot  find  symbol  columns	68	None	replace
138	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealms().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRealms().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealms().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRealms().length;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
139	[BUG]  [BUGGY]  int  residuals  =  problem.getRealms().length;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRealms().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRealms().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRealms().length;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
140	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getParameters();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getParameters();	  final    int[][]    rows    =    problem.getAllParameters();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	replace
141	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getVars();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getVars();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getVars();	  final    int[][]    rows    =    problem.getAllParameters();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  -  2;	  int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
143	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  -  2;	  int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
144	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    int  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
145	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  Integer  residuals  =  problem.getAllParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  Integer  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    Integer  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
146	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getallParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getallParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    int  residuals  =  problem.getallParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
147	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  2;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    int  residuals  =  problem.getAllParameters().length  -  2;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
148	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  +  2;	  final    int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
149	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  2;	  final    int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
150	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getRows().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  problem.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
151	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  row.getRows().length;  [CE]  cannot  find  symbol  row  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  row.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  row.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  row	84	None	replace
152	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  jTj.getRows().length;  [CE]  cannot  find  symbol  jTj  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  jTj.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  jTj.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  jTj	84	None	replace
153	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  field.getRows().length;  [CE]  cannot  find  symbol  field  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  field.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  field.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  field	84	None	replace
154	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
155	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  +  2;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters().length  +  2;	  final    int[][]    rows    =    problem.getAllParameters().length    +    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
156	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainderParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters();	  int    residuals    =    problem.getRemainderParameters().length;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
157	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainderParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters().length  -  1;	  int    residuals    =    problem.getRemainderParameters().length;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
158	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters().length  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainderParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters().length  +  1;	  int    residuals    =    problem.getRemainderParameters().length;    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
159	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	replace
160	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  columns.length;  [CE]  cannot  find  symbol  columns  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  columns.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  columns.length;	  int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  columns	53	None	replace
161	[BUG]  [BUGGY]  boolean  residuals  =  problem.getAllParameters().length;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  boolean  residuals  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	boolean  residuals  =  problem.getAllParameters().length;	          int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  incompatible  types	47	None	replace
162	[BUG]  [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  }  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  remainings	45	None	replace
163	[BUG]  [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [CE]  cannot  find  symbol  remainings  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol  remainings	43	None	replace
164	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  columns;  [CE]  cannot  find  symbol  columns  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  columns;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  columns;	  int    cols    =    problem.getAllParameters().length    +    rows;    	non-compiled	[CE]  cannot  find  symbol  columns	82	None	replace
165	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters(),  rows.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainingParameters(),  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters(),  rows.length;	  int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  ';'  expected	13	None	replace
166	[BUG]  [BUGGY]  final  int  residuals  =  problems.getRows().length;  [CE]  cannot  find  symbol  problems  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problems.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problems.getRows().length;	  final    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  problems	22	None	replace
167	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getColumns().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getColumns().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  problem.getColumns().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
168	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getCols().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  problem.getCols().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  problem.getCols().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
169	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  Final  int  cols  =  problem.getAllParameters().length  +  rows;  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  Final  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    Final  int  cols  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  not  a  statement	20	None	add
170	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  rows  =  problem.getAllParameters().length  +  rows;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  rows  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    final  int  rows  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	add
171	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  boolean  residuals  =  problem.getAllParameters().length  -  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  boolean  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    boolean  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
172	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  +  1;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  int  residuals  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    int  residuals  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	14	None	add
173	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getColumns().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getColumns().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getColumns().length  +  1;	  final    int[][]    rows    =    problem.getColumns().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	74	None	replace
174	[BUG]  [BUGGY]  int[][]  rows  =  problem.getMeasurements();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getMeasurements();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getMeasurements();	  int[][]    rows    =    problem.getAllParameters();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
175	[BUG]  [BUGGY]  final  int  residuals  =  problem.getALLParameters().length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getALLParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getALLParameters().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getALLParameters().length;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
176	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  rows  =  problem.getAllParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    int  rows  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
177	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    int  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
178	[BUG]  [BUGGY]  Final  int  cols  =  problem.getColumns().length;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Final  int  cols  =  problem.getColumns().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Final  int  cols  =  problem.getColumns().length;	  final    int    cols    =    problems.getColumns().length;    	non-compiled	[CE]  not  a  statement	37	None	replace
179	[BUG]  [BUGGY]  final  int  residuals  =  problems.getRealmParameters().length;  [CE]  cannot  find  symbol  problems  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problems.getRealmParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problems.getRealmParameters().length;	  final    int    residuals    =    problem.getRealmParameters().length;    	non-compiled	[CE]  cannot  find  symbol  problems	55	None	replace
180	[BUG]  [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	8	None	replace
181	[BUG]  [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {  [CE]  illegal  start  of  expression  [FE]          EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
182	[BUG]  [BUGGY]  final  int  cols  =  problem.getallParameters().length  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getallParameters().length  +  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getallParameters().length  +  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    final    int    cols    =    problem.getallParameters().length    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
183	[BUG]  [BUGGY]  final  int  residuals  =  problems.getRangeParameters().length;  [CE]  cannot  find  symbol  problems  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problems.getRangeParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problems.getRangeParameters().length;	  final    int    residuals    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol  problems	54	None	replace
184	[BUG]  [BUGGY]  null  residuals  =  problem.getVariances().length;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  null  residuals  =  problem.getVariances().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	null  residuals  =  problem.getVariances().length;	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  not  a  statement	76	None	replace
185	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getallParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getallParameters().length  +  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getallParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	add
186	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getallParameters().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  int  cols  =  problem.getallParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    int  cols  =  problem.getallParameters().length  -  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	79	None	add
187	[BUG]  [BUGGY]  null  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [CE]  not  a  statement  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  null  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	null  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  not  a  statement	11	None	replace
188	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  rows  =  problem.getAllParameters().length  -  rows;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  rows  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    final  int  rows  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	add
189	[BUG]  [BUGGY]  final  int  cols  =  parameters.getColumns();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  parameters.getColumns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  parameters.getColumns();	  final    int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
190	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  rows  =  problem.getAllParameters().length  /  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  final  int  rows  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    /    1;    final  int  rows  =  problem.getAllParameters().length  /  1;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	add
191	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ");	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
192	[BUG]  [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }  [CE]  cannot  find  symbol  remainings  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol  remainings	75	None	replace
193	[BUG]  [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }  else  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }  else  {  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  }  else  {	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
194	[BUG]  [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainings  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol  remainings	75	None	replace
195	[BUG]  [BUGGY]  Final  int  residuals  =  problem.getAllParameters().length;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  Final  int  residuals  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	Final  int  residuals  =  problem.getAllParameters().length;	          final    int    residuals    =    problem.getAllParameters().length;    Final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	44	None	replace
196	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainders().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainders().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainders().length;	          int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
197	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  parameters.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  +  parameters.length;	  final    int    cols    =    problem.getAllParameters().length    +    columns.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
198	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  parameters.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  parameters.length;	  final    int    cols    =    problem.getAllParameters().length    +    columns.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	replace
199	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  rows.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters(),  rows.length;	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  ';'  expected	23	None	replace
200	[BUG]  [BUGGY]  final  int  residuals  =  problems.getRemainingParameters().length;  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problems.getRemainingParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problems.getRemainingParameters().length;	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol  problems	23	None	replace
201	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumnsCount(),  rows.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumnsCount(),  rows.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumnsCount(),  rows.length;	  final    int    cols    =    problem.getRows(),    rows.length;    	non-compiled	[CE]  ';'  expected	3	None	replace
202	[BUG]  [BUGGY]  int  residuals  =  problem.getRealmParameters().length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRealmParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRealmParameters().length;	          int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getallParameters().length;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
203	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    InvalidMatrixException  ime  =  ime.getInvalidMatrixException();	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
204	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    int  cols  =  problem.getAllParameters().length  +  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
205	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  residuals  =  problem.getAllParameters().length  /  1;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
206	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  /  1;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length  /  1;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
207	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  columns);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getColumns(),  columns);  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  columns);	  final    int    cols    =    problem.getRows(),    rows);    	non-compiled	[CE]  ';'  expected	83	None	replace
208	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  cols  =  problem.getallParameters().length  -  2;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  final  int  cols  =  problem.getallParameters().length  -  2;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    2;    final  int  cols  =  problem.getallParameters().length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	add
209	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  1  +  rows;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  1  +  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  -  1  +  rows;	  final    int[][]    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
210	[BUG]  [BUGGY]  int  cols  =  problems.getAllParameters().length  +  rows.length;  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problems.getAllParameters().length  +  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problems.getAllParameters().length  +  rows.length;	  int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  problems	53	None	replace
211	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters(),  rows.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainderParameters(),  rows.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters(),  rows.length;	  int    residuals    =    problem.getRemainderParameters().length;    	non-compiled	[CE]  ';'  expected	65	None	replace
212	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  Final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  Final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    Final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  	non-compiled	[CE]  not  a  statement	70	None	add
213	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  rows  =  problem.getAllParameters().length  -  1  +  rows;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  rows  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    final  int  rows  =  problem.getAllParameters().length  -  1  +  rows;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
214	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  rows  =  problem.getAllParameters().length  -  1  +  cols;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  rows  =  problem.getAllParameters().length  -  1  +  cols;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    final  int  rows  =  problem.getAllParameters().length  -  1  +  cols;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
215	[BUG]  [BUGGY]  int  cols  =  problems.getColumns().length;  [CE]  cannot  find  symbol  problems  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problems.getColumns().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problems.getColumns().length;	  int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol  problems	30	None	replace
216	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRealms().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
217	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  cols  =  problem.getRealms().length;  }  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  cols  =  problem.getRealms().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  cols  =  problem.getRealms().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRealms().length;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
218	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRealms().length;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRealms().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRealms().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRealms().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
219	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  remainings  =  problem.getRemainingParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
220	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRemainingParameters().length;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRemainingParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRemainingParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
221	[BUG]  [BUGGY]  final  int  cols  =  this.problem.getColumns();  [CE]  cannot  find  symbol  problem  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  this.problem.getColumns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  this.problem.getColumns();	  final    int    cols    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol  problem	36	None	replace
222	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  Int  residuals  =  problem.getAllParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  Int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    residuals    =    problem.getAllParameters().length    -    1;    Int  residuals  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
223	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  float  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  float  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    1;    float  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	26	None	add
224	[BUG]  [BUGGY]  int[][]  rows  =  problem.getParameters();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getParameters();	  int[][]    rows    =    problem.getAllParameters();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	17	None	replace
225	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getALLParameters().length;  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getALLParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getALLParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getALLParameters().length;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
226	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  residuals  =  problem.getAllParameters().length  -  rows;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
227	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  rows;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getAllParameters().length  -  rows;	  final    int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	25	1	replace
228	[BUG]  [BUGGY]  int[][]  rows  =  problem.getColumns().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int[][]  rows  =  problem.getColumns().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getColumns().length;	  int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	4	None	replace
229	[BUG]  [BUGGY]  boolean  residuals  =  problem.getAllParameters().length;  int  rows  =  problem.getRows().length;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  boolean  residuals  =  problem.getAllParameters().length;  int  rows  =  problem.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	boolean  residuals  =  problem.getAllParameters().length;  int  rows  =  problem.getRows().length;	          int    residuals    =    problem.getAllParameters().length;    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  incompatible  types	49	None	replace
230	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealmParameters(),  rows);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRealmParameters(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealmParameters(),  rows);	  final    int    residuals    =    problem.getRealmParameters().length;    	non-compiled	[CE]  ';'  expected	55	None	replace
231	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  row;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  final  int  cols  =  problem.getAllParameters().length  -  1  +  row;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1    +    rows;    final  int  cols  =  problem.getAllParameters().length  -  1  +  row;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	add
232	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  residuals  =  problem.getAllParameters().length  -  rows;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
233	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  rows;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length  -  rows;	  int    residuals    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  EstimationException  	15	1	replace
234	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  }  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  }	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    rows    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	replace
235	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  float  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  float  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    1;    float  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	add
236	[BUG]  [BUGGY]  final  int  cols  =  problem.getCols(),  rows);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getCols(),  rows);  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getCols(),  rows);	  final    int    cols    =    problem.getRows(),    rows);    	non-compiled	[CE]  ';'  expected	83	None	replace
237	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getallParameters().length  -  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  final  int  cols  =  problem.getallParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    rows;    final  int  cols  =  problem.getallParameters().length  -  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	77	None	add
238	[BUG]  [BUGGY]  final  int  cols  =  parameters.getRows();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  parameters.getRows();  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  parameters.getRows();	  final    int    cols    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
239	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows.getRows().length;  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  rows.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  int  cannot  be  dereferenced	84	None	replace
240	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  task.getRows().length;  [CE]  cannot  find  symbol  task  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  task.getRows().length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  task.getRows().length;	  final    int    cols    =    row.getAllParameters().length    +    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  task	84	None	replace
241	[BUG]  [BUGGY]  int  cols  =  row.getAllParameters().length  +  problem.getAllParameters().length;  [CE]  cannot  find  symbol  row  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  row.getAllParameters().length  +  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  row.getAllParameters().length  +  problem.getAllParameters().length;	  int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  row	53	None	replace
242	[BUG]  [BUGGY]  int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;	  int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
243	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  +  rows  *  rows;	  int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
244	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  rows  *  rows;	  int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
245	[BUG]  [BUGGY]  if(remainders  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [CE]  cannot  find  symbol  remainders  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(remainders  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(remainders  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  rows  =  problem.getRows().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getallParameters().length;    	non-compiled	[CE]  cannot  find  symbol  remainders	59	None	replace
246	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  else  {  final  int  rows  =  problem.getRows().length;  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  else  {  final  int  rows  =  problem.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  else  {  final  int  rows  =  problem.getRows().length;	          final    int    residuals    =    problem.getAllParameters().length;    Final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
247	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	if(problem.getAllParameters()  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	43	1	replace
248	[BUG]  [BUGGY]  if(problem.getAllParameters()  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getAllParameters()  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getAllParameters()  ==  null)  {  final  int  residuals  =  problem.getAllParameters().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	43	1	replace
249	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  Integer  cols  =  problem.getAllParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  Integer  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    Integer  cols  =  problem.getAllParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	add
250	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  row;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  int  cols  =  problem.getAllParameters().length  +  row;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    +    rows;    int  cols  =  problem.getAllParameters().length  +  row;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	add
251	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters(),  rows);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainingParameters(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters(),  rows);	  int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  ';'  expected	13	None	replace
252	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRangeParameters(),  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRangeParameters(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRangeParameters(),  rows);	  final    int    residuals    =    problem.getRangeParameters().length;    	non-compiled	[CE]  ';'  expected	54	None	replace
253	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  incompatible  types	62	None	replace
254	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  fields.length;  [CE]  cannot  find  symbol  fields  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  fields.length;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  fields.length;	  final    int    cols    =    problem.getAllParameters().length    +    columns.length;    	non-compiled	[CE]  cannot  find  symbol  fields	19	None	replace
255	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getColumns().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int[][]  rows  =  problem.getColumns().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getColumns().length  -  1;	  final    int[][]    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	34	None	replace
256	[BUG]  [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {  throw  new  EstimationException( " ");  }  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {  throw  new  EstimationException( " ");  }  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(rows  <  0)  {  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  }  else  {  throw  new  EstimationException( " ");  }	  final    int    cols    =    problem.getAllParameters().length    -    1;    final    int    cols    =    problem.getAllParameters().length    -    1;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	8	None	replace
257	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  Int  cols  =  problem.getAllParameters().length  -  rows;  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  Int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int    cols    =    problem.getAllParameters().length    -    rows;    Int  cols  =  problem.getAllParameters().length  -  rows;	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
258	[BUG]  [BUGGY]  int  residuals  =  problem.getRows(),  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRows(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows(),  rows);	  int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	12	None	replace
259	[BUG]  [BUGGY]  int  residuals  =  problem.getRows(),  rows;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRows(),  rows;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows(),  rows;	  int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
260	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  rows);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRemainingParameters(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters(),  rows);	  final    int    residuals    =    problem.getRemainingParameters().length;    	non-compiled	[CE]  ';'  expected	23	None	replace
261	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRows(),  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  residuals  =  problem.getRows(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRows(),  rows);	  final    int    residuals    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	22	None	replace
262	[BUG]  [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  row  =  problem.getVariances().length;  }  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  row  =  problem.getVariances().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  row  =  problem.getVariances().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
263	[BUG]  [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  variables  =  problem.getVariances().length;  }  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  variables  =  problem.getVariances().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	if(problem.getVariances()!=  null)  {  final  int  residuals  =  problem.getAllParameters().length;  final  int  variables  =  problem.getVariances().length;  }	          final    int    residuals    =    problem.getAllParameters().length;    final    int    residuals    =    problem.getVariances().length;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
264	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getallParameters().length  +  rows;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  final  int  cols  =  problem.getallParameters().length  +  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    rows;    final  int  cols  =  problem.getallParameters().length  +  rows;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	20	None	add
265	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters();  InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");	          int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  incompatible  types	64	None	replace
266	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters(),  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  int  residuals  =  problem.getRemainderParameters(),  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters(),  rows);	  int    residuals    =    problem.getRemainderParameters().length;    	non-compiled	[CE]  ';'  expected	65	None	replace
267	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;	  final    int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
268	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;      [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;  [BUGGY]      final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  rows  *  rows;	  final    int    cols    =    problem.getAllParameters().length    +    rows;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
