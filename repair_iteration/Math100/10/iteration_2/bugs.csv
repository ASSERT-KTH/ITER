bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  cols  =  problem.getCols().length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getCols().length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getCols().length;	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
2	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getRows();  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows();	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
3	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getRows(),  rows.length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows(),  rows.length;	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  int[][]  rows  =  problem.getRows().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int[][]  rows  =  problem.getRows().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getRows().length;	      int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	18	None	replace
5	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters().length  -  1;	      int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	18	None	replace
6	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getColumns();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getColumns();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getColumns();	      final    int[][]    rows    =    problem.getRows();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
7	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getAllParameters();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters();	      final    int[][]    rows    =    problem.getRows();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	2	None	replace
8	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1;    final  int  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
9	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1;    int  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
10	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  Final  int  cols  =  problem.getAllParameters().length  -  1;  [CE]  not  a  statement  [FE]        EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  Final  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1;    Final  int  cols  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
11	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1;    final  int  rows  =  problem.getAllParameters().length  -  1;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
12	[BUG]  [BUGGY]  int  residuals  =  problem.getRows().length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  residuals  =  problem.getRows().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRows().length;	      int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
13	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainingParameters().length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  residuals  =  problem.getRemainingParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainingParameters().length;	      int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
14	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  residuals  =  problem.getAllParameters().length  -  1;	      int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	12	1	replace
15	[BUG]  [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getAllParameters().length  -  1;	      int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	12	1	replace
16	[BUG]  [BUGGY]  int[][]  rows  =  problem.getColumns();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int[][]  rows  =  problem.getColumns();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getColumns();	      int[][]    rows    =    problem.getRows();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	replace
17	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int[][]  rows  =  problem.getAllParameters();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters();	      int[][]    rows    =    problem.getRows();    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	replace
18	[BUG]  [BUGGY]  final  int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;  [CE]  int  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  rows.getAllParameters().length  +  problem.getAllParameters().length;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
19	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns.length;  [CE]  cannot  find  symbol  columns  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  columns.length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  columns.length;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  columns	17	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  +  rows;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	replace
21	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  +  rows;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	replace
22	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRows().length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getRows().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRows().length;	      final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
23	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRemainingParameters().length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getRemainingParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRemainingParameters().length;	      final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
24	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  residuals  =  problem.getAllParameters().length  -  1;	      final    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	14	1	replace
25	[BUG]  [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getAllParameters().length  -  1;	      final    int    residuals    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	14	1	replace
26	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  -  1;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	3	1	replace
27	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  -  1;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	3	1	replace
28	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  +  1;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
29	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  1;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
30	[BUG]  [BUGGY]  int  cols  =  problem.getColumns().length;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getColumns().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getColumns().length;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  /  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
32	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  /  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  /  1;	  final    int    cols    =    problem.getAllParameters().length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
33	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters().length  -  1;	      final    int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	15	None	replace
34	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getRows().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  -  1;	      final    int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	16	None	replace
35	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRows().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getRows().length  +  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRows().length  +  1;	      final    int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	16	None	replace
36	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getColumns();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns();	      final    int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
37	[BUG]  [BUGGY]  final  int  cols  =  problems.getColumns().length;  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problems.getColumns().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getColumns().length;	      final    int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol  problems	4	None	replace
38	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns().length  -  1;	      final    int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    1;    final  int  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
40	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    1;    int  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
41	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  Final  int  cols  =  problem.getAllParameters().length  +  1;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  Final  int  cols  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    1;    Final  int  cols  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  not  a  statement	9	None	add
42	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  rows  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    1;    final  int  rows  =  problem.getAllParameters().length  +  1;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
43	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getAllParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getAllParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
44	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  Final  int  residuals  =  problem.getAllParameters().length;  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  Final  int  residuals  =  problem.getAllParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    Final  int  residuals  =  problem.getAllParameters().length;	  	non-compiled	[CE]  not  a  statement	13	None	add
45	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
46	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRealms().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRealms().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getRealms().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
47	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getAllParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
48	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRemainingParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRemainingParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getRemainingParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
49	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRows().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRows().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getRows().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
50	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRealm().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getRealm().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getRealm().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  -  2;	  final    int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
52	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  2;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  2;	  final    int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  AssertionFailedError  	8	1	replace
53	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows.length;  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows.length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  rows.length;	      int    cols    =    problem.getAllParameters().length;    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
54	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRangeParameters().length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getRangeParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRangeParameters().length;	      final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
55	[BUG]  [BUGGY]  final  int  residuals  =  problem.getRealmParameters().length;  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  residuals  =  problem.getRealmParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  residuals  =  problem.getRealmParameters().length;	      final    int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
56	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getAllParameters().length  +  1;	      final    int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	15	None	replace
57	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getRangeParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getRangeParameters().length;	      final    int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	15	None	replace
58	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getallParameters().length  -  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1;  final  int  cols  =  problem.getallParameters().length  -  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    -    1;    final  int  cols  =  problem.getallParameters().length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
59	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getallParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getallParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getallParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
60	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getALLParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getALLParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getALLParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
61	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getColumns(),  rows.length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns(),  rows.length;	      final    int    cols    =    problem.getColumns().length;    	non-compiled	[CE]  ';'  expected	4	None	replace
62	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException  ime  =  ime.getInvalidMatrixException();	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
63	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getallParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getallParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getallParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
64	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    InvalidMatrixException  ime  =  ime.getInvalidMatrixException( " ");	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
65	[BUG]  [BUGGY]  int  residuals  =  problem.getRemainderParameters().length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  residuals  =  problem.getRemainderParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  residuals  =  problem.getRemainderParameters().length;	      int    residuals    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
66	[BUG]  [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  +  1;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int[][]  rows  =  problem.getAllParameters().length  +  1;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int[][]  rows  =  problem.getAllParameters().length  +  1;	      int[][]    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	18	None	replace
67	[BUG]  [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  rows.length;  [CE]  cannot  find  symbol  problems  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problems.getAllParameters().length  +  rows.length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problems.getAllParameters().length  +  rows.length;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  problems	17	None	replace
68	[BUG]  [BUGGY]  final  int  cols  =  rows.getAllParameters().length  +  problem.length;  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  rows.getAllParameters().length  +  problem.length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  rows.getAllParameters().length  +  problem.length;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
69	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  cols  =  problem.getallParameters().length  +  1;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  +  1;  final  int  cols  =  problem.getallParameters().length  +  1;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final    int    cols    =    problem.getAllParameters().length    +    1;    final  int  cols  =  problem.getallParameters().length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  final    int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
71	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  1  +  rows;	  final    int    cols    =    problem.getAllParameters().length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
72	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  Integer  residuals  =  problem.getAllParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  Integer  residuals  =  problem.getAllParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    Integer  residuals  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
73	[BUG]  [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getVariances().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      int  residuals  =  problem.getAllParameters().length;  int  residuals  =  problem.getVariances().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        int    residuals    =    problem.getAllParameters().length;    int  residuals  =  problem.getVariances().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	11	None	add
74	[BUG]  [BUGGY]  final  int[][]  rows  =  problem.getColumns().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int[][]  rows  =  problem.getColumns().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int[][]  rows  =  problem.getColumns().length;	      final    int[][]    rows    =    problem.getRows().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	16	None	replace
75	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getRemainingParameters().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getRemainingParameters().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
76	[BUG]  [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getVariances().length;  [CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]      final  int  residuals  =  problem.getAllParameters().length;  final  int  residuals  =  problem.getVariances().length;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	        final    int    residuals    =    problem.getAllParameters().length;    final  int  residuals  =  problem.getVariances().length;	  	non-compiled	[CE]  variable  residuals  is  already  defined  in  method  getCovariances(EstimationProblem)	13	None	add
77	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	final  int  cols  =  problem.getAllParameters().length  -  rows;	      final    int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  IllegalArgumentException  	1	1	replace
78	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  [FE]  IllegalArgumentException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllParameters().length  -  rows;	      final    int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  IllegalArgumentException  	1	1	replace
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  -  rows;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
80	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  [FE]  IllegalArgumentException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  -  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  -  rows;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	int  cols  =  problem.getAllParameters().length  +  rows;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
82	[BUG]  [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  int  cols  =  problem.getAllParameters().length  +  rows;  [BUGGY]    final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	int  cols  =  problem.getAllParameters().length  +  rows;	      int    cols    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
83	[BUG]  [BUGGY]  final  int  cols  =  problem.getRows(),  rows);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  problem.getRows(),  rows);  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getRows(),  rows);	  final    int    cols    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	6	None	replace
84	[BUG]  [BUGGY]  final  int  cols  =  row.getAllParameters().length  +  problem.getRows().length;  [CE]  cannot  find  symbol  row  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;    [BUGGY]  final  int  cols  =  row.getAllParameters().length  +  problem.getRows().length;  [BUGGY]    final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  row.getAllParameters().length  +  problem.getRows().length;	  final    int    cols    =    problem.getAllParameters().length    +    rows.length;    	non-compiled	[CE]  cannot  find  symbol  row	17	None	replace
