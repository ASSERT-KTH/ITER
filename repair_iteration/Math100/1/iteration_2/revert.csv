projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73incrementJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jocobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rows,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()-cols;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(true);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;Integercols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73init();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initRowEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jocobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnCount()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(true);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobian.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobianEvaluations.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateColumnsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRowsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getRowCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getRowCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getRowCount()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(index,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initMeanEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initSerials();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(this.maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,metrics.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initStandardEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,row);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,columns);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateZeroes();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;Intcols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcols=variables.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;intcols=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;Integercols=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;introws=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;intcolumns=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length/1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()*1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols+1,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols*1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(data,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()/1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initCols();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initFields();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,cols,maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,cols,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(parameters.length,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(random,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73this.resultEvaluations=updateRowEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateColumnEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowEvaluations(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter(rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter(rows,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter(rows,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCounter(rows,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnSize();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rows,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateColumns();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(true);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=variables.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length/2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initRowEvaluations(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,cols);Arrays.fill(jacobian,0,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,cols);Arrays.fill(jocobian,0,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,cols);Arrays.fill(jacobian,0,columns,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,cols);Arrays.fill(jacobian,1,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Intcols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(parameters,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=parameters.copyOf(jacobian,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(parameters,dataset.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(parameters,data.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()/cols;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()-index;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,errorEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,1,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,jacobian,maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jocobian,1);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length;intcols=parameters.length;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length;intcols=variables.length;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length;Integercols=parameters.length;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length;intcols=measurements.length;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;intcols=parameters.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;intcols=variables.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;Integercols=parameters.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;intcolumns=parameters.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowsCount(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRowsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations(this.maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations(this.results);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(this.results);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;intcols=parameters.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;intcolls=parameters.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;intcols=variables.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;intcols=measurements.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(true,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,null,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,null,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jocobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateZeroes();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateZeroes(true);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateZeroes(false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobian.length-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobian.length,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobian.length-index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobian.length+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initStandardEvaluations(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getRowCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,index,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,columns,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(this.maxCostEval+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(this.maxCostEval,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,2);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jocobian,1);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jocobian,1);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColumnCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=this.columns.size();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=this.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,index,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(cols.length,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jocobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=cols.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluationsCounter(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(jacobian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(jocobian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(jacobian,0,cols,CostEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;intcols=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;Integercols=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;intcolls=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;introws=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColsCount()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainings.length,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(cols.length,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73this.resultEvaluations.clear();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73init(this.results);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73this.resultEvaluations.add(jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(remainings,jacobian,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(random,jacobian,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);Arrays.fill(jacobian,0,0);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);Arrays.fill(jocobian,0);Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);Arrays.fill(jacobian,0,Arrays.fill(jacobian,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);Arrays.fill(jacobian,0);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rows,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,residuals);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;intcols=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;Integercols=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;intcolls=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;introws=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,parameters.length-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,parameters.length-index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(parameters,0,jacobian.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,parameters.length+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcols=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;Integercols=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcolls=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;introws=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,index-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColsCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount()/1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,cols.length-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(periods.length,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rows,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rawRows,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initMeanEvaluations(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initStandardMeanEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(jacobian,0,Arrays.length);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(jacobian,0,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(jocobian,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(index,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;this.maxCostEval=Math.min(this.maxCostEval,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;this.maxCostEval=Math.min(this.maxCostEval,cols*Math.log(index+1));
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;this.maxCostEval=maxCostEval+Math.log(this.maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;this.maxCostEval=Math.min(this.maxCostEval,cols*Math.log(index));
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getRowCount()+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getRowCount()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(cols.length,residuals);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(index,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateColumnsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRowsCounter()-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRowsCounter(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobianEvaluations.length+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobianEvaluations.length-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,jacobianEvaluations.length*cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,cols,jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,cols,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(this.cols,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,index,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(cols<0){Arrays.fill(jacobian,0,cols);}else{thrownewIllegalArgumentException("");}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(cols<0){Arrays.fill(jacobian,0,cols);}else{for(inti=0,cols=parameters.length;i<cols.length;++i){jacobian[i]=parameters[i];}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(cols<0){Arrays.fill(jacobian,0,cols);}else{for(inti=0,cols=parameters.length;i<cols.length;++i){jacobian[index]=parameters[i];}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;introws=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()*2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=getColumnCount()/1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,true);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,cols+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(index,residuals.length+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainings.length,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;intcols=measurements.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;intcolumns=parameters.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcolumns=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;introws=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(colons,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(cos,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(remainings,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(remainings,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jocobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRowEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,parameters.length,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,1);Arrays.fill(jacobian,4);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,3);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(index,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(this.maxCostEval-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,null,jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(this.cols,0,jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(colons.length,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(random,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(index,cols.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations().setIndexedFields(newint[]{0});
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations().setIndexedField(this,dataset,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations().setIndexedFields(newint[]{-1,-1});
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,residuals);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluations(false,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolls=parameters.length;Integercols=parameters.length;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,cost);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(random,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73MutableMap.this.updateRows(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73MutableMap.this.updateRowsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);System.arraycopy(jacobian,0,jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);System.arraycopy(jacobian,0,jacobian,index+1,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);System.arraycopy(jacobian,0,jacobian,index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,2);Arrays.fill(jacobian,2);System.arraycopy(jacobian,0,jacobian,index+rows,index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initColumns();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcolls=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73initColumnEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations(false,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;Integercols=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0,cols=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;data.add(jacobian);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateSerials();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(cols,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(remainings,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluationscounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Integercols=getColumnCount()-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jocobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(this.results,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluationsCounter(results);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(javacobian,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(remainings==null){Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(remainings==null){Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);}else{updateJacobianEvaluationsCounter();}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(remainings,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(data,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,0,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(remainings==null){Arrays.fill(jacobian,0);Arrays.fill(jacobian,1);}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(remainings==null){Arrays.fill(jacobian,0,cols);Arrays.fill(jacobian,1);}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getColumnCount()-cols;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,rows+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;intcolumns=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,measurements.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,data.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,dataArea,maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;intcolls=parameters.length;intcolumns=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73this.resultEvaluations.add(JavaTypedMeasurement.class);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateZeroes.this.remainders=newUpdateZeroes();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateZeroes.this.remainders=super.updateZeroes();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(colons.length,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(bracebian,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);Arrays.fill(data,0,0);Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(rows!=null){Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73if(rows!=null){Arrays.fill(jacobian,0);Arrays.fill(jacobian,0);}else{incrementJacobianEvaluationsCounter();}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(jacobian.length,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateRows(rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,row,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length+1;intcols=variables.length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=this.parameters.length;Intcols=this.parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(rows,index,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jocobian,0,rows);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,3);Arrays.fill(jacobian,2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(bracobian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,costEvaluations);Arrays.fill(bracebian,0,cols,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,1,);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setJacobianEvaluationsCounter(this.minimumCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73setMaxCostEval(this.maxCostEval);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;Intcols=parameters.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-2;intcols=variables.length-2;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;RemainingMeasurement[]measurements=newRemainingMeasurement[size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;RemainingMeasurement[]measurements=newRemainingMeasurement[cols.size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;RemainingMeasurement[]measurements=newRemainingMeasurement[rows].getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcols=0;RemainingMeasurement[]measurements=newRemainingMeasurement[cols.length];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(data,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,3);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,1);Arrays.fill(jacobian,1);Arrays.fill(jacobian,2);Arrays.fill(jacobian,3);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;Integercols=parameters.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,dataArea,jacobianEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,dataArea,costEvaluations);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(jacobian.length,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(array.length,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;intcolumns=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,index+2);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,parameters.length+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,0,cols,CostEvaluations.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(this.cocobian,0,jacobianEvaluations.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=0;introws=0;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length;intcolumns=parameters.length;intcols=parameters.length;intcolumns=variables.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(parameters.length,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(jacobian,null,row,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(results.length,jacobian.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainings.length,jacobian.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Math.min(remainders.length,residuals.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=parameters.length-1;intcols=variables.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intcols=measurements.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=Arrays.copyOf(jacobian,parameters.length-1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations().setIndex(index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73UpdateJacobianEvaluations().setIndexedField(this,dataset);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getLowCount();
