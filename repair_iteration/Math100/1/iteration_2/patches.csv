bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  cols  =  this.parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  int  cols  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    this.parameters.length;    int  cols  =  this.parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	36	None	add
2	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  Integer  cols  =  this.parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  Integer  cols  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    this.parameters.length;    Integer  cols  =  this.parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	36	None	add
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    this.parameters.length;    int  rows  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	add
4	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  int  rows  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    this.parameters.length;    int  rows  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	add
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    this.parameters.length;    int  columns  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	add
6	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  int  columns  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    this.parameters.length;    int  columns  =  this.parameters.length;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	add
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
8	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  /  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  /  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
10	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  -  1  +  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
11	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnCount()  *  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnCount()  *  1;	  Integer    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
12	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
13	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  costEvaluations  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
14	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index  +  1);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  index  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	non-compiled	[CE]  cannot  find  symbol  index	79	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
16	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols  +  1,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols    +    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	79	1	replace
17	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols  *  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols  *  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols  *  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	79	None	replace
18	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobianEvaluations);  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobianEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  jacobianEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  remainings	40	None	replace
19	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(data,  jacobianEvaluations);  [CE]  cannot  find  symbol  data  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(data,  jacobianEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(data,  jacobianEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  data	40	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
21	[BUG]  [BUGGY]  Integer  cols  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	1	replace
22	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobianEvaluations);	          Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	6	None	replace
23	[BUG]  [BUGGY]  setJacobianEvaluations(false,  false);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(false,  false);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(false,  false);	  setJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
24	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnCount()  /  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnCount()  /  1;	  Integer    cols    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
25	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnCount()  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnCount()  +  1;	  Integer    cols    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
26	[BUG]  [BUGGY]  initCols();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initCols();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initCols();	  initRows();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
27	[BUG]  [BUGGY]  initFields();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initFields();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initFields();	  initRows();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
28	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  cols);  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  cols);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainings	38	None	replace
29	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  maxCostEval);  [CE]  no  suitable  method  found  for  copyOf(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  maxCostEval);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  cols,  maxCostEval);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  copyOf(double[],int,int)	38	None	replace
30	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  index);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  index);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  cols,  index);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	38	None	replace
31	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  rows  =  Math.min(parameters.length,  parameters.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	102	1	replace
32	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(parameters.length,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(parameters.length,  parameters.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	102	1	replace
33	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  parameters.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  results	102	None	replace
34	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [CE]  cannot  find  symbol  random  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(random,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(random,  parameters.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  random	102	None	replace
35	[BUG]  [BUGGY]  this.resultEvaluations  =  updateRowEvaluations();  [CE]  cannot  find  symbol  resultEvaluations  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  this.resultEvaluations  =  updateRowEvaluations();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	this.resultEvaluations  =  updateRowEvaluations();	  updateRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	23	None	replace
36	[BUG]  [BUGGY]  updateColumnEvaluations();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateColumnEvaluations();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateColumnEvaluations();	  updateRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
37	[BUG]  [BUGGY]  updateRowEvaluations(rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowEvaluations(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowEvaluations(rows);	  updateRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
38	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
39	[BUG]  [BUGGY]  updateRowsCounter(rows,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowsCounter(rows,  cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowsCounter(rows,  cols);	  updateRowsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
40	[BUG]  [BUGGY]  updateRowsCounter(rows,  index);  [CE]  cannot  find  symbol  index  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowsCounter(rows,  index);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowsCounter(rows,  index);	  updateRowsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol  index	66	None	replace
41	[BUG]  [BUGGY]  updateRowsCounter(rows,  parameters);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowsCounter(rows,  parameters);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowsCounter(rows,  parameters);	  updateRowsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
42	[BUG]  [BUGGY]  updateRowsCounter(rows,  0);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowsCounter(rows,  0);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowsCounter(rows,  0);	  updateRowsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
43	[BUG]  [BUGGY]  Integer  cols  =  getColumnSize();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnSize();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnSize();	  Integer    cols    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
44	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  null);  [CE]  no  suitable  method  found  for  fill(double[],int,int,<null>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  null);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  rows,  null);	  Arrays.fill(jacobian,    0,    null);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,<null>)	59	None	replace
45	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  null);  [CE]  no  suitable  method  found  for  fill(double[],int,int,<null>)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  null);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  null);	  Arrays.fill(jacobian,    0,    null);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,<null>)	59	None	replace
46	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	46	None	replace
47	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  0,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  0,  cols.length);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
48	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  0,  cols);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	10	None	replace
49	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(rows,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(rows,  0,  cols);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	10	None	replace
50	[BUG]  [BUGGY]  updateColumns();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateColumns();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateColumns();	  updateRows();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
51	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(true);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(true);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(true);	  setJacobianEvaluationsCounter(false);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
52	[BUG]  [BUGGY]  int  cols  =  variables.length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  variables.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  variables.length;	          int    cols    =    parameters.length;    int    cols    =    variables.length;    	non-compiled	[CE]  cannot  find  symbol  	108	None	replace
53	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	replace
54	[BUG]  [BUGGY]  int  cols  =  parameters.length  /  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  /  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  /  2;	  int    cols    =    parameters.length    -    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	replace
55	[BUG]  [BUGGY]  initRowEvaluations(rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initRowEvaluations(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initRowEvaluations(rows);	  initRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
57	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
58	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jocobian,  0,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jocobian,  0,  rows,  cols);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	17	None	add
59	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [CE]  cannot  find  symbol  columns  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  0,  columns,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  0,  columns,  cols);	  	non-compiled	[CE]  cannot  find  symbol  columns	17	None	add
60	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
61	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  cols);  Arrays.fill(jacobian,  1,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    rows,    cols);    Arrays.fill(jacobian,  1,  rows,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
62	[BUG]  [BUGGY]  Int  cols  =  parameters.length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Int  cols  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Int  cols  =  parameters.length;	          int    cols    =    parameters.length;    Int    cols    =    parameters.length;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
63	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length);  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(parameters,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  incompatible  types	41	None	replace
64	[BUG]  [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  parameters.copyOf(jacobian,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  parameters.copyOf(jacobian,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
65	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length);  [CE]  cannot  find  symbol  dataset  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  dataset.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(parameters,  dataset.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  dataset	41	None	replace
66	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  data.length);  [CE]  cannot  find  symbol  data  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(parameters,  data.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(parameters,  data.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  data	41	None	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
68	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  0;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
70	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  0;  int  columns  =  parameters.length;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
71	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  cols;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getRowCount()  /  cols;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getRowCount()  /  cols;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
72	[BUG]  [BUGGY]  int  rows  =  getRowCount()  -  index;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getRowCount()  -  index;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getRowCount()  -  index;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  cols,  1);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
74	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  1);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
75	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  errorEvaluations);  [CE]  cannot  find  symbol  errorEvaluations  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  errorEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  errorEvaluations);	  Arrays.fill(jacobian,    0,    cols,    index);    	non-compiled	[CE]  cannot  find  symbol  errorEvaluations	22	None	replace
76	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  1,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
77	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  1,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  1,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	82	1	replace
78	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  1,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  1,  cols);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	82	None	replace
79	[BUG]  [BUGGY]  Arrays.fill(jacobian,  1,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  1,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  1,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	82	None	replace
80	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobian,  maxCostEval);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobian,  maxCostEval);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  jacobian,  maxCostEval);	  int    rows    =    Arrays.copyOf(jacobian,    maxCostEval);    	non-compiled	[CE]  cannot  find  symbol  remainings	39	None	replace
81	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  maxCostEval);  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  maxCostEval);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  maxCostEval);	  int    rows    =    Arrays.copyOf(jacobian,    maxCostEval);    	non-compiled	[CE]  cannot  find  symbol  remainings	39	None	replace
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
83	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
85	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
86	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	47	None	add
87	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
88	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
89	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
90	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  variables.length;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  variables.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
91	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  Integer  cols  =  parameters.length;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    Integer  cols  =  parameters.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
92	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  rows  =  parameters.length;  int  cols  =  measurements.length;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    rows    =    parameters.length;    int  cols  =  measurements.length;  int  rows  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	30	None	add
93	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	85	None	add
94	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  variables.length;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  variables.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	85	None	add
95	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  Integer  cols  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    Integer  cols  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	85	None	add
96	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  columns  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	85	None	add
97	[BUG]  [BUGGY]  updateColumnsCount();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateColumnsCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateColumnsCount();	  updateRowsCount();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
98	[BUG]  [BUGGY]  updateRowsCount(rows);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowsCount(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowsCount(rows);	  updateRowsCount();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
99	[BUG]  [BUGGY]  UpdateRowsCount();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateRowsCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateRowsCount();	  updateRowsCount();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
100	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols.length);	  Arrays.fill(jacobian,    0,    metrics.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	89	None	replace
101	[BUG]  [BUGGY]  UpdateJacobianEvaluations(this.maxCostEval);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations(this.maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations(this.maxCostEval);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
102	[BUG]  [BUGGY]  UpdateJacobianEvaluations(this.results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations(this.results);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations(this.results);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol  results	24	None	replace
103	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(rows,  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(rows,  cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(rows,  cols);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
104	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(cols);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(cols);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
105	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(this.results);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(this.results);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(this.results);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol  results	11	None	replace
106	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(0,  rows);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(0,  rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(0,  rows);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
108	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  rows,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
109	[BUG]  [BUGGY]  int  cols  =  this.getColumnCount();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.getColumnCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  this.getColumnCount();	  int    cols    =    getColumnCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
110	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
111	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  colls  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  colls  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  colls  is  already  defined  in  method  updateJacobian()	28	None	add
112	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  variables.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  variables.length;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  variables.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
113	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  measurements.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  int  cols  =  measurements.length;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    int  cols  =  measurements.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
114	[BUG]  [BUGGY]  setJacobianEvaluations(true,  null);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(true,  null);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(true,  null);	  setJacobianEvaluations(false,    null);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
115	[BUG]  [BUGGY]  setJacobianEvaluations(false,  null,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(false,  null,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(false,  null,  costEvaluations);	  setJacobianEvaluations(false,    null);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
116	[BUG]  [BUGGY]  setJacobianEvaluations(false,  null,  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(false,  null,  parameters);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(false,  null,  parameters);	  setJacobianEvaluations(false,    null);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
117	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
118	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
119	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
120	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
121	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jocobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jocobian,  2);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	7	None	add
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  +  2;	  int    cols    =    parameters.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
123	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  +  2;	  int    cols    =    parameters.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
124	[BUG]  [BUGGY]  UpdateZeroes();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateZeroes();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateZeroes();	  updateZeroes();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
125	[BUG]  [BUGGY]  updateZeroes(true);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateZeroes(true);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateZeroes(true);	  updateZeroes();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
126	[BUG]  [BUGGY]  updateZeroes(false);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateZeroes(false);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateZeroes(false);	  updateZeroes();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
127	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  -  1);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	60	None	replace
128	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  jacobian.length,  cols);	  Arrays.fill(jacobian,    0,    jacobian.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
129	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobian.length,  cols);	  Arrays.fill(jacobian,    0,    jacobian.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	1	replace
130	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  index);  [CE]  cannot  find  symbol  index  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  index);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  -  index);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  index	60	None	replace
131	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  +  1);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	60	None	replace
132	[BUG]  [BUGGY]  initStandardEvaluations(rows);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initStandardEvaluations(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initStandardEvaluations(rows);	  initStandardEvaluations();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
133	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  getRowCount()  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  getRowCount()  -  1;	  int    cols    =    getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
134	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  1;	  int    cols    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	replace
135	[BUG]  [BUGGY]  int  cols  =  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  1;	  int    cols    =    0;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	106	1	replace
136	[BUG]  [BUGGY]  int  cols  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  getColumnsCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  getColumnsCount();	  int    cols    =    0;    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
137	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [CE]  cannot  find  symbol  index  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  rows,  index);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	18	None	replace
138	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  index,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	18	None	replace
139	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  cols,  rows);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
140	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  rows);	  Arrays.fill(jacobian,    0,    rows,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
141	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  columns,  cols);  [CE]  cannot  find  symbol  columns  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  columns,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  columns,  cols);	  Arrays.fill(jacobian,    0,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	18	None	replace
142	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(2);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(2);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(2);	  setJacobianEvaluationsCounter(1);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
143	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval  +  1);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval  +  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(this.maxCostEval  +  1);	  setJacobianEvaluationsCounter(this.maxCostEval);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
144	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval,  rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval,  rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(this.maxCostEval,  rows);	  setJacobianEvaluationsCounter(this.maxCostEval);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
145	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
146	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
147	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
148	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
149	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  3);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	50	None	add
150	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
151	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
152	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
153	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
154	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,  1);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	45	None	add
155	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
156	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
157	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
158	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
159	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getColumnCount()  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getColumnCount()  -  1;	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
160	[BUG]  [BUGGY]  int  rows  =  this.columns.size();  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  this.columns.size();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  this.columns.size();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  columns	99	None	replace
161	[BUG]  [BUGGY]  int  rows  =  this.getRowCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  this.getRowCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  this.getRowCount();	  int    rows    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
162	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  index	21	None	replace
163	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [CE]  cannot  find  symbol  remainders  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  1);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	103	None	replace
164	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  2);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  2);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  results	103	None	replace
165	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  2);  [CE]  int  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(cols.length,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(cols.length,  2);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  int  cannot  be  dereferenced	103	None	replace
166	[BUG]  [BUGGY]  Arrays.fill(jocobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jocobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jocobian,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,    1);    	non-compiled	[CE]  cannot  find  symbol  jocobian	49	None	replace
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  0;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
168	[BUG]  [BUGGY]  int  cols  =  0;  int  colls  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  0;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
169	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  colls  =  cols.length;  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  colls  =  cols.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length;  int  colls  =  cols.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
170	[BUG]  [BUGGY]  UpdateJacobianEvaluationsCounter(rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluationsCounter(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluationsCounter(rows);	  UpdateJacobianEvaluationsCounter();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
171	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
172	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  costEvaluations);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
173	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jocobian,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  jocobian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jocobian,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jocobian,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	19	None	add
174	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  CostEvaluations);  [CE]  cannot  find  symbol  CostEvaluations  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(jacobian,  0,  cols,  CostEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(jacobian,  0,  cols,  CostEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  CostEvaluations	19	None	add
175	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  parameters.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    int  cols  =  parameters.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	34	None	add
176	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  Integer  cols  =  parameters.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  Integer  cols  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    Integer  cols  =  parameters.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	34	None	add
177	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  colls  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    2;    int  colls  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
178	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  colls  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  colls  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    int  colls  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
179	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    2;    int  rows  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
180	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  rows  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    int  rows  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
181	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
182	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  cols.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
183	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  cols.length);  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainings.length,  cols.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	74	None	replace
184	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(cols.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(cols.length,  residuals.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
185	[BUG]  [BUGGY]  this.resultEvaluations.clear();  [CE]  cannot  find  symbol  resultEvaluations  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  this.resultEvaluations.clear();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	this.resultEvaluations.clear();	  init();    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	42	None	replace
186	[BUG]  [BUGGY]  init(this.results);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  init(this.results);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	init(this.results);	  init();    	non-compiled	[CE]  cannot  find  symbol  results	42	None	replace
187	[BUG]  [BUGGY]  this.resultEvaluations.add(jacobian);  [CE]  cannot  find  symbol  resultEvaluations  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  this.resultEvaluations.add(jacobian);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	this.resultEvaluations.add(jacobian);	  init();    	non-compiled	[CE]  cannot  find  symbol  resultEvaluations	42	None	replace
188	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  costEvaluations);  [CE]  cannot  find  symbol  remainings  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  costEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  remainings	87	None	replace
189	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobian,  costEvaluations);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(remainings,  jacobian,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(remainings,  jacobian,  costEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  remainings	87	None	replace
190	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(random,  jacobian,  costEvaluations);  [CE]  cannot  find  symbol  random  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(random,  jacobian,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(random,  jacobian,  costEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  random	87	None	replace
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	add
192	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	add
193	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	93	None	add
194	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);  [CE]  cannot  find  symbol  jocobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	93	None	add
195	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  Arrays.fill(jacobian,  1);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0,  Arrays.fill(jacobian,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0,  Arrays.fill(jacobian,  1);	  	non-compiled	[CE]  ')'  expected	93	None	add
196	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	add
197	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	add
198	[BUG]  [BUGGY]  Arrays.fill(rows,  1);  [CE]  no  suitable  method  found  for  fill(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(rows,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(rows,  1);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int)	94	None	replace
199	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  residuals);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  residuals);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  residuals);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
200	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  false);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  false);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  false);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
201	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  null);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  null);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  null);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
202	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  3);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	replace
203	[BUG]  [BUGGY]  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  3);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    3);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	replace
204	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  parameters.length  +  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  cols  =  parameters.length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	90	None	add
205	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  Integer  cols  =  parameters.length  +  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  Integer  cols  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    Integer  cols  =  parameters.length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	90	None	add
206	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  colls  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    +    1;    int  colls  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
207	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  colls  =  parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  colls  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  colls  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
208	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  rows  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    +    1;    int  rows  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
209	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  rows  =  parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  rows  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  rows  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
210	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  parameters.length  -  1);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	63	None	replace
211	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  index);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  -  index);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  parameters.length  -  index);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  index	63	None	replace
212	[BUG]  [BUGGY]  Arrays.fill(parameters,  0,  jacobian.length);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(parameters,  0,  jacobian.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(parameters,  0,  jacobian.length);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)	63	None	replace
213	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  parameters.length  +  1);	  Arrays.fill(jacobian,    0,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	63	None	replace
214	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  parameters.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    int  cols  =  parameters.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	32	None	add
215	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    Integer  cols  =  parameters.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	32	None	add
216	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    1;    int  colls  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
217	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    int  colls  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
218	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    1;    int  rows  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
219	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    int  rows  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
220	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  this.parameters.length  -  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
221	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  this.parameters.length  -  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
222	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  this.parameters.length  -  2;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
223	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  this.parameters.length  -  2;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
224	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  this.parameters.length  +  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
225	[BUG]  [BUGGY]  int  cols  =  this.parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  this.parameters.length  +  1;	  int    cols    =    this.parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	1	replace
226	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  index  +  1);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  index  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  index  +  1);	  int    rows    =    Math.min(results.length,    index);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
227	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  index  -  1);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  index  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  index  -  1);	  int    rows    =    Math.min(results.length,    index);    	non-compiled	[CE]  cannot  find  symbol  results	75	None	replace
228	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
229	[BUG]  [BUGGY]  int  rows  =  getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getRowCount()  /  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getRowCount()  /  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
230	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  cols.length  -  1);  [CE]  cannot  find  symbol  remainders  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  cols.length  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  cols.length  -  1);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	77	None	replace
231	[BUG]  [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [CE]  cannot  find  symbol  periods  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(periods.length,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(periods.length,  cols.length);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  periods	77	None	replace
232	[BUG]  [BUGGY]  Arrays.fill(rows,  0,  rows);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(rows,  0,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(rows,  0,  rows);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	9	None	replace
233	[BUG]  [BUGGY]  Arrays.fill(rawRows,  0,  cols);  [CE]  cannot  find  symbol  rawRows  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(rawRows,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(rawRows,  0,  cols);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  rawRows	9	None	replace
234	[BUG]  [BUGGY]  initMeanEvaluations(rows);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initMeanEvaluations(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initMeanEvaluations(rows);	  initMeanEvaluations();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
235	[BUG]  [BUGGY]  initStandardMeanEvaluations();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initStandardMeanEvaluations();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initStandardMeanEvaluations();	  initMeanEvaluations();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
236	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
237	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
238	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  Arrays.length);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  length  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  Arrays.length);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0,  Arrays.length);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  length	1	None	add
239	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	1	None	add
240	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  jocobian  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  jocobian	1	None	add
241	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(index,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  index  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(index,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(index,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  index	1	None	add
242	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
243	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols);  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols);	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
244	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index  +  1));  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index  +  1));  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index  +  1));	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
245	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  maxCostEval  +  Math.log(this.maxCostEval);  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  maxCostEval  +  Math.log(this.maxCostEval);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;  this.maxCostEval  =  maxCostEval  +  Math.log(this.maxCostEval);	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
246	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index));  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index));  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;  this.maxCostEval  =  Math.min(this.maxCostEval,  cols  *  Math.log(index));	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
247	[BUG]  [BUGGY]  int  cols  =  getRowCount()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  getRowCount()  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  getRowCount()  +  1;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
248	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  getRowCount()  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  getRowCount()  -  2;	  int    cols    =    getRowCount();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
249	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  residuals);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(cols.length,  residuals);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(cols.length,  residuals);	  int    rows    =    Math.min(remainders.length,    cols);    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
250	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  cols);  [CE]  cannot  find  symbol  index  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(index,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(index,  cols);	  int    rows    =    Math.min(remainders.length,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	83	None	replace
251	[BUG]  [BUGGY]  updateRowCount();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRowCount();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRowCount();	  updateColumnsCounter();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
252	[BUG]  [BUGGY]  UpdateColumnsCounter();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateColumnsCounter();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateColumnsCounter();	  updateColumnsCounter();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
253	[BUG]  [BUGGY]  UpdateRowsCounter()  -  1;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateRowsCounter()  -  1;  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateRowsCounter()  -  1;	  UpdateRowsCounter();    	non-compiled	[CE]  not  a  statement	65	None	replace
254	[BUG]  [BUGGY]  UpdateRowsCounter(rows);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateRowsCounter(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateRowsCounter(rows);	  UpdateRowsCounter();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
255	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobianEvaluations.length  +  1);	  Arrays.fill(jacobian,    0,    jacobianEvaluations.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
256	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobianEvaluations.length  -  1);	  Arrays.fill(jacobian,    0,    jacobianEvaluations.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
257	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  *  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length  *  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  jacobianEvaluations.length  *  cols.length);	  Arrays.fill(jacobian,    0,    jacobianEvaluations.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
258	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,int,double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobian);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  0,  cols,  jacobian);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,double[])	78	None	replace
259	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(int,int,int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  0,  cols,  jacobianEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  0,  cols,  jacobianEvaluations);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int,int)	78	None	replace
260	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  cols);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(this.cols,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(this.cols,  0,  cols);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	78	None	replace
261	[BUG]  [BUGGY]  Arrays.fill(jacobian,  null,  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(double[],<null>,int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  null,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  null,  cols,  costEvaluations);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],<null>,int,int)	61	None	replace
262	[BUG]  [BUGGY]  Arrays.fill(jacobian,  null,  rows,  cols);  [CE]  no  suitable  method  found  for  fill(double[],<null>,int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  null,  rows,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  null,  rows,  cols);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],<null>,int,int)	61	None	replace
263	[BUG]  [BUGGY]  Arrays.fill(jacobian,  null,  index,  cols);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  null,  index,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  null,  index,  cols);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  cannot  find  symbol  index	61	None	replace
264	[BUG]  [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	4	None	replace
265	[BUG]  [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[i]  =  parameters[i];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[i]  =  parameters[i];  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[i]  =  parameters[i];  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
266	[BUG]  [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[index]  =  parameters[i];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[index]  =  parameters[i];  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(cols  <  0)  {  Arrays.fill(jacobian,  0,  cols);  }  else  {  for(int  i  =  0,  cols  =  parameters.length;  i  <  cols.length;  ++i)  {  jacobian[index]  =  parameters[i];  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
267	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
268	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  -  1;  int  rows  =  parameters.length;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
269	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
270	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
271	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnCount()  *  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnCount()  *  2;	  Integer    cols    =    getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
272	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  getColumnCount()  /  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  getColumnCount()  /  1;	  int    cols    =    getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
273	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  true);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  true);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  true);	  updateJacobianEvaluations(false);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
274	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  cols  +  1);  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  cols  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  cols  +  1);	  int    rows    =    Math.min(remainders.length,    index    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	76	None	replace
275	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  residuals.length  +  1);  [CE]  cannot  find  symbol  index  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(index,  residuals.length  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(index,  residuals.length  +  1);	  int    rows    =    Math.min(remainders.length,    index    +    1);    	non-compiled	[CE]  cannot  find  symbol  index	76	None	replace
276	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  cols);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  cols);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
277	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  residuals.length);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  residuals.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
278	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  parameters.length);  [CE]  cannot  find  symbol  remainings  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainings.length,  parameters.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	74	None	replace
279	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  measurements.length  +  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  measurements.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  cols  =  measurements.length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	90	None	add
280	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  columns  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    +    1;    int  columns  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
281	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  columns  =  parameters.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  columns  =  parameters.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  columns  =  parameters.length  +  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	add
282	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  rows.length);	  Arrays.fill(jacobian,    0,    jacobianEvaluations.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	62	None	replace
283	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    1;    int  columns  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
284	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  columns  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    int  columns  =  parameters.length  -  1;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	32	1	add
285	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
286	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length;  int  rows  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
287	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(colons,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  colons  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(colons,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(colons,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  colons	19	None	add
288	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(cos,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  cos  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(cos,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(cos,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  cos	19	None	add
289	[BUG]  [BUGGY]  Arrays.fill(remainings,  1);  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(remainings,  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(remainings,  1);	          Arrays.fill(jacobian,    1);    Arrays.fill(jocobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	49	None	replace
290	[BUG]  [BUGGY]  Arrays.fill(remainings,  0);  [CE]  cannot  find  symbol  remainings  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(remainings,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(remainings,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	6	None	replace
291	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0);  [CE]  cannot  find  symbol  jocobian  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jocobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jocobian,  0);	          Arrays.fill(jacobian,    0);    Arrays.fill(jocobian,    0);    	non-compiled	[CE]  cannot  find  symbol  jocobian	6	None	replace
292	[BUG]  [BUGGY]  UpdateRowEvaluations();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateRowEvaluations();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateRowEvaluations();	  updateRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
293	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);  [CE]  no  suitable  method  found  for  copyOf(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  parameters.length,  parameters.length);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  no  suitable  method  found  for  copyOf(double[],int,int)	41	None	replace
294	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [CE]  cannot  find  symbol  remainders  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  3);	  int    rows    =    Math.min(remainders.length,    2);    	non-compiled	[CE]  cannot  find  symbol  remainders	103	None	replace
295	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
296	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  4);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
297	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
298	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	add
299	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [CE]  cannot  find  symbol  index  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(index,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(index,  parameters.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	non-compiled	[CE]  cannot  find  symbol  index	102	None	replace
300	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval  -  1);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(this.maxCostEval  -  1);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(this.maxCostEval  -  1);	  setJacobianEvaluationsCounter(this.maxCostEval);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
301	[BUG]  [BUGGY]  Arrays.fill(jacobian,  null,  rows);  [CE]  no  suitable  method  found  for  fill(double[],<null>,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  null,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  null,  rows);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],<null>,int)	61	None	replace
302	[BUG]  [BUGGY]  Arrays.fill(cols,  null,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,<null>,double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  null,  jacobian);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  null,  jacobian);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,<null>,double[])	61	None	replace
303	[BUG]  [BUGGY]  Arrays.fill(this.cols,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,double[])  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(this.cols,  0,  jacobian);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(this.cols,  0,  jacobian);	  Arrays.fill(cols,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[])	78	None	replace
304	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [CE]  cannot  find  symbol  colons  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(colons.length,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(colons.length,  cols.length);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  colons	77	None	replace
305	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [CE]  cannot  find  symbol  random  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(random,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(random,  cols.length);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  random	77	None	replace
306	[BUG]  [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [CE]  cannot  find  symbol  index  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(index,  cols.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(index,  cols.length);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  index	77	None	replace
307	[BUG]  [BUGGY]  UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  0  }  );  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  0  }  );  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  0  }  );	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
308	[BUG]  [BUGGY]  UpdateJacobianEvaluations().setIndexedField(this,  dataset,  costEvaluations);  [CE]  cannot  find  symbol  dataset  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations().setIndexedField(this,  dataset,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations().setIndexedField(this,  dataset,  costEvaluations);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol  dataset	24	None	replace
309	[BUG]  [BUGGY]  UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  -1,  -1  }  );  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  -1,  -1  }  );  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations().setIndexedFields(new  int[]  {  -1,  -1  }  );	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
310	[BUG]  [BUGGY]  setJacobianEvaluations(false,  residuals);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(false,  residuals);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(false,  residuals);	  setJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
311	[BUG]  [BUGGY]  setJacobianEvaluations(false,  costEvaluations);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluations(false,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluations(false,  costEvaluations);	  setJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
312	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  Integer  cols  =  parameters.length;  int  colls  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  colls  =  parameters.length;  Integer  cols  =  parameters.length;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    colls    =    parameters.length;    Integer  cols  =  parameters.length;  int  colls  =  parameters.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	28	None	add
313	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  cost);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,  0,  cols,  cost);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
314	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  cost);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  cost);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  cost);	  Arrays.fill(jacobian,    0,    cols,    index);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	1	replace
315	[BUG]  [BUGGY]  int  rows  =  Math.min(random,  cols);  [CE]  cannot  find  symbol  random  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(random,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(random,  cols);	  int    rows    =    Math.min(remainders.length,    cols);    	non-compiled	[CE]  cannot  find  symbol  random	83	None	replace
316	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  0);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  0);	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1,    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	82	None	replace
317	[BUG]  [BUGGY]  MutableMap.this.updateRows(rows);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  MutableMap.this.updateRows(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	MutableMap.this.updateRows(rows);	  UpdateRowsCounter();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
318	[BUG]  [BUGGY]  MutableMap.this.updateRowsCounter();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  MutableMap.this.updateRowsCounter();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	MutableMap.this.updateRowsCounter();	  UpdateRowsCounter();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
319	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
320	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
321	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  0,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
322	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  0,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  0,  cols);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
323	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1,  parameters.length);  [CE]  cannot  find  symbol  index  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1,  parameters.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1,  parameters.length);	  	non-compiled	[CE]  cannot  find  symbol  index	7	None	add
324	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  1);	  	non-compiled	[CE]  cannot  find  symbol  index	7	None	add
325	[BUG]  [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  rows,  index  +  1);  [CE]  cannot  find  symbol  index  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  rows,  index  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  2);  System.arraycopy(jacobian,  0,  jacobian,  index  +  rows,  index  +  1);	  	non-compiled	[CE]  cannot  find  symbol  index	7	None	add
326	[BUG]  [BUGGY]  initColumns();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initColumns();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initColumns();	  initRows();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
327	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  costEvaluations);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  costEvaluations);	  updateJacobianEvaluations(true);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
328	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
329	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  -  1;  int  colls  =  parameters.length;	          int    cols    =    parameters.length;    int    colls    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	replace
330	[BUG]  [BUGGY]  initColumnEvaluations();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  initColumnEvaluations();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	initColumnEvaluations();	  initRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
331	[BUG]  [BUGGY]  updateJacobianEvaluations(false,  0);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluations(false,  0);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations(false,  0);	  updateJacobianEvaluations(false);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
332	[BUG]  [BUGGY]  int  cols  =  0;  Integer  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  Integer  cols  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    Integer  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
333	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0,  cols  =  0;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0,  cols  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0,  cols  =  0;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
334	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;  data.add(jacobian);  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;  data.add(jacobian);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;  data.add(jacobian);	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
335	[BUG]  [BUGGY]  updateSerials();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateSerials();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateSerials();	  initSerials();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
336	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
337	[BUG]  [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length;  int  columns  =  parameters.length  -  1;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
338	[BUG]  [BUGGY]  Arrays.fill(cols,  0,  rows);  [CE]  no  suitable  method  found  for  fill(int,int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(cols,  0,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(cols,  0,  rows);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,int)	10	None	replace
339	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  cols);  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(remainings,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(remainings,  0,  cols);	  Arrays.fill(cols,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
340	[BUG]  [BUGGY]  UpdateJacobianEvaluations  counter();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations  counter();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations  counter();	  UpdateJacobianEvaluationsCounter();    	non-compiled	[CE]  ';'  expected	12	None	replace
341	[BUG]  [BUGGY]  Integer  cols  =  getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Integer  cols  =  getColumnCount()  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Integer  cols  =  getColumnCount()  -  2;	  Integer    cols    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
342	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0,  cols);  [CE]  cannot  find  symbol  jocobian  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jocobian,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jocobian,  0,  cols);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  jocobian	4	None	replace
343	[BUG]  [BUGGY]  Arrays.fill(this.results,  0,  cols);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(this.results,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(this.results,  0,  cols);	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	4	None	replace
344	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(index);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(index);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(index);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol  index	11	None	replace
345	[BUG]  [BUGGY]  updateJacobianEvaluationsCounter(results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateJacobianEvaluationsCounter(results);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluationsCounter(results);	  updateJacobianEvaluationsCounter(rows);    	non-compiled	[CE]  cannot  find  symbol  results	11	None	replace
346	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(javacobian,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  javacobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(javacobian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(javacobian,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  javacobian	1	None	add
347	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	46	None	replace
348	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  updateJacobianEvaluationsCounter();  }  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  updateJacobianEvaluationsCounter();  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  1);  }  else  {  updateJacobianEvaluationsCounter();  }	          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	46	None	replace
349	[BUG]  [BUGGY]  Arrays.fill(remainings,  0,  rows);  [CE]  cannot  find  symbol  remainings  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(remainings,  0,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(remainings,  0,  rows);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  remainings	9	None	replace
350	[BUG]  [BUGGY]  Arrays.fill(data,  0,  rows);  [CE]  cannot  find  symbol  data  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(data,  0,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(data,  0,  rows);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  data	9	None	replace
351	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  copyOf(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  0,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  0,  cols);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  copyOf(double[],int,int)	38	None	replace
352	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  copyOf(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  cols,  costEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  no  suitable  method  found  for  copyOf(double[],int,int)	38	None	replace
353	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  [CE]  cannot  find  symbol  remainings  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  1);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	94	None	replace
354	[BUG]  [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  1);  }  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(remainings  ==  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  1);  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(remainings  ==  null)  {  Arrays.fill(jacobian,  0,  cols);  Arrays.fill(jacobian,  1);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    1);    	non-compiled	[CE]  cannot  find  symbol  remainings	94	None	replace
355	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  -  cols;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getColumnCount()  -  cols;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getColumnCount()  -  cols;	  int    rows    =    getRowCount()    -    cols;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
356	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  rows  +  1);	  Arrays.fill(jacobian,    0,    cols    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	79	None	replace
357	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int    cols    =    parameters.length    -    2;    int  columns  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
358	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  columns  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    int  columns  =  parameters.length  -  2;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
359	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements.length);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  measurements.length);	  Arrays.fill(jacobian,    0,    metrics.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	89	None	replace
360	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  data.length);  [CE]  cannot  find  symbol  data  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  data.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  data.length);	  Arrays.fill(jacobian,    0,    metrics.length);    	non-compiled	[CE]  cannot  find  symbol  data	89	None	replace
361	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  maxCostEval);  [CE]  cannot  find  symbol  dataArea  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  maxCostEval);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  dataArea,  maxCostEval);	  int    rows    =    Arrays.copyOf(jacobian,    maxCostEval);    	non-compiled	[CE]  cannot  find  symbol  dataArea	39	None	replace
362	[BUG]  [BUGGY]  UpdateRows();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateRows();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateRows();	  updateRows();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
363	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  colls  =  parameters.length;  int  columns  =  parameters.length;  [CE]  variable  columns  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  colls  =  parameters.length;  int  columns  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  colls  =  parameters.length;  int  columns  =  parameters.length;	  	non-compiled	[CE]  variable  columns  is  already  defined  in  method  updateJacobian()	85	None	add
364	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters);  [CE]  no  suitable  method  found  for  copyOf(double[],EstimatedParameter[])  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  parameters);	  int    rows    =    Arrays.copyOf(jacobian,    costEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  copyOf(double[],EstimatedParameter[])	87	None	replace
365	[BUG]  [BUGGY]  this.resultEvaluations.add(JavaTypedMeasurement.class);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  this.resultEvaluations.add(JavaTypedMeasurement.class);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	this.resultEvaluations.add(JavaTypedMeasurement.class);	  init();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
366	[BUG]  [BUGGY]  UpdateZeroes.this.remainders  =  new  UpdateZeroes();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateZeroes.this.remainders  =  new  UpdateZeroes();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateZeroes.this.remainders  =  new  UpdateZeroes();	  updateZeroes();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
367	[BUG]  [BUGGY]  UpdateZeroes.this.remainders  =  super.updateZeroes();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateZeroes.this.remainders  =  super.updateZeroes();  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateZeroes.this.remainders  =  super.updateZeroes();	  updateZeroes();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
368	[BUG]  [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [CE]  cannot  find  symbol  colons  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(colons.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(colons.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    cols.length);    	non-compiled	[CE]  cannot  find  symbol  colons	77	None	replace
369	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(bracebian,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  bracebian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(bracebian,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(bracebian,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  bracebian	1	None	add
370	[BUG]  [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(data,  0,  0);  Arrays.fill(jacobian,  0);  [CE]  cannot  find  symbol  data  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,  0);  Arrays.fill(data,  0,  0);  Arrays.fill(jacobian,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        0);        Arrays.fill(jacobian,    0);    Arrays.fill(data,  0,  0);  Arrays.fill(jacobian,  0);	  	non-compiled	[CE]  cannot  find  symbol  data	1	None	add
371	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
372	[BUG]  [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  incrementJacobianEvaluationsCounter();  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  incrementJacobianEvaluationsCounter();  }  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	if(rows!=  null)  {  Arrays.fill(jacobian,  0);  Arrays.fill(jacobian,  0);  }  else  {  incrementJacobianEvaluationsCounter();  }	          Arrays.fill(jacobian,    0);    Arrays.fill(jacobian,    0);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
373	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(jacobian.length,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  rows  =  Math.min(jacobian.length,  2);	  int    rows    =    Math.min(remainders.length,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	103	1	replace
374	[BUG]  [BUGGY]  int  rows  =  Math.min(jacobian.length,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(jacobian.length,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(jacobian.length,  2);	  int    rows    =    Math.min(remainders.length,    2);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	103	1	replace
375	[BUG]  [BUGGY]  updateRows(rows);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  updateRows(rows);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateRows(rows);	  updateRowsCount();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
376	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  row,  costEvaluations);  [CE]  cannot  find  symbol  row  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  row,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  row,  costEvaluations);	  Arrays.fill(jacobian,    0,    cols,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  row	20	None	replace
377	[BUG]  [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  variables.length  +  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  +  1;  int  cols  =  variables.length  +  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    +    1;    int  cols  =  variables.length  +  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	90	None	add
378	[BUG]  [BUGGY]  int  cols  =  this.parameters.length;  Int  cols  =  this.parameters.length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  this.parameters.length;  Int  cols  =  this.parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    this.parameters.length;    Int  cols  =  this.parameters.length;	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
379	[BUG]  [BUGGY]  Arrays.fill(rows,  index,  0);  [CE]  cannot  find  symbol  index  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(rows,  index,  0);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(rows,  index,  0);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  index	9	None	replace
380	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0,  rows);  [CE]  cannot  find  symbol  jocobian  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jocobian,  0,  rows);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jocobian,  0,  rows);	  Arrays.fill(rows,    0);    	non-compiled	[CE]  cannot  find  symbol  jocobian	9	None	replace
381	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
382	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    2);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  2);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	1	add
383	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(bracobian,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  bracobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(bracobian,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(bracobian,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  bracobian	19	None	add
384	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(bracebian,  0,  cols,  costEvaluations);  [CE]  cannot  find  symbol  bracebian  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  costEvaluations);  Arrays.fill(bracebian,  0,  cols,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,    0,    cols,    costEvaluations);    Arrays.fill(bracebian,  0,  cols,  costEvaluations);	  	non-compiled	[CE]  cannot  find  symbol  bracebian	19	None	add
385	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1,);  Arrays.fill(jacobian,  3);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  1,);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    3);    Arrays.fill(jacobian,  1,);  Arrays.fill(jacobian,  3);	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
386	[BUG]  [BUGGY]  setJacobianEvaluationsCounter(this.minimumCostEval);  [CE]  cannot  find  symbol  minimumCostEval  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setJacobianEvaluationsCounter(this.minimumCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setJacobianEvaluationsCounter(this.minimumCostEval);	  setJacobianEvaluationsCounter(this.maxCostEval);    	non-compiled	[CE]  cannot  find  symbol  minimumCostEval	84	None	replace
387	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setMaxCostEval(this.maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	setMaxCostEval(this.maxCostEval);	  setJacobianEvaluationsCounter(this.maxCostEval);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
388	[BUG]  [BUGGY]  setMaxCostEval(this.maxCostEval);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  setMaxCostEval(this.maxCostEval);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	setMaxCostEval(this.maxCostEval);	  setJacobianEvaluationsCounter(this.maxCostEval);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	1	replace
389	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  Int  cols  =  parameters.length  -  2;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  Int  cols  =  parameters.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    Int  cols  =  parameters.length  -  2;	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
390	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  variables.length  -  2;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  2;  int  cols  =  variables.length  -  2;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    2;    int  cols  =  variables.length  -  2;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	34	None	add
391	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[size()  ];  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[size()  ];  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[size()  ];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
392	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.size()  ];  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.size()  ];  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.size()  ];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
393	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[rows].getRowCount();  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[rows].getRowCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[rows].getRowCount();	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
394	[BUG]  [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.length];  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.length];  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    0;    int  cols  =  0;RemainingMeasurement[]  measurements  =  new  RemainingMeasurement[cols.length];	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	105	None	add
395	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(data,  cols);  [CE]  cannot  find  symbol  data  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(data,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(data,  cols);	  int    rows    =    Arrays.copyOf(jacobian,    cols);    	non-compiled	[CE]  cannot  find  symbol  data	38	None	replace
396	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
397	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  3);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
398	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
399	[BUG]  [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  1);  Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                Arrays.fill(jacobian,        1);        Arrays.fill(jacobian,    1);    Arrays.fill(jacobian,  2);  Arrays.fill(jacobian,  3);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	45	1	add
400	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  parameters.length  -  1;  Integer  cols  =  parameters.length;	          int    cols    =    parameters.length;    Integer    cols    =    parameters.length;    	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	27	None	replace
401	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  jacobianEvaluations);  [CE]  cannot  find  symbol  dataArea  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  jacobianEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  dataArea,  jacobianEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  dataArea	40	None	replace
402	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  costEvaluations);  [CE]  cannot  find  symbol  dataArea  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  dataArea,  costEvaluations);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  dataArea,  costEvaluations);	  int    rows    =    Arrays.copyOf(jacobian,    costEvaluations);    	non-compiled	[CE]  cannot  find  symbol  dataArea	87	None	replace
403	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(jacobian.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  rows  =  Math.min(jacobian.length,  cols);	  int    rows    =    Math.min(remainders.length,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
404	[BUG]  [BUGGY]  int  rows  =  Math.min(jacobian.length,  cols);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(jacobian.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(jacobian.length,  cols);	  int    rows    =    Math.min(remainders.length,    cols);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
405	[BUG]  [BUGGY]  int  rows  =  Math.min(array.length,  cols);  [CE]  cannot  find  symbol  array  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(array.length,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(array.length,  cols);	  int    rows    =    Math.min(remainders.length,    cols);    	non-compiled	[CE]  cannot  find  symbol  array	83	None	replace
406	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
407	[BUG]  [BUGGY]  int  cols  =  0;  int  columns  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  columns  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  0;  int  columns  =  0;	          int    cols    =    parameters.length;    int    columns    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	86	1	replace
408	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  index  +  2);  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  index  +  2);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  index  +  2);	  int    rows    =    Math.min(remainders.length,    index    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	76	None	replace
409	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  parameters.length  +  1);  [CE]  cannot  find  symbol  remainders  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  parameters.length  +  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  parameters.length  +  1);	  int    rows    =    Math.min(remainders.length,    index    +    1);    	non-compiled	[CE]  cannot  find  symbol  remainders	76	None	replace
410	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  CostEvaluations.length);  [CE]  cannot  find  symbol  CostEvaluations  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  CostEvaluations.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  0,  cols,  CostEvaluations.length);	  Arrays.fill(jacobian,    0,    cols,    index);    	non-compiled	[CE]  cannot  find  symbol  CostEvaluations	22	None	replace
411	[BUG]  [BUGGY]  Arrays.fill(this.cocobian,  0,  jacobianEvaluations.length);  [CE]  cannot  find  symbol  cocobian  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(this.cocobian,  0,  jacobianEvaluations.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(this.cocobian,  0,  jacobianEvaluations.length);	  Arrays.fill(jacobian,    0,    jacobianEvaluations.length);    	non-compiled	[CE]  cannot  find  symbol  cocobian	62	None	replace
412	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  rows  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  0;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
413	[BUG]  [BUGGY]  int  cols  =  0;  int  rows  =  0;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  0;  int  rows  =  0;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  0;  int  rows  =  0;	          int    cols    =    parameters.length;    int    rows    =    parameters.length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	1	replace
414	[BUG]  [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  variables.length;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]          int    cols    =    parameters.length;    int  columns  =  parameters.length;  int  cols  =  parameters.length;  int  columns  =  variables.length;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	                int        cols        =        parameters.length;        int    columns    =    parameters.length;    int  cols  =  parameters.length;  int  columns  =  variables.length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	85	None	add
415	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  rows  =  Math.min(parameters.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	102	1	replace
416	[BUG]  [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(parameters.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(parameters.length,  residuals.length);	  int    rows    =    Math.min(remainders.length,    parameters.length);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	102	1	replace
417	[BUG]  [BUGGY]  Arrays.fill(jacobian,  null,  row,  cols);  [CE]  cannot  find  symbol  row  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  Arrays.fill(jacobian,  null,  row,  cols);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	Arrays.fill(jacobian,  null,  row,  cols);	  Arrays.fill(jacobian,    null,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	61	None	replace
418	[BUG]  [BUGGY]  int  rows  =  Math.min(results.length,  jacobian.length);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(results.length,  jacobian.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(results.length,  jacobian.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
419	[BUG]  [BUGGY]  int  rows  =  Math.min(remainings.length,  jacobian.length);  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainings.length,  jacobian.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainings.length,  jacobian.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainings	74	None	replace
420	[BUG]  [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length);  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Math.min(remainders.length,  residuals.length);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Math.min(remainders.length,  residuals.length);	  int    rows    =    Math.min(index,    residuals.length);    	non-compiled	[CE]  cannot  find  symbol  remainders	74	None	replace
421	[BUG]  [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  variables.length  -  1;  [CE]  variable  cols  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  parameters.length  -  1;  int  cols  =  variables.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int    cols    =    parameters.length    -    1;    int  cols  =  variables.length  -  1;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  updateJacobian()	32	None	add
422	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	int  cols  =  measurements.length  -  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
423	[BUG]  [BUGGY]  int  cols  =  measurements.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  cols  =  measurements.length  -  1;  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  cols  =  measurements.length  -  1;	  int    cols    =    parameters.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	replace
424	[BUG]  [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length  -  1);  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  Arrays.copyOf(jacobian,  parameters.length  -  1);  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  Arrays.copyOf(jacobian,  parameters.length  -  1);	  int    rows    =    Arrays.copyOf(jacobian,    parameters.length);    	non-compiled	[CE]  incompatible  types	41	None	replace
425	[BUG]  [BUGGY]  UpdateJacobianEvaluations().setIndex(index);  [CE]  cannot  find  symbol  index  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations().setIndex(index);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations().setIndex(index);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol  index	24	None	replace
426	[BUG]  [BUGGY]  UpdateJacobianEvaluations().setIndexedField(this,  dataset);  [CE]  cannot  find  symbol  dataset  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  UpdateJacobianEvaluations().setIndexedField(this,  dataset);  [BUGGY]      Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	UpdateJacobianEvaluations().setIndexedField(this,  dataset);	  UpdateJacobianEvaluations();    	non-compiled	[CE]  cannot  find  symbol  dataset	24	None	replace
427	[BUG]  [BUGGY]  int  rows  =  getLowCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {      [BUGGY]  int  rows  =  getLowCount();  [BUGGY]      incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  rows  =  getLowCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
