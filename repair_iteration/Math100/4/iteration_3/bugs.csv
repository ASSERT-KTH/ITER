bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  &  0xff;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  &  0xff;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index]  &  0xff;	  WeightedMeasurement    wm    =    jacobian[index];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	51	None	replace
2	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  residuals;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  residuals;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index],  residuals;	  WeightedMeasurement    wm    =    jacobian[index];    	non-compiled	[CE]  incompatible  types	51	None	replace
3	[BUG]  [BUGGY]  SizedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizedMeasurement  wm  =  measurements[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations;	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
5	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations;	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  +  2];	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
7	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  2];	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	1	replace
8	[BUG]  [BUGGY]  SizedMeasurement  wm  =  this.  measurements[i];  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizedMeasurement  wm  =  this.  measurements[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizedMeasurement  wm  =  this.  measurements[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    SizedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
9	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.messages[i];  [CE]  cannot  find  symbol  messages  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.messages[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.messages[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    SizedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol  messages	50	None	replace
10	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasures();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasures();    	non-compiled	[CE]  double  cannot  be  dereferenced	62	None	replace
11	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasures();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  	62	None	replace
12	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasures();  [CE]  cannot  find  symbol  samples  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  samples	62	None	replace
13	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasurements();  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].measurements.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	67	None	replace
14	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].measurements.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  	67	None	replace
15	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasurements();  [CE]  cannot  find  symbol  samples  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  samples[i].measurements.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  samples	67	None	replace
16	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.length;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.length;	  WeightedMeasurement[]    measurements    =    jacobian.results;    	non-compiled	[CE]  incompatible  types	27	None	replace
17	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.measurements;  [CE]  cannot  find  symbol  measurements  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.measurements;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.measurements;	  WeightedMeasurement[]    measurements    =    jacobian.results;    	non-compiled	[CE]  cannot  find  symbol  measurements	27	None	replace
18	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  index;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian,  index;	  WeightedMeasurement[]    measurements    =    jacobian.results;    	non-compiled	[CE]  incompatible  types	27	None	replace
19	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1];  [CE]  cannot  find  symbol  wm  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  cannot  find  symbol  wm	32	None	replace
20	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i++];  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i++];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i++];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  cannot  find  symbol  wm	32	None	replace
21	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  *  cols];  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  *  cols];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  *  cols];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  cannot  find  symbol  wm	32	None	replace
22	[BUG]  [BUGGY]  SizeedMeasurement  wm  =  this.  measurements[i];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizeedMeasurement  wm  =  this.  measurements[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizeedMeasurement  wm  =  this.  measurements[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    SizeedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
23	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].standardMeasurements();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].standardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].standardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].standardMeasurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	93	None	replace
24	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].testMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].testMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].testMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].standardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
25	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getColumns()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getColumns()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getColumns()  -  1;	  Integer    cols    =    measurements[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
26	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getColumns()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getColumns()  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getColumns()  +  1;	  Integer    cols    =    measurements[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
27	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeightEvaluations();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeightEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeightEvaluations();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeightEvaluations();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
28	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeightEvaluations();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeightEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeightEvaluations();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeightEvaluations();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
29	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters.getWeightEvaluations();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters.getWeightEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters.getWeightEvaluations();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeightEvaluations();    	non-compiled	[CE]  ';'  expected	65	None	replace
30	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i  +  1];  [CE]  cannot  find  symbol  restriction  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.restriction[i  +  1];	  WeightedMeasurement    wm    =    this.restriction[i];    	non-compiled	[CE]  cannot  find  symbol  restriction	37	None	replace
31	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  -  index;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getCols()  -  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getCols()  -  index;	  int    cols    =    parameters[i].getCols()    -    index;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
32	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  -  index  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getCols()  -  index  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getCols()  -  index  +  1;	  int    cols    =    parameters[i].getCols()    -    index;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
33	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  /  index;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getCols()  /  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getCols()  /  index;	  int    cols    =    parameters[i].getCols()    -    index;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
34	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  &  cols;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  &  cols;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1]  &  cols;	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	81	None	replace
35	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  *  parameters;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  *  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1]  *  parameters;	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
36	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  *  1];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  *  1];	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  incompatible  types	81	None	replace
37	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  WeightedMeasurement  wm  =  measurements[i  +  11];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  WeightedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    11];    WeightedMeasurement  wm  =  measurements[i  +  11];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	88	None	add
38	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  SizeedMeasurement  wm  =  measurements[i  +  11];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  SizeedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    11];    SizeedMeasurement  wm  =  measurements[i  +  11];	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
39	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  weightedMeasurement  wm  =  measurements[i  +  11];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  weightedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    11];    weightedMeasurement  wm  =  measurements[i  +  11];	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
40	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  WeightedMeasurement  wm  =  measurements[i  +  12];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  WeightedMeasurement  wm  =  measurements[i  +  12];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    11];    WeightedMeasurement  wm  =  measurements[i  +  12];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	88	None	add
41	[BUG]  [BUGGY]  Integer  cols  =  parameters[index].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[index].getCols()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[index].getCols()  -  1;	  Integer    cols    =    parameters[index].getCols();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
42	[BUG]  [BUGGY]  Integer  cols  =  measurements[index].getCols();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[index].getCols();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[index].getCols();	  Integer    cols    =    parameters[index].getCols();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
43	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  costEvaluations;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  costEvaluations;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	78	None	replace
44	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	78	None	replace
45	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  parameters;  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  parameters;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	78	None	replace
46	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  costEvaluations;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  costEvaluations;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	78	None	replace
47	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.measures[i];  [CE]  cannot  find  symbol  measures  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.measures[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.measures[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    weightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol  measures	49	None	replace
48	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  [CE]  cannot  find  symbol  wm  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  cols,  index);	  Arrays.fill(jacobian,    0,    index,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  wm	1	None	replace
49	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [CE]  cannot  find  symbol  wm  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  cols);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  cols);	  Arrays.fill(jacobian,    0,    index,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  wm	1	None	replace
50	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  parameters);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  parameters);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  ';'  expected	25	None	replace
51	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  ';'  expected	25	None	replace
52	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.results);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.results);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.results);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
53	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.parameters);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  this.parameters);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
54	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnCount()  +  1;	  int    cols    =    parameters[i].getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
55	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getColumnCount()  /  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColumnCount()  /  1;	  int    cols    =    parameters[i].getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
56	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter[],int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  parameters,  index);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter[],int)	4	None	replace
57	[BUG]  [BUGGY]  Arrays.fill(parameters,  0,  index,  jacobian);  [CE]  cannot  find  symbol  wm  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(parameters,  0,  index,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(parameters,  0,  index,  jacobian);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  cannot  find  symbol  wm	4	None	replace
58	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,int,int,EstimatedParameter[])  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  parameters);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,int,EstimatedParameter[])	4	None	replace
59	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian,  index,  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,double[],int,EstimatedParameter[])  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian,  index,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian,  index,  parameters);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,double[],int,EstimatedParameter[])	4	None	replace
60	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobian[i];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobian[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobian[i];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  ']'  expected	24	None	replace
61	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index  +  1];  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index  +  1];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  incompatible  types	24	None	replace
62	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i    +    1];    WeightedMeasurement  wm  =  this.  measurements[i  +  1];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	35	None	add
63	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  SizeedMeasurement  wm  =  this.  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  SizeedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i    +    1];    SizeedMeasurement  wm  =  this.  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
64	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  weightedMeasurement  wm  =  this.  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  weightedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i    +    1];    weightedMeasurement  wm  =  this.  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
65	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  SizedMeasurement  wm  =  this.  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  SizedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i    +    1];    SizedMeasurement  wm  =  this.  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
66	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i],  measurements[i].getWeight();  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i],  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i],  measurements[i].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index],    measurements[i].getWeight();    	non-compiled	[CE]  ']'  expected	95	None	replace
67	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i].getWeight();  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index],    measurements[i].getWeight();    	non-compiled	[CE]  ']'  expected	95	None	replace
68	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getRight();  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getRight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getRight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index],    measurements[i].getWeight();    	non-compiled	[CE]  ']'  expected	95	None	replace
69	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0],  measurements[i].getWeight();  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0],  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0],  measurements[i].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index],    measurements[i].getWeight();    	non-compiled	[CE]  ']'  expected	95	None	replace
70	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement(index);  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement(index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].getMeasurement(index);	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
71	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1].getMeasurement();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1].getMeasurement();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1].getMeasurement();	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
72	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement(i);  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement(i);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].getMeasurement(i);	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
73	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnCount()  -  1;	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
74	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  -  2;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnCount()  -  2;	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
75	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasurements();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    jacobian[i].getStandardMeasurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
76	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements(index);  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements(index);	  WeightedMeasurement[]    measurements    =    jacobian[i].getStandardMeasurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
77	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getColumns()  /  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns()  /  1;	  Integer    cols    =    parameters[i].getColumns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
78	[BUG]  [BUGGY]  Arrays.fill(jocobian,  0,  index);  [CE]  cannot  find  symbol  jocobian  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jocobian,  0,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jocobian,  0,  index);	  Arrays.fill(index,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  jocobian	72	None	replace
79	[BUG]  [BUGGY]  Arrays.fill(index,  0,  jacobian,  i);  [CE]  no  suitable  method  found  for  fill(int,int,double[],int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(index,  0,  jacobian,  i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(index,  0,  jacobian,  i);	  Arrays.fill(index,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[],int)	72	None	replace
80	[BUG]  [BUGGY]  Arrays.fill(jacobian,  index,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  index,  0,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  index,  0,  jacobian);	  Arrays.fill(index,    0,    jacobian);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[])	72	None	replace
81	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getCols()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getCols()  -  1;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
82	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols().length  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getCols().length  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getCols().length  -  1;	  int    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
83	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0];  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[0];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[1];    	non-compiled	[CE]  cannot  find  symbol  wm	34	None	replace
84	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[2];  [CE]  cannot  find  symbol  wm  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[2];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[2];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[1];    	non-compiled	[CE]  cannot  find  symbol  wm	34	None	replace
85	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index  +  1);  [CE]  cannot  find  symbol  wm  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index  +  1);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  rows,  index  +  1);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  wm	2	None	replace
86	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  i);  [CE]  cannot  find  symbol  wm  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  rows,  i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  rows,  i);	  Arrays.fill(jacobian,    0,    rows,    index);    	non-compiled	[CE]  cannot  find  symbol  wm	2	None	replace
87	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getCols()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getCols()  -  1;	  Integer    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
88	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getCols()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getCols()  *  2  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getCols()  *  2  -  1;	  Integer    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
89	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  -  1];  [CE]  cannot  find  symbol  wm  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  -  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  -  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    -    1];    	non-compiled	[CE]  cannot  find  symbol  wm	76	None	replace
90	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  -  1];  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  -  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  -  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    -    1];    	non-compiled	[CE]  cannot  find  symbol  wm	76	None	replace
91	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows.length  -  1];  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows.length  -  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows.length  -  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    -    1];    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
92	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1];  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  wm	33	None	replace
93	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[cols  +  1];  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[cols  +  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[cols  +  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  wm	33	None	replace
94	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.length;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.length;	  WeightedMeasurement[]    measurements    =    parameters.results;    	non-compiled	[CE]  incompatible  types	26	None	replace
95	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.toArray(new  WeightedMeasurement[i]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.toArray(new  WeightedMeasurement[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.toArray(new  WeightedMeasurement[i]);	  WeightedMeasurement[]    measurements    =    parameters.results;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
96	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.values;  [CE]  cannot  find  symbol  values  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.values;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.values;	  WeightedMeasurement[]    measurements    =    parameters.results;    	non-compiled	[CE]  cannot  find  symbol  values	26	None	replace
97	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  -  index);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	86	None	replace
98	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  1);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  +  1);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	86	None	replace
99	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  1);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  -  1);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  -  1);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	86	None	replace
100	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length,  index);  [CE]  cannot  find  symbol  wm  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length,  index);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  wm	86	None	replace
101	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  cols;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  cols;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  cols;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
102	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  cols,  costEvaluations;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  cols,  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  cols,  costEvaluations;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
103	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  parameters;  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  parameters;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
104	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  costEvaluations,  maxCostEval;  [CE]  incompatible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  costEvaluations,  maxCostEval;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  costEvaluations,  maxCostEval;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
105	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getColsCount()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColsCount()  -  1;	  int    cols    =    parameters[i].getColsCount();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
106	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  parameters[i].getColsCount()  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColsCount()  +  1;	  int    cols    =    parameters[i].getColsCount();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
107	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getCols()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getCols()  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getCols()  +  1;	  Integer    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
108	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  WeightedMeasurement  wm  =  measurements[index  +  1];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  WeightedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[index    +    1];    WeightedMeasurement  wm  =  measurements[index  +  1];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	73	None	add
109	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  SizeedMeasurement  wm  =  measurements[index  +  1];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  SizeedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[index    +    1];    SizeedMeasurement  wm  =  measurements[index  +  1];	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
110	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  weightedMeasurement  wm  =  measurements[index  +  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  weightedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[index    +    1];    weightedMeasurement  wm  =  measurements[index  +  1];	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
111	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [CE]  cannot  find  symbol  wm  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  rows);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  rows);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  cannot  find  symbol  wm	85	None	replace
112	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  cols);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  cols);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	85	None	replace
113	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length);  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobianEvaluations.length);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobianEvaluations.length);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
114	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasures();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[index].getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[index].getStandardMeasures();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
115	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[index].getStandardMeasures();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[index].getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[index].getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[index].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  	63	None	replace
116	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  *  1];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i  *  1];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i    +    1];    	non-compiled	[CE]  incompatible  types	23	None	replace
117	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[rows  +  1];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[rows  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[rows  +  1];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i    +    1];    	non-compiled	[CE]  incompatible  types	23	None	replace
118	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.  measurements[i];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.  measurements[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  wm  =  this.  measurements[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement[]    wm    =    this.    measurements[i];    	non-compiled	[CE]  incompatible  types	79	None	replace
119	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.messages[i];  [CE]  cannot  find  symbol  messages  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.messages[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  wm  =  this.messages[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement[]    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol  messages	79	None	replace
120	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.measures[i];  [CE]  cannot  find  symbol  measures  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.measures[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  wm  =  this.measures[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement[]    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol  measures	79	None	replace
121	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1].getWeight();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i  +  1].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
122	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getSize();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getSize();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
123	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobianEvaluations);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobianEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index],  jacobianEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
124	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
125	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  jacobianEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  jacobianEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  cols,  jacobianEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
126	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
127	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
128	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  i.getStandardMeasurements();  [CE]  int  cannot  be  dereferenced  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  i.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  i.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasurements();    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
129	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements();  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].measurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].measurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	94	None	replace
130	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  wm.measurements();  [CE]  cannot  find  symbol  wm  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  wm.measurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  wm.measurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  cannot  find  symbol  wm	94	None	replace
131	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].measurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].measurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
132	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements;  [CE]  cannot  find  symbol  measurements  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements;	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  measurements	68	None	replace
133	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].scales;  [CE]  cannot  find  symbol  scales  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].scales;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].scales;	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  scales	68	None	replace
134	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].restriction;  [CE]  cannot  find  symbol  restriction  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].restriction;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].restriction;	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  restriction	68	None	replace
135	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  i,  jacobian.next();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  i,  jacobian.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  i,  jacobian.next();	  WeightedMeasurement[]    measurements    =    jacobian,    i.next();    	non-compiled	[CE]  ';'  expected	31	None	replace
136	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i.next();  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i.next();	  WeightedMeasurement[]    measurements    =    jacobian,    i.next();    	non-compiled	[CE]  ']'  expected	31	None	replace
137	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i.getWeight()  ];  [CE]  int  cannot  be  dereferenced  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i.getWeight()  ];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i.getWeight()  ];	  WeightedMeasurement[]    measurements    =    jacobian,    i.next();    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
138	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getCols()  /  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getCols()  /  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getCols()  /  1;	  Integer    cols    =    parameters[i].getCols()    +    1;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
139	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight(index);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight(index);	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
140	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i  +  1);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i  +  1);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i  +  1);	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
141	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight(i);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight(i);	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
142	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i,  parameters);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i,  parameters);	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
143	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasurements();  [CE]  cannot  find  symbol  samples  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    variables[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  samples	39	None	replace
144	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].measurements;  [CE]  cannot  find  symbol  measurements  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].measurements;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].measurements;	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  measurements	75	None	replace
145	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations,  weightedMeasurement[i  +  1];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations,  weightedMeasurement[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations,  weightedMeasurement[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    weightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  ']'  expected	7	None	replace
146	[BUG]  [BUGGY]  weightedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  weightedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	weightedMeasurement  wm  =  measurements[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    weightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
147	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations  [i  +  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations  [i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  1],  costEvaluations  [i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    weightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  ']'  expected	7	None	replace
148	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainings.next();  [CE]  cannot  find  symbol  remainings  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainings.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.remainings.next();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol  remainings	30	None	replace
149	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.remainders();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
150	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  index.next();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  index.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian,  index.next();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  ';'  expected	30	None	replace
151	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainder();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainder();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.remainder();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
152	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  WeightedMeasurement  wm  =  this.  measurements[index];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  WeightedMeasurement  wm  =  this.  measurements[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[index];    WeightedMeasurement  wm  =  this.  measurements[index];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	69	None	add
153	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  SizeedMeasurement  wm  =  this.  measurements[index];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  SizeedMeasurement  wm  =  this.  measurements[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[index];    SizeedMeasurement  wm  =  this.  measurements[index];	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
154	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  weightedMeasurement  wm  =  this.  measurements[index];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  weightedMeasurement  wm  =  this.  measurements[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[index];    weightedMeasurement  wm  =  this.  measurements[index];	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
155	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  residuals);  [CE]  no  suitable  method  found  for  fill(double[],int,int,int,double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  residuals);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianEvaluations,  residuals);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,int,double[])	71	None	replace
156	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[],EstimatedParameter[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobian,  parameters);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[],EstimatedParameter[])	71	None	replace
157	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  cols);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[],int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  cols);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobian,  cols);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[],int)	71	None	replace
158	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  parameters[i]  *  jacobian;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i]  *  jacobian;	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
159	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i]  *  parameters[i];	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
160	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  *  parameters;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  *  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index]  *  parameters;	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
161	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters.length;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters.length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i]  *  parameters.length;	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  incompatible  types	53	None	replace
162	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[index  +  1];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  parameters[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[index  +  1];	  WeightedMeasurement    wm    =    measurements[index    +    1];    	non-compiled	[CE]  incompatible  types	74	None	replace
163	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index  +  1];  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index  +  1];	  WeightedMeasurement    wm    =    measurements[index    +    1];    	non-compiled	[CE]  incompatible  types	74	None	replace
164	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[index];	  WeightedMeasurement    wm    =    parameters[index];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	1	replace
165	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[index];	  WeightedMeasurement    wm    =    parameters[index];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	1	replace
166	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.trim();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.trim();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.trim();	  WeightedMeasurement[]    measurements    =    parameters.next();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
167	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.get(i);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.get(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.get(i);	  WeightedMeasurement[]    measurements    =    parameters.next();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
168	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  index);  [CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements[i],  index);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,int)	3	None	replace
169	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters[i],  measurements[i]);  [CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter,WeightedMeasurement)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters[i],  measurements[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  parameters[i],  measurements[i]);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,EstimatedParameter,WeightedMeasurement)	3	None	replace
170	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  costEvaluations);  [CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement,int)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  measurements[i],  costEvaluations);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement,int)	3	None	replace
171	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  cols[i]);  [CE]  array  required,  but  int  found  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  cols[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  measurements[i],  cols[i]);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
172	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getColumns().intValue();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getColumns().intValue();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getColumns().intValue();	  Integer    cols    =    parameters[i].getColumns().intValue();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
173	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns().doubleValue();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getColumns().doubleValue();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns().doubleValue();	  Integer    cols    =    parameters[i].getColumns().intValue();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
174	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  this.data.next();  [CE]  cannot  find  symbol  data  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  this.data.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  this.data.next();	  WeightedMeasurement[]    measurements    =    data.next();    	non-compiled	[CE]  cannot  find  symbol  data	80	None	replace
175	[BUG]  [BUGGY]  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[i];	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizeedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
176	[BUG]  [BUGGY]  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizeedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
177	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters[i].getWeight();  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters[i].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1].getWeight();    	non-compiled	[CE]  ']'  expected	14	None	replace
178	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1].getWeight();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  1].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1].getWeight();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
179	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i].getWidth();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i].getWidth();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i].getWidth();	  WeightedMeasurement    wm    =    parameters[i].getWidth();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
180	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getWidth();  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getWidth();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].getWidth();	  WeightedMeasurement    wm    =    parameters[i].getWidth();    	non-compiled	[CE]  double  cannot  be  dereferenced	97	None	replace
181	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  tests[i].getWidth();  [CE]  cannot  find  symbol  tests  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  tests[i].getWidth();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  tests[i].getWidth();	  WeightedMeasurement    wm    =    parameters[i].getWidth();    	non-compiled	[CE]  cannot  find  symbol  tests	97	None	replace
182	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.getStandardMeasures();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
183	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasures();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
184	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  i.getStandardMeasures();  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  i.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  i.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    wm.getStandardMeasures();    	non-compiled	[CE]  int  cannot  be  dereferenced	56	None	replace
185	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  *  11];	  WeightedMeasurement    wm    =    measurements[i    +    11];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
186	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  11];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  *  11];	  WeightedMeasurement    wm    =    measurements[i    +    11];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
187	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(i);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(i);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
188	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobianEvaluations);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobianEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobianEvaluations);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
189	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobian);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  jacobian);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
190	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters[i];	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  ']'  expected	16	None	replace
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  this.  measurements[i  *  1];	  WeightedMeasurement    wm    =    this.    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
192	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[i  *  1];	  WeightedMeasurement    wm    =    this.    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  this.  measurements[index  +  1];	  WeightedMeasurement    wm    =    this.    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
194	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[index  +  1];	  WeightedMeasurement    wm    =    this.    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	1	replace
195	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  i.results,  parameters;  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  i.results,  parameters;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  i.results,  parameters;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
196	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  index;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters,  index;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  incompatible  types	28	None	replace
197	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.results,  costEvaluations;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.results,  costEvaluations;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters,  i.results,  costEvaluations;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  ';'  expected	28	None	replace
198	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurement[i];  [CE]  cannot  find  symbol  measurement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurement[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurement[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurement[i];    	non-compiled	[CE]  cannot  find  symbol  measurement	87	None	replace
199	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measuring[i];  [CE]  cannot  find  symbol  measuring  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measuring[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measuring[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurement[i];    	non-compiled	[CE]  cannot  find  symbol  measuring	87	None	replace
200	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasures();  [CE]  cannot  find  symbol  samples  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  samples[i].getStandardMeasures();	  WeightedMeasurement[]    measurements    =    variables[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  samples	55	None	replace
201	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i  *  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  parameters[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i  *  1];	  WeightedMeasurement    wm    =    parameters[i    +    1];    	non-compiled	[CE]  incompatible  types	19	None	replace
202	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  *  2];	  WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement    wm    =    measurements[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
203	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  *  2];	  WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement    wm    =    measurements[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
204	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  3];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  +  3];	  WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement    wm    =    measurements[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
205	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  3];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  3];	  WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement    wm    =    measurements[i    +    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
206	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns().length  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getColumns().length  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns().length  -  1;	  Integer    cols    =    parameters[i].getColumns()    -    1;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
207	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getRemainders();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getRemainders();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].getRemainders();	  WeightedMeasurement    wm    =    jacobian[i].remainders;    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
208	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders.length;  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders.length;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].remainders.length;	  WeightedMeasurement    wm    =    jacobian[i].remainders;    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
209	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders,  parameters;  [CE]  double  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders,  parameters;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].remainders,  parameters;	  WeightedMeasurement    wm    =    jacobian[i].remainders;    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
210	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters;  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  parameters;	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    weightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  wm	17	None	replace
211	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobian);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobian);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
212	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(i);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
213	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobianEvaluations);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobianEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  jacobianEvaluations);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
214	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  WeightedMeasurement  wm  =  measurements[i  *  1];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  WeightedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    *    1];    WeightedMeasurement  wm  =  measurements[i  *  1];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	20	None	add
215	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  SizeedMeasurement  wm  =  measurements[i  *  1];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  SizeedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    *    1];    SizeedMeasurement  wm  =  measurements[i  *  1];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
216	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  WeightedMeasurement  wm  =  measurements[i  *  2];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  WeightedMeasurement  wm  =  measurements[i  *  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    *    1];    WeightedMeasurement  wm  =  measurements[i  *  2];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	20	None	add
217	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  weightedMeasurement  wm  =  measurements[i  *  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  weightedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    *    1];    weightedMeasurement  wm  =  measurements[i  *  1];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
218	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColsCount()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColsCount()  -  1;	  int    cols    =    measurements[i].getColsCount();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
219	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColsCount()  +  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColsCount()  +  1;	  int    cols    =    measurements[i].getColsCount();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
220	[BUG]  [BUGGY]  SizeedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizeedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizeedMeasurement  wm  =  measurements[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizeedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
221	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  3];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  *  3];	  WeightedMeasurement    wm    =    measurements[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
222	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  3];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  *  3];	  WeightedMeasurement    wm    =    measurements[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
223	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  4];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  *  4];	  WeightedMeasurement    wm    =    measurements[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
224	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  4];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  4];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  *  4];	  WeightedMeasurement    wm    =    measurements[i    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	1	replace
225	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures(index);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures(index);	  WeightedMeasurement[]    measurements    =    jacobian[i].getStandardMeasures();    	non-compiled	[CE]  double  cannot  be  dereferenced	54	None	replace
226	[BUG]  [BUGGY]  Arrays.fill(bewertungen,  0,  jacobian);  [CE]  cannot  find  symbol  bewertungen  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(bewertungen,  0,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(bewertungen,  0,  jacobian);	  Arrays.fill(index,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  bewertungen	72	None	replace
227	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures(index);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures(index);	  WeightedMeasurement[]    measurements    =    variables[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  	55	None	replace
228	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders,  costEvaluations;  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders,  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].remainders,  costEvaluations;	  WeightedMeasurement    wm    =    jacobian[i].remainders;    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
229	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeight(i);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeight(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeight(i);	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
230	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements(index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements(index);	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
231	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i],  costEvaluations();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i],  costEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i],  costEvaluations();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  ';'  expected	94	None	replace
232	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  parameters.length);	  Arrays.fill(jacobian,    0,    rows);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	85	None	replace
233	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  estimates[i  +  1];  [CE]  cannot  find  symbol  estimates  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  estimates[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  estimates[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    SizeedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  estimates	6	None	replace
234	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasurements();  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  results	67	None	replace
235	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements(index);  [CE]  cannot  find  symbol  measurements  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements(index);	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  measurements	67	None	replace
236	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getWeight();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i].getWeight();	  WeightedMeasurement    wm    =    parameters[i].getWidth();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
237	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  calculations[i  +  1];  [CE]  cannot  find  symbol  calculations  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  calculations[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  1],  cost  =  calculations[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    weightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  calculations	7	None	replace
238	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  SizedMeasurement  wm  =  measurements[index  +  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  SizedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[index    +    1];    SizedMeasurement  wm  =  measurements[index  +  1];	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
239	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns(),  measurements[i].intValue();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getColumns(),  measurements[i].intValue();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns(),  measurements[i].intValue();	  Integer    cols    =    parameters[i].getColumns().intValue();    	non-compiled	[CE]  ']'  expected	96	None	replace
240	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  estimates);  [CE]  cannot  find  symbol  estimates  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  estimates);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  estimates);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol  estimates	66	None	replace
241	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements.getWeight();  [CE]  cannot  find  symbol  measurements  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements.getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements.getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  measurements	13	None	replace
242	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnSize();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColumnSize();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnSize();	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
243	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  WeightedMeasurement  wm  =  this.  measurements[i  +  2];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  WeightedMeasurement  wm  =  this.  measurements[i  +  2];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i    +    1];    WeightedMeasurement  wm  =  this.  measurements[i  +  2];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	35	None	add
244	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  SizedMeasurement  wm  =  measurements[i  *  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  SizedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    *    1];    SizedMeasurement  wm  =  measurements[i  *  1];	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
245	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  estimates);  [CE]  cannot  find  symbol  estimates  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  estimates);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  estimates);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol  estimates	64	None	replace
246	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
247	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  costEvaluations);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
248	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measures[i  +  1];  [CE]  cannot  find  symbol  measures  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measures[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measures[i  +  1];	  WeightedMeasurement    wm    =    measurements[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  measures	74	None	replace
249	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures(i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures(i);	  WeightedMeasurement[]    measurements    =    parameters[index].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
250	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[index];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[index];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  incompatible  types	47	None	replace
251	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[0];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[0];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[i],  costEvaluations  =  new  WeightedMeasurement[0];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  incompatible  types	47	None	replace
252	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getCols().length  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[i].getCols().length  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getCols().length  -  1;	  Integer    cols    =    parameters[i].getCols()    -    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
253	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this,  measurements[i];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this,  measurements[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this,  measurements[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    weightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  ']'  expected	49	None	replace
254	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeightEvaluations();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeightEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1].getWeightEvaluations();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeightEvaluations();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
255	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements(index);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements(index);	  WeightedMeasurement[]    measurements    =    variables[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  	39	None	replace
256	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.values();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.values();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.values();	  WeightedMeasurement[]    measurements    =    jacobian.results;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
257	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols()  +  index;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getCols()  +  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getCols()  +  index;	  int    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
258	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].remainings();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].remainings();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].remainings();	  WeightedMeasurement[]    measurements    =    parameters[i].standardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
259	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  costEvaluations;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  costEvaluations;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index],  costEvaluations;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
260	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  index;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  index;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  index;	  WeightedMeasurement    wm    =    jacobian[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	82	None	replace
261	[BUG]  [BUGGY]  Integer  cols  =  parameters[index],  costEvaluations.getCols();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  parameters[index],  costEvaluations.getCols();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[index],  costEvaluations.getCols();	  Integer    cols    =    parameters[index].getCols();    	non-compiled	[CE]  ';'  expected	92	None	replace
262	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight()  -  1;  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight()  -  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight()  -  1;	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index],    measurements[i].getWeight();    	non-compiled	[CE]  ']'  expected	95	None	replace
263	[BUG]  [BUGGY]  Arrays.fill(data[i],  0,  index,  jacobian);  [CE]  cannot  find  symbol  data  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(data[i],  0,  index,  jacobian);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(data[i],  0,  index,  jacobian);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  cannot  find  symbol  data	4	None	replace
264	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  parameters,  costEvaluations);  [CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[],int)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  parameters,  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  parameters,  costEvaluations);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[],int)	4	None	replace
265	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  cost);  [CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,double)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  cost);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements[i],  cost);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,double)	3	None	replace
266	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1],  costEvaluations);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1],  costEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1],  costEvaluations);	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  ';'  expected	81	None	replace
267	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  *  residuals;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1]  *  residuals;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1]  *  residuals;	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
268	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  SizedMeasurement  wm  =  this.  measurements[index];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  SizedMeasurement  wm  =  this.  measurements[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[index];    SizedMeasurement  wm  =  this.  measurements[index];	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
269	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianResults[i]);  [CE]  cannot  find  symbol  jacobianResults  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianResults[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianResults[i]);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  cannot  find  symbol  jacobianResults	71	None	replace
270	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianResistances,  costEvaluations);  [CE]  cannot  find  symbol  jacobianResistances  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianResistances,  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianResistances,  costEvaluations);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  cannot  find  symbol  jacobianResistances	71	None	replace
271	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianRestrictions,  costEvaluations);  [CE]  cannot  find  symbol  jacobianRestrictions  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianRestrictions,  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianRestrictions,  costEvaluations);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  cannot  find  symbol  jacobianRestrictions	71	None	replace
272	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasures();  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  results	62	None	replace
273	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasures();  [CE]  cannot  find  symbol  tests  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  tests	62	None	replace
274	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1],  costEvaluations);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1],  costEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1],  costEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i    +    1];    	non-compiled	[CE]  ';'  expected	23	None	replace
275	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.next;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.next;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters,  i.next;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  ';'  expected	28	None	replace
276	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  maxCostEval;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  maxCostEval;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations,  maxCostEval;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  incompatible  types	78	None	replace
277	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders.next();  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.remainders.next();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol  remainders	30	None	replace
278	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.results.next();  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.results.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.results.next();	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol  results	30	None	replace
279	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  variables[i]  *  jacobian;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  variables[i]  *  jacobian;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  variables[i]  *  jacobian;	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
280	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters[index];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters[index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i]  *  parameters[index];	  WeightedMeasurement    wm    =    jacobian[i]    *    parameters;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
281	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  SizedMeasurement  wm  =  measurements[i  +  11];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  SizedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    11];    SizedMeasurement  wm  =  measurements[i  +  11];	  	non-compiled	[CE]  cannot  find  symbol	88	None	add
282	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  index);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length  +  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length  +  index);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	86	None	replace
283	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian.length);  [CE]  cannot  find  symbol  wm  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian.length);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobian.length);	  Arrays.fill(jacobian,    0,    jacobian.length);    	non-compiled	[CE]  cannot  find  symbol  wm	86	None	replace
284	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.length;  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.length;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.length;	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  results	68	None	replace
285	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i]);  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i]);	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  results	68	None	replace
286	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  2];  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  2];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  2];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  wm	33	None	replace
287	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  i];  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  i];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  wm	33	None	replace
288	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
289	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index].getMeasurement();  [CE]  double  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index].getMeasurement();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index].getMeasurement();	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
290	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getMeasurement();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getMeasurement();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i].getMeasurement();	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
291	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements;  [CE]  cannot  find  symbol  measurements  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].measurements;	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  cannot  find  symbol  measurements	32	None	replace
292	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  *  1];  [CE]  cannot  find  symbol  wm  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  *  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  *  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    -    1];    	non-compiled	[CE]  cannot  find  symbol  wm	76	None	replace
293	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColsCount()  +  index;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColsCount()  +  index;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColsCount()  +  index;	  int    cols    =    measurements[i].getColsCount();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
294	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
295	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  index);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  index);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  index);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
296	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters,  costEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters,  costEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters,  costEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  ';'  expected	25	None	replace
297	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters.length);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters.length);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    parameters);    	non-compiled	[CE]  ';'  expected	25	None	replace
298	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].weightedMeasurements;  [CE]  cannot  find  symbol  weightedMeasurements  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].weightedMeasurements;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].weightedMeasurements;	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    weightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  weightedMeasurements	17	None	replace
299	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  -  1;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index]  -  1;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index]  -  1;	  WeightedMeasurement    wm    =    jacobian[index];    	non-compiled	[CE]  incompatible  types	51	None	replace
300	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.toArray(results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.toArray(results);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.toArray(results);	  WeightedMeasurement[]    measurements    =    parameters.results;    	non-compiled	[CE]  cannot  find  symbol  results	26	None	replace
301	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remainings.next();  [CE]  cannot  find  symbol  remainings  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remainings.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.remainings.next();	  WeightedMeasurement[]    measurements    =    parameters.next();    	non-compiled	[CE]  cannot  find  symbol  remainings	29	None	replace
302	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remainder();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remainder();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.remainder();	  WeightedMeasurement[]    measurements    =    parameters.next();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
303	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters.getWeight();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters.getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  parameters.getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1].getWeight();    	non-compiled	[CE]  ';'  expected	14	None	replace
304	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  data[i].getStandardMeasurements();  [CE]  cannot  find  symbol  data  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  data[i].getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  data[i].getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    jacobian[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  data	38	None	replace
305	[BUG]  [BUGGY]  Arrays.fill(bracobian,  0,  index);  [CE]  cannot  find  symbol  bracobian  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(bracobian,  0,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(bracobian,  0,  index);	  Arrays.fill(index,    0,    jacobian);    	non-compiled	[CE]  cannot  find  symbol  bracobian	72	None	replace
306	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.values;  [CE]  cannot  find  symbol  values  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.values;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.values;	  WeightedMeasurement[]    measurements    =    jacobian.results;    	non-compiled	[CE]  cannot  find  symbol  values	27	None	replace
307	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i].getWidth();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i].getWidth();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[i].getWidth();	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
308	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  jacobianEvaluations);  [CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  jacobianEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements[i],  jacobianEvaluations);	  Arrays.fill(jacobian,    0,    index,    jacobianEvaluations);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,int)	1	None	replace
309	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  metrics.length,  jacobianEvaluations);  [CE]  cannot  find  symbol  metrics  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  metrics.length,  jacobianEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  metrics.length,  jacobianEvaluations);	  Arrays.fill(jacobian,    0,    index,    jacobianEvaluations);    	non-compiled	[CE]  cannot  find  symbol  metrics	1	None	replace
310	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i],  jacobian;  [CE]  cannot  find  symbol  restriction  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i],  jacobian;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.restriction[i],  jacobian;	  WeightedMeasurement    wm    =    this.restriction[i];    	non-compiled	[CE]  cannot  find  symbol  restriction	37	None	replace
311	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[i].getColumnCount()  /  1;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnCount()  /  1;	  int    cols    =    parameters[i].getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
312	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.values();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.values();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.values();	  WeightedMeasurement[]    measurements    =    parameters.results;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
313	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  parameters[i].getMeasurement();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  parameters[i].getMeasurement();  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  parameters[i].getMeasurement();	  WeightedMeasurement    wm    =    jacobian[i].getMeasurement();    	non-compiled	[CE]  ']'  expected	52	None	replace
314	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,EstimatedParameter[])  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements[i],  parameters);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,WeightedMeasurement,EstimatedParameter[])	4	None	replace
315	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements.length,  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[])  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements.length,  parameters);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements.length,  parameters);	  Arrays.fill(jacobian,    0,    index,    parameters);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[])	4	None	replace
316	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.results,  i.results;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.results,  i.results;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.results,  i.results;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  ';'  expected	28	None	replace
317	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  i,  parameters.results;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  i,  parameters.results;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  i,  parameters.results;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  ';'  expected	28	None	replace
318	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  index.results;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  index.results;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters,  index.results;	  WeightedMeasurement[]    measurements    =    parameters,    i.results;    	non-compiled	[CE]  ';'  expected	28	None	replace
319	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  measurements[i].getWeight();  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  measurements[i].getWeight();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1],  measurements[i].getWeight();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1].getWeight();    	non-compiled	[CE]  ']'  expected	14	None	replace
320	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters[i]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index,  parameters[i]);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures(index);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
321	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  costEvaluations);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  costEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index],  costEvaluations);	  WeightedMeasurement    wm    =    jacobian[index];    	non-compiled	[CE]  ';'  expected	51	None	replace
322	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  residuals);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index],  residuals);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index],  residuals);	  WeightedMeasurement    wm    =    jacobian[index];    	non-compiled	[CE]  ';'  expected	51	None	replace
323	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  13];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  +  13];	  WeightedMeasurement    wm    =    measurements[i    +    11];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
324	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  13];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  13];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  13];	  WeightedMeasurement    wm    =    measurements[i    +    11];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
325	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  parameters.next();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  parameters.next();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian,  parameters.next();	  WeightedMeasurement[]    measurements    =    jacobian,    i.next();    	non-compiled	[CE]  ';'  expected	31	None	replace
326	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeightEvaluations();  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeightEvaluations();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeightEvaluations();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeightEvaluations();    	non-compiled	[CE]  ']'  expected	65	None	replace
327	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  index  +  1];  [CE]  cannot  find  symbol  wm  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  index  +  1];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[rows  +  index  +  1];	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index    +    1];    	non-compiled	[CE]  cannot  find  symbol  wm	33	None	replace
328	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  parameters[i]);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  parameters[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  parameters[i]);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
329	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  measurements[i]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  measurements[i]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index,  measurements[i]);	  WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements(index);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
330	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getCols(index);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getCols(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getCols(index);	  Integer    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
331	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  measurements[i],  coefficient);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  measurements[i],  coefficient);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	3	None	replace
332	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  cost);  [CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement,double)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i],  cost);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  measurements[i],  cost);	  Arrays.fill(jacobian,    0,    index,    measurements[i]);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement,double)	3	None	replace
333	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements[i];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  measurements[i];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    costEvaluations;    	non-compiled	[CE]  ']'  expected	78	None	replace
334	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  11];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  11];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  11];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i    +    1];    	non-compiled	[CE]  incompatible  types	23	None	replace
335	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders;  [CE]  cannot  find  symbol  remainders  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.remainders;  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.remainders;	  WeightedMeasurement[]    measurements    =    jacobian.next();    	non-compiled	[CE]  cannot  find  symbol  remainders	30	None	replace
336	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remove(i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.remove(i);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.remove(i);	  WeightedMeasurement[]    measurements    =    parameters.next();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
337	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getColumns(index);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Integer  cols  =  measurements[i].getColumns(index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getColumns(index);	  Integer    cols    =    measurements[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
338	[BUG]  [BUGGY]  int  cols  =  measurements[index].getCols();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[index].getCols();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[index].getCols();	  int    cols    =    measurements[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
339	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasurements();  [CE]  cannot  find  symbol  tests  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  tests[i].measurements.getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  tests	67	None	replace
340	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index].remainders;  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[index].remainders;  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index].remainders;	  WeightedMeasurement    wm    =    jacobian[i].remainders;    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
341	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianRemainders,  costEvaluations);  [CE]  cannot  find  symbol  jacobianRemainders  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianRemainders,  costEvaluations);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianRemainders,  costEvaluations);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  cannot  find  symbol  jacobianRemainders	71	None	replace
342	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian,  index);  [CE]  no  suitable  method  found  for  fill(double[],int,double[],int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  jacobian,  index);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian,  index);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,double[],int)	71	None	replace
343	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  residuals);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[],double[])  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobian,  residuals);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobian,  residuals);	  Arrays.fill(jacobian,    0,    index,    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[],double[])	71	None	replace
344	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  data[i].getStandardMeasures();  [CE]  cannot  find  symbol  data  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  data[i].getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  data[i].getStandardMeasures();	  WeightedMeasurement[]    measurements    =    jacobian[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  data	54	None	replace
345	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	SizedMeasurement[]  measurements  =  new  WeightedMeasurement[i];	          WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
346	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  new  WeightedMeasurement[i];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  wm  =  new  WeightedMeasurement[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  wm  =  new  WeightedMeasurement[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement[]    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
347	[BUG]  [BUGGY]  int  cols  =  measurements[index].getColumnCount();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[index].getColumnCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[index].getColumnCount();	  int    cols    =    measurements[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
348	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measures[i].getWidth();  [CE]  cannot  find  symbol  measures  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  measures[i].getWidth();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measures[i].getWidth();	  WeightedMeasurement    wm    =    parameters[i].getWidth();    	non-compiled	[CE]  cannot  find  symbol  measures	97	None	replace
349	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getStandardMeasurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getStandardMeasurements();	  WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
350	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements(quotes);  [CE]  cannot  find  symbol  quotes  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements(quotes);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements(quotes);	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  cannot  find  symbol  quotes	94	None	replace
351	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements();  [CE]  cannot  find  symbol  tests  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  tests[i].measurements();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  tests[i].measurements();	  WeightedMeasurement[]    measurements    =    parameters[i].measurements();    	non-compiled	[CE]  cannot  find  symbol  tests	94	None	replace
352	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i].results);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i].results);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[i].results);	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  results	68	None	replace
353	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[index]);  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[index]);  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results.toArray(new  WeightedMeasurement[index]);	  WeightedMeasurement[]    measurements    =    parameters[i].results;    	non-compiled	[CE]  cannot  find  symbol  results	68	None	replace
354	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.measures[i  +  1];  [CE]  cannot  find  symbol  measures  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.measures[i  +  1];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.measures[i  +  1];	  WeightedMeasurement    wm    =    this.    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  measures	36	None	replace
355	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  index];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  index];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  index];	  WeightedMeasurement    wm    =    jacobian[i    +    1];    	non-compiled	[CE]  incompatible  types	81	None	replace
356	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.message[i];  [CE]  cannot  find  symbol  message  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  this.message[i];  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.message[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement    wm    =    this.    measurement[i];    	non-compiled	[CE]  cannot  find  symbol  message	87	None	replace
357	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  tests[index].getStandardMeasures();  [CE]  cannot  find  symbol  tests  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement[]  measurements  =  tests[index].getStandardMeasures();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  tests[index].getStandardMeasures();	  WeightedMeasurement[]    measurements    =    parameters[index].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  tests	63	None	replace
358	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations,  parameters);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations,  parameters);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations,  parameters);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
359	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  dataArea,  jacobianEvaluations);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  dataArea,  jacobianEvaluations);  [BUGGY]      double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  dataArea,  jacobianEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i],    jacobianEvaluations);    	non-compiled	[CE]  ';'  expected	90	None	replace
360	[BUG]  [BUGGY]  int  cols  =  measurements[index].getRowCount();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {      [BUGGY]  int  cols  =  measurements[index].getRowCount();  [BUGGY]      WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[index].getRowCount();	  int    cols    =    measurements[i].getRowCount();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
