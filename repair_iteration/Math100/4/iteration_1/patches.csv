bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  jacobianEvaluations);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  cannot  find  symbol  wm	20	None	replace
2	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [CE]  cannot  find  symbol  wm  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  rows,  index);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  rows,  index);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  cannot  find  symbol  wm	20	None	replace
3	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i]);  [CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  measurements[i]);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  measurements[i]);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,WeightedMeasurement)	20	None	replace
4	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  parameters);  [CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[])  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  parameters);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  parameters);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,EstimatedParameter[])	20	None	replace
5	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  WeightedMeasurement  wm  =  measurements[i  +  1];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  WeightedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement  wm  =  measurements[i  +  1];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	10	None	add
6	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  SizeedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  SizeedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    1];    SizeedMeasurement  wm  =  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
7	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  weightedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  weightedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    1];    weightedMeasurement  wm  =  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
8	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  WeightedMeasurement  wm  =  measurements[i  +  2];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  WeightedMeasurement  wm  =  measurements[i  +  2];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    1];    WeightedMeasurement  wm  =  measurements[i  +  2];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	10	None	add
9	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColumnCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  measurements[i].getColumnCount();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColumnCount();	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
10	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  parameters[i].getColumnCount()  -  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColumnCount()  -  1;	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
11	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  parameters[i].getColumnCount()  +  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColumnCount()  +  1;	      int    cols    =    parameters[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
12	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  tests[i];  [CE]  cannot  find  symbol  tests  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  tests[i];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  tests[i];	      WeightedMeasurement    wm    =    parameters[i];    	non-compiled	[CE]  cannot  find  symbol  tests	2	None	replace
13	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i].getWeight();	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
14	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1].getWeight();	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
15	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeight(i);	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
16	[BUG]  [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  variable  measurements  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	        WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	  	non-compiled	[CE]  variable  measurements  is  already  defined  in  method  updateJacobian()	13	None	add
17	[BUG]  [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  weightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  weightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	        WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    weightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
18	[BUG]  [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	        WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizeedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
19	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i  +  1];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  parameters[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  incompatible  types	11	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  *  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
21	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  *  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  *  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
22	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  samples[i  +  1];  [CE]  cannot  find  symbol  samples  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  samples[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  samples[i  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  samples	11	None	replace
23	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i  +  1];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  incompatible  types	9	None	replace
24	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[index];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[index];	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  incompatible  types	9	None	replace
25	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  parameters);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
26	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.results;  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.results;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.results;	      WeightedMeasurement[]    measurements    =    i.results;    	non-compiled	[CE]  cannot  find  symbol  results	3	None	replace
27	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.results;  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.results;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.results;	      WeightedMeasurement[]    measurements    =    i.results;    	non-compiled	[CE]  cannot  find  symbol  results	3	None	replace
28	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.results;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters,  i.results;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters,  i.results;	      WeightedMeasurement[]    measurements    =    i.results;    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.next();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters.next();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters.next();	      WeightedMeasurement[]    measurements    =    i.next();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.next();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian.next();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian.next();	      WeightedMeasurement[]    measurements    =    i.next();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  i.next();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian,  i.next();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian,  i.next();	      WeightedMeasurement[]    measurements    =    i.next();    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [CE]  cannot  find  symbol  wm  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[i];	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  wm	14	None	replace
33	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1];  [CE]  cannot  find  symbol  wm  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  +  1];	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  wm	14	None	replace
34	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[1];  [CE]  cannot  find  symbol  wm  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[1];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[1];	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  wm	14	None	replace
35	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  this.  measurements[i  +  1];	  WeightedMeasurement    wm    =    this.    measurements[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
36	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[i  +  1];	  WeightedMeasurement    wm    =    this.    measurements[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
37	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i];  [CE]  cannot  find  symbol  restriction  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.restriction[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.restriction[i];	  WeightedMeasurement    wm    =    this.    measurements[i];    	non-compiled	[CE]  cannot  find  symbol  restriction	8	None	replace
38	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements();  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
39	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
40	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  wm.getStandardMeasurements();  [CE]  cannot  find  symbol  wm  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  wm.getStandardMeasurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  wm.getStandardMeasurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  wm	15	None	replace
41	[BUG]  [BUGGY]  int  cols  =  measurements[i].getCols();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  measurements[i].getCols();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getCols();	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
42	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  parameters[i].getCols()  -  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getCols()  -  1;	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
43	[BUG]  [BUGGY]  int  cols  =  parameters[i].getCols()  -  index;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  parameters[i].getCols()  -  index;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getCols()  -  index;	      int    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
44	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getCols();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  measurements[i].getCols();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getCols();	      Integer    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
45	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getCols()  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[i].getCols()  -  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getCols()  -  1;	      Integer    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
46	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getCols()  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[i].getCols()  +  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getCols()  +  1;	      Integer    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement  wm  =  this.  measurements[i];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement  wm  =  this.  measurements[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement  wm  =  this.  measurements[i];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	7	None	add
48	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  SizeedMeasurement  wm  =  this.  measurements[i];  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  SizeedMeasurement  wm  =  this.  measurements[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    SizeedMeasurement  wm  =  this.  measurements[i];	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
49	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  weightedMeasurement  wm  =  this.  measurements[i];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  weightedMeasurement  wm  =  this.  measurements[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    weightedMeasurement  wm  =  this.  measurements[i];	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
50	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  SizedMeasurement  wm  =  this.  measurements[i];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  SizedMeasurement  wm  =  this.  measurements[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    SizedMeasurement  wm  =  this.  measurements[i];	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
51	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[index];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[index];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[index];	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  incompatible  types	6	None	replace
52	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement();  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].getMeasurement();  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].getMeasurement();	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
53	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[i]  *  parameters;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i]  *  parameters;	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
54	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures();  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  jacobian[i].getStandardMeasures();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
55	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  variables[i].getStandardMeasures();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  	12	None	replace
56	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  wm.getStandardMeasures();  [CE]  cannot  find  symbol  wm  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  wm.getStandardMeasures();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  wm.getStandardMeasures();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  wm	12	None	replace
57	[BUG]  [BUGGY]  Integer  cols  =  measurements[i].getColumns();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  measurements[i].getColumns();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  measurements[i].getColumns();	      Integer    cols    =    parameters[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
58	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[i].getColumns()  -  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns()  -  1;	      Integer    cols    =    parameters[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
59	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[i].getColumns()  +  1;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns()  +  1;	      Integer    cols    =    parameters[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
60	[BUG]  [BUGGY]  int  cols  =  parameters[i].getColsCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  parameters[i].getColsCount();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  parameters[i].getColsCount();	      int    cols    =    parameters[i].getRowCount();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
61	[BUG]  [BUGGY]  int  cols  =  measurements[i].getRowCount();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  measurements[i].getRowCount();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getRowCount();	      int    cols    =    parameters[i].getRowCount();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
62	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasures();  [CE]  cannot  find  symbol  measurements  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasures();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasures();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol  measurements	12	None	replace
63	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[index].getStandardMeasures();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
64	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasures(index);	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasures();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
65	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeightEvaluations();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeightEvaluations();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index].getWeightEvaluations();	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
66	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].getStandardMeasurements(index);	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
67	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements();  [CE]  cannot  find  symbol  measurements  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements.getStandardMeasurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  measurements	15	None	replace
68	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results;  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].results;  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].results;	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  results	15	None	replace
69	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  this.  measurements[index];	  WeightedMeasurement    wm    =    this.    measurements[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
70	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[index];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  this.  measurements[index];	  WeightedMeasurement    wm    =    this.    measurements[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	1	replace
71	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  index,  residuals);  [CE]  no  suitable  method  found  for  fill(double[],int,int,double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  index,  residuals);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  index,  residuals);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int,double[])	20	None	replace
72	[BUG]  [BUGGY]  Arrays.fill(index,  0,  jacobian);  [CE]  no  suitable  method  found  for  fill(int,int,double[])  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(index,  0,  jacobian);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(index,  0,  jacobian);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(int,int,double[])	20	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[index  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
74	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[index  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[index  +  1];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
75	[BUG]  [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]      WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	        WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    SizedMeasurement[]  measurements  =  new  WeightedMeasurement[index];	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
76	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1];  [CE]  cannot  find  symbol  wm  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index  -  1];	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index];    	non-compiled	[CE]  cannot  find  symbol  wm	14	None	replace
77	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[index];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  parameters[index];  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[index];	      WeightedMeasurement    wm    =    parameters[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
78	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  costEvaluations;	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  incompatible  types	9	None	replace
79	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement[]  wm  =  this.  measurements[i];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement[]  wm  =  this.  measurements[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement[]  wm  =  this.  measurements[i];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	7	None	add
80	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  data.next();  [CE]  cannot  find  symbol  data  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  data.next();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  data.next();	      WeightedMeasurement[]    measurements    =    i.next();    	non-compiled	[CE]  cannot  find  symbol  data	4	None	replace
81	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i  +  1];	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  incompatible  types	6	None	replace
82	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  costEvaluations;  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[i],  costEvaluations;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i],  costEvaluations;	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  incompatible  types	6	None	replace
83	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  SizedMeasurement  wm  =  measurements[i  +  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  1];  SizedMeasurement  wm  =  measurements[i  +  1];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    measurements[i    +    1];    SizedMeasurement  wm  =  measurements[i  +  1];	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
84	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders;  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  jacobian[i].remainders;  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  jacobian[i].remainders;	  WeightedMeasurement    wm    =    jacobian[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
85	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  rows);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  rows);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	20	None	replace
86	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Arrays.fill(jacobian,  0,  jacobian.length);  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Arrays.fill(jacobian,  0,  jacobian.length);	      Arrays.fill(jacobian,    0,    index);    	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	20	None	replace
87	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement  wm  =  this.  measurement[i];  [CE]  variable  wm  is  already  defined  in  method  updateJacobian()  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  this.  measurements[i];  WeightedMeasurement  wm  =  this.  measurement[i];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement    wm    =    this.    measurements[i];    WeightedMeasurement  wm  =  this.  measurement[i];	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  updateJacobian()	7	None	add
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	WeightedMeasurement  wm  =  measurements[i  +  11];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
89	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  measurements[i  +  11];  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i  +  11];	  WeightedMeasurement    wm    =    measurements[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
90	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations);  [BUGGY]    double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  new  WeightedMeasurement[i],  jacobianEvaluations);	  WeightedMeasurement    wm    =    new    WeightedMeasurement[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  int  cols  =  measurements[i].getColsCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  int  cols  =  measurements[i].getColsCount();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	int  cols  =  measurements[i].getColsCount();	      int    cols    =    parameters[i].getRowCount();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
92	[BUG]  [BUGGY]  Integer  cols  =  parameters[index].getCols();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[index].getCols();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[index].getCols();	      Integer    cols    =    parameters[i].getCols();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
93	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].standardMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].standardMeasurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].standardMeasurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  parameters[i].measurements();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  parameters[i].measurements();	      WeightedMeasurement[]    measurements    =    parameters[i].getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
95	[BUG]  [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight();  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement[]  measurements  =  new  WeightedMeasurement[index],  measurements[i].getWeight();	      WeightedMeasurement[]    measurements    =    new    WeightedMeasurement[index].getWeight();    	non-compiled	[CE]  ']'  expected	16	None	replace
96	[BUG]  [BUGGY]  Integer  cols  =  parameters[i].getColumns().intValue();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  Integer  cols  =  parameters[i].getColumns().intValue();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	Integer  cols  =  parameters[i].getColumns().intValue();	      Integer    cols    =    parameters[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
97	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getWidth();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {    [BUGGY]  WeightedMeasurement  wm  =  parameters[i].getWidth();  [BUGGY]    WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i].getWidth();	      WeightedMeasurement    wm    =    parameters[i];    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
