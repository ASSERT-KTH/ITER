bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
2	[BUG]  [BUGGY]  Imerials  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Imerials  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Imerials  ime  =  problem.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
3	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
4	[BUG]  [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  parameters.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
5	[BUG]  [BUGGY]  ImerialsException  ime  =  residuals.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  residuals.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  residuals.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
6	[BUG]  [BUGGY]  ImerialsException  ime  =  this.results.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  this.results.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  this.results.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
7	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  parameters.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  parameters.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  parameters.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problems.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
8	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance();  [CE]  cannot  find  symbol  ImmutableSetUtil  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance();	  InvalidMatrixException    ime    =    ImmutableSet.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableSetUtil	4	None	replace
9	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(problem);  [CE]  cannot  find  symbol  ImmutableSetUtil  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(problem);	  InvalidMatrixException    ime    =    ImmutableSet.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableSetUtil	4	None	replace
10	[BUG]  [BUGGY]  ImmutableSet  ime  =  ImmutableSet.getInstance();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmutableSet  ime  =  ImmutableSet.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmutableSet  ime  =  ImmutableSet.getInstance();	  InvalidMatrixException    ime    =    ImmutableSet.getInstance();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
11	[BUG]  [BUGGY]  null  rows  =  problem.getAllParameters().length;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getAllParameters().length;	  final    int    rows    =    problem.getAllParameters().length;    final    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	23	None	replace
12	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.mean.getInvalidMatrix();  [CE]  cannot  find  symbol  mean  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.mean.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.mean.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol  mean	28	None	replace
13	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.message.getInvalidMatrix();  [CE]  cannot  find  symbol  message  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.message.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.message.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol  message	28	None	replace
14	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  parameters);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
15	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  jTj);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
16	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  error);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
17	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  this.maxCostEval);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  this.maxCostEval);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  this.maxCostEval);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
18	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	int  rows  =  problem.getAllParameters().length  -  1;	  int    rows    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	58	1	replace
19	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length  -  1;  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getAllParameters().length  -  1;	  int    rows    =    problem.getAllParameters().length;    	compilable	  [FE]  EstimationException  	58	1	replace
20	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getMatrix()));  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getMatrix()));  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getMatrix()));	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ".   ");    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
21	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);  [CE]  cannot  find  symbol  jTj  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ".   ");    	non-compiled	[CE]  cannot  find  symbol  jTj	95	None	replace
22	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ", "jTj ",  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ", "jTj ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ", "jTj ",  jTj);	  EstimationProblem    problem    =    ime.getProblem(   "result   ",    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	55	None	replace
23	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  jTj);	  EstimationProblem    problem    =    ime.getProblem(   "result   ",    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	55	None	replace
24	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  parameters);	  EstimationProblem    problem    =    ime.getProblem(   "result   ",    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	55	None	replace
25	[BUG]  [BUGGY]  final  int  rows  =  problem.getColumnCount()  -  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getColumnCount()  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getColumnCount()  -  2;	  final    int    rows    =    problem.getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Integer  rows  =  problem.getMeasurements().length;	  int    rows    =    problem.getMeasurements().length;    Integer    rows    =    problem.getMeasurements().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
27	[BUG]  [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Integer  rows  =  problem.getMeasurements().length;	  int    rows    =    problem.getMeasurements().length;    Integer    rows    =    problem.getMeasurements().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
28	[BUG]  [BUGGY]  int  rows  =  problem.getRanges();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRanges();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRanges();	  int    rows    =    problem.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
29	[BUG]  [BUGGY]  int  rows  =  problem.getRanges().length  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRanges().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRanges().length  -  1;	  int    rows    =    problem.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
30	[BUG]  [BUGGY]  int  rows  =  problem.getRanges().length  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRanges().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRanges().length  +  1;	  int    rows    =    problem.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
31	[BUG]  [BUGGY]  int  rows  =  problem.getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowCount()  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowCount()  -  1;	  int    rows    =    problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  int  rows  =  problem.getColumnCount();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getColumnCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getColumnCount();	  int    rows    =    problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  int  rows  =  problem.getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowCount()  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowCount()  -  2;	  int    rows    =    problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.results.getInvalidMatrixException(jTj);  [CE]  cannot  find  symbol  jTj  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.results.getInvalidMatrixException(jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.results.getInvalidMatrixException(jTj);	  InvalidMatrixException    ime    =    this.results.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  jTj	67	None	replace
35	[BUG]  [BUGGY]  Imerials  ime  =  this.results.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Imerials  ime  =  this.results.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Imerials  ime  =  this.results.getInvalidMatrixException();	  InvalidMatrixException    ime    =    this.results.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
36	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  null);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
37	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
38	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
39	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  null,  parameters);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
40	[BUG]  [BUGGY]  final  int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  final    int    rows    =    problem.getAllParameters().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
41	[BUG]  [BUGGY]  final  int  rows  =  problem.getColumnCount()  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getColumnCount()  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getColumnCount()  -  1;	  final    int    rows    =    problem.getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
42	[BUG]  [BUGGY]  final  int  rows  =  problem.getRowCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRowCount()  *  2  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRowCount()  *  2  -  1;	  final    int    rows    =    problem.getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
43	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
44	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variables. ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variables. ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variables. ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
45	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters);	  EstimationProblem    problem    =    ime.getStandardMatrixOutOfBounds();    	non-compiled	[CE]  ';'  expected	131	None	replace
46	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  parameters;	  EstimationProblem    problem    =    ime.getStandardMatrixOutOfBounds();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	131	None	replace
47	[BUG]  [BUGGY]  final  int  rows  =  this.restriction.getRowCount();  [CE]  cannot  find  symbol  restriction  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.restriction.getRowCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.restriction.getRowCount();	  final    int    rows    =    this.problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  restriction	99	None	replace
48	[BUG]  [BUGGY]  final  int  rows  =  this.result.getRowCount();  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.result.getRowCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.result.getRowCount();	  final    int    rows    =    this.problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  result	99	None	replace
49	[BUG]  [BUGGY]  final  int  rows  =  parameters.getRowCount();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getRowCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getRowCount();	  final    int    rows    =    this.problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
50	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
51	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  jTj,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
52	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  result);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
53	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  parameters);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
54	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  result);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
55	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  residuals);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
56	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  i);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  i);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  i);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
57	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  parameters);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.results,  parameters);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
58	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  problem);  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.results,  problem);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
59	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  jTj);  [CE]  cannot  find  symbol  results  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.results,  jTj);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
60	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  error);  [CE]  cannot  find  symbol  results  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.results,  error);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
61	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  costEvaluations);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	50	None	replace
62	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  jTj);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  jTj);	  EstimationProblem    problem    =    ime.getStandardProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	50	None	replace
63	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  problems);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  problems);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(),  problems);	  EstimationProblem    problem    =    ime.getStandardProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	50	None	replace
64	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  	140	None	replace
65	[BUG]  [BUGGY]  int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  	140	None	replace
66	[BUG]  [BUGGY]  int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  	140	None	replace
67	[BUG]  [BUGGY]  null  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getRowCount();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  not  a  statement	140	None	replace
68	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
69	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  residuals);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
70	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(jTj,  null);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
71	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(this);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(this);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
72	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
73	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
74	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
75	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  result);	  EstimationProblem    problem    =    ime.getMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	38	None	replace
76	[BUG]  [BUGGY]  Imerials  ime  =  problem.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Imerials  ime  =  problem.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Imerials  ime  =  problem.getInvalidMatrix();	  InvalidMatrixException    ime    =    parameters.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
77	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(problem);  [CE]  cannot  find  symbol  ImmutableValues  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableValues.getInstance(problem);	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableValues	2	None	replace
78	[BUG]  [BUGGY]  ImmutableValues  ime  =  ImmutableValues.getInstance();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmutableValues  ime  =  ImmutableValues.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmutableValues  ime  =  ImmutableValues.getInstance();	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
79	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(this);  [CE]  cannot  find  symbol  ImmutableValues  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableValues.getInstance(this);	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableValues	2	None	replace
80	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
81	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(),  parameters);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(),  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardWarnings(),  parameters);	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  ';'  expected	76	None	replace
82	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardErrors();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardErrors();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardErrors();	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	76	None	replace
83	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardWarnings(jTj);	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	76	None	replace
84	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  parameters);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
85	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
86	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  result);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
87	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
88	[BUG]  [BUGGY]  null  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  not  a  statement	78	None	replace
89	[BUG]  [BUGGY]  null  rows  =  problem.getMeasurements().length;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getMeasurements().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getMeasurements().length;	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  not  a  statement	78	None	replace
90	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  problem,  parameters.getImmediateParentPointer();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  problem,  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  problem,  parameters.getImmediateParentPointer();	  ImmediateParentPointer    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  ';'  expected	13	None	replace
91	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  problems.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  problems.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  problems.getImmediateParentPointer();	  ImmediateParentPointer    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
92	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  /  1;	  final    int    rows    =    problem.getRanges().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
93	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  -  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  -  2;	  final    int    rows    =    problem.getRanges().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
94	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  -  1  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  -  1  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  -  1  +  1;	  final    int    rows    =    problem.getRanges().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
95	[BUG]  [BUGGY]  Imerials  ime  =  problem.getInstance();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Imerials  ime  =  problem.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Imerials  ime  =  problem.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
96	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInstance();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
97	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInstanceException();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInstanceException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInstanceException();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
98	[BUG]  [BUGGY]  int  rows  =  problem.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();	  int    rows    =    problem.getMeasurements().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
99	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  problem);	  EstimationProblem    problem    =    ime.getStandardProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	80	None	replace
100	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(problem,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(problem,  parameters);	  EstimationProblem    problem    =    ime.getStandardProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	80	None	replace
101	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  costEvaluations);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(),  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardError(),    parameters);    	non-compiled	[CE]  ';'  expected	32	None	replace
102	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  jTj);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(),  parameters,  jTj);	  EstimationProblem    problem    =    ime.getStandardError(),    parameters);    	non-compiled	[CE]  ';'  expected	32	None	replace
103	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  problems);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  problems);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(),  problems);	  EstimationProblem    problem    =    ime.getStandardError(),    parameters);    	non-compiled	[CE]  ';'  expected	32	None	replace
104	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();	  ImerialMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  ';'  expected	15	None	replace
105	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problems.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problems.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problems.getImmediateParentPointer();	  ImerialMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
106	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getIMerialMatrixException();  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getIMerialMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getIMerialMatrixException();	  ImerialMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Integer  rows  =  problem.getAllParameters().length;	  final    int    rows    =    problem.getAllParameters().length;    int    rows    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
108	[BUG]  [BUGGY]  Integer  rows  =  problem.getAllParameters().length;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Integer  rows  =  problem.getAllParameters().length;	  final    int    rows    =    problem.getAllParameters().length;    int    rows    =    problem.getAllParameters().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	24	1	replace
109	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
110	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max  +  1;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max  +  1;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  ';'  expected	36	None	replace
111	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
112	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  ';'  expected	36	None	replace
113	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  parameters.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  parameters.getImmediateParentPointer();	  InvalidMatrixException    ime    =    parameters.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
114	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  parameters.length  -  1;	  final    int    rows    =    problem.getRanges(),    parameters.length;    	non-compiled	[CE]  ';'  expected	117	None	replace
115	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  parameters.length  +  1;	  final    int    rows    =    problem.getRanges(),    parameters.length;    	non-compiled	[CE]  ';'  expected	117	None	replace
116	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  -  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  parameters.length  -  2;	  final    int    rows    =    problem.getRanges(),    parameters.length;    	non-compiled	[CE]  ';'  expected	117	None	replace
117	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  0,  parameters.length;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  0,  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  0,  parameters.length;	  final    int    rows    =    problem.getRanges(),    parameters.length;    	non-compiled	[CE]  <identifier>  expected	117	None	replace
118	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  residuals);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
119	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
120	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
121	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.mean.getInvalidMatrixException();  [CE]  cannot  find  symbol  mean  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.mean.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.mean.getInvalidMatrixException();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  mean	66	None	replace
122	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.message.getInvalidMatrixException();  [CE]  cannot  find  symbol  message  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.message.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.message.getInvalidMatrixException();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  message	66	None	replace
123	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ", ");  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ", ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ", ");	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
124	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  jTj);	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
125	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  dataArea,  residuals;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  dataArea,  residuals;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  dataArea,  residuals;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    residuals;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
126	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    residuals;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
127	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  null,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
128	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  null,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
129	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  null);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
130	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  null,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
131	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Result ",  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Result ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "Result ",  jTj);	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
132	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Jacobian  error ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Jacobian  error ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "Jacobian  error ");	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
133	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(this,  parameters);	  EstimationProblem    problem    =    ime.getProblem(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
134	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(this,  jTj);	  EstimationProblem    problem    =    ime.getProblem(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
135	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(this,  error);	  EstimationProblem    problem    =    ime.getProblem(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
136	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  costEvaluations);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	52	None	replace
137	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  problems);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  problems);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  problems);	  EstimationProblem    problem    =    ime.getProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	52	None	replace
138	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  jTj);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  parameters,  jTj);	  EstimationProblem    problem    =    ime.getProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	52	None	replace
139	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(message,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
140	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(message,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
141	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(message,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
142	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  cols.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  cols.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  cols.length;	  final    int    rows    =    problem.getRanges(),    costEvaluations.length;    	non-compiled	[CE]  ';'  expected	82	None	replace
143	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  maxCostEval;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  maxCostEval;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  maxCostEval;	  final    int    rows    =    problem.getRanges(),    costEvaluations.length;    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
144	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  0,  costEvaluations.length;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  0,  costEvaluations.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  0,  costEvaluations.length;	  final    int    rows    =    problem.getRanges(),    costEvaluations.length;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
145	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  parameters);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	105	None	replace
146	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	105	None	replace
147	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	105	None	replace
148	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  error);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	105	None	replace
149	[BUG]  [BUGGY]  int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
150	[BUG]  [BUGGY]  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  ime  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ime  =  problem.getInvalidMatrixException();	  ImetarException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  ime	114	None	replace
151	[BUG]  [BUGGY]  ImetarException  ime  =  problem.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImetarException  ime  =  problem.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImetarException  ime  =  problem.getInvalidMatrixException( " ");	  ImetarException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
152	[BUG]  [BUGGY]  ImetarException  ime  =  problems.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImetarException  ime  =  problems.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImetarException  ime  =  problems.getInvalidMatrixException();	  ImetarException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
153	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  criterion);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  criterion);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  criterion);	  EstimationProblem    problem    =    ime.getMatrixException(   "Square    error:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
154	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(   "Square    error:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
155	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(   "Square    error:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
156	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  dataArea.length  -  1;	  final    int    rows    =    problem.getRows(),    dataArea.length;    	non-compiled	[CE]  ';'  expected	123	None	replace
157	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  dataArea.length  +  1;	  final    int    rows    =    problem.getRows(),    dataArea.length;    	non-compiled	[CE]  ';'  expected	123	None	replace
158	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  -  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea.length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  dataArea.length  -  2;	  final    int    rows    =    problem.getRows(),    dataArea.length;    	non-compiled	[CE]  ';'  expected	123	None	replace
159	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  cols.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  cols.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  cols.length;	  final    int    rows    =    problem.getRows(),    dataArea.length;    	non-compiled	[CE]  ';'  expected	123	None	replace
160	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  /  1;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  /  1;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  /  1;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds()    +    1;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
161	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  *  1;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  *  1;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  *  1;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds()    +    1;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
162	[BUG]  [BUGGY]  null  rows  =  problem.getRows().length;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getRows().length;	  int    rows    =    problem.getMeasurements().length;    final    int    rows    =    problem.getMeasurements().length;    	non-compiled	[CE]  not  a  statement	79	None	replace
163	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize();	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
164	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize().length  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize().length  -  1;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
165	[BUG]  [BUGGY]  int  rows  =  problem.getColumnSize().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getColumnSize().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getColumnSize().length;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
166	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(variance,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(variance,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(variance,  parameters);	  EstimationProblem    problem    =    ime.getStandardProblem(variance);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	129	None	replace
167	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.variance);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.variance);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.variance);	  EstimationProblem    problem    =    ime.getStandardProblem(variance);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	129	None	replace
168	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  variables);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  variables);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  variables);	  EstimationProblem    problem    =    ime.getStandardProblem(variance);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	129	None	replace
169	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",n ");  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",n ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",n ");	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ",   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
170	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  null);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  null);	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ",   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
171	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this);	  EstimationProblem    problem    =    ime.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	49	None	replace
172	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  null);	  EstimationProblem    problem    =    ime.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	49	None	replace
173	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(null,  residuals);	  EstimationProblem    problem    =    ime.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	49	None	replace
174	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	add
175	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.printStackTrace();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    e.printStackTrace();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	1	add
176	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.printStackTrace();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.printStackTrace();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    e.printStackTrace();	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	121	1	add
177	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  Exception  e  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  Exception  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    Exception  e  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	add
178	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results.length);  [CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results.length);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	add
179	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	add
180	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  residuals);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	47	None	replace
181	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	47	None	replace
182	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	47	None	replace
183	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows()  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows()  -  1;	  final    int    rows    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
184	[BUG]  [BUGGY]  final  int  rows  =  this.problem.getRows();  [CE]  cannot  find  symbol  problem  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.problem.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.problem.getRows();	  final    int    rows    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol  problem	41	None	replace
185	[BUG]  [BUGGY]  final  int  rows  =  problem.getColumns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getColumns();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getColumns();	  final    int    rows    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
186	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  this.ime.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  this.ime.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  this.ime.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
187	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  this.results.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  this.results.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  this.results.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
188	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problems.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problems.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problems.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
189	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.mean.getImmediateParentPointer();  [CE]  cannot  find  symbol  mean  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.mean.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.mean.getImmediateParentPointer();	  InvalidMatrixException    ime    =    this.ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol  mean	14	None	replace
190	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.message.getImmediateParentPointer();  [CE]  cannot  find  symbol  message  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.message.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.message.getImmediateParentPointer();	  InvalidMatrixException    ime    =    this.ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol  message	14	None	replace
191	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
192	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
194	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
195	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
196	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
197	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
198	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  deprecated. ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
199	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
200	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  can  not  be  removed ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
201	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
202	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Rows  are  not  in  range ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
203	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
204	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
205	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	10	None	replace
206	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);  [CE]  cannot  find  symbol  column  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  column	10	None	replace
207	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(null,  residuals);	  EstimationProblem    problem    =    ime.getProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	107	None	replace
208	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  null);	  EstimationProblem    problem    =    ime.getProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	107	None	replace
209	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(problem,  parameters);  [CE]  cannot  find  symbol  Ime  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(problem,  parameters);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  Ime	135	None	replace
210	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSet.getInstance(problem);  [CE]  cannot  find  symbol  ImmutableSet  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSet.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSet.getInstance(problem);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  ImmutableSet	135	None	replace
211	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(results);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(results);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  results	135	None	replace
212	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(variances);  [CE]  cannot  find  symbol  variances  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(variances);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  variances	135	None	replace
213	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows().length  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows().length  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows().length  /  1;	  final    int    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
214	[BUG]  [BUGGY]  final  int  rows  =  problem.getColumns().length  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getColumns().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getColumns().length  -  1;	  final    int    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
215	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows().length  -  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows().length  -  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows().length  -  2;	  final    int    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
216	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    int  rows  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
217	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  Integer  rows  =  problem.getAllParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  Integer  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    Integer  rows  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
218	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    int  rows  =  problem.getParameters().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
219	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getRows().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    int  rows  =  problem.getRows().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
220	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  Math.max(remainings.length,  max);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  Math.max(remainings.length,  max);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  Math.max(remainings.length,  max);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
221	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  jTj);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  jTj);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
222	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  Math.max(results.length,  max);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  Math.max(results.length,  max);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  Math.max(results.length,  max);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
223	[BUG]  [BUGGY]  Integer  rows  =  problem.getRows().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Integer  rows  =  problem.getRows().length;	  int    rows    =    problem.getMeasurements().length;    int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
224	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	37	None	replace
225	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(this);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(this);	  EstimationProblem    problem    =    ime.getMatrixException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	37	None	replace
226	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(variance);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(variance);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(variance);	  EstimationProblem    problem    =    ime.getProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	108	None	replace
227	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(result);	  EstimationProblem    problem    =    ime.getProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	108	None	replace
228	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(variances);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(variances);	  EstimationProblem    problem    =    ime.getProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	108	None	replace
229	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(this);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(this);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
230	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(jTj);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
231	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(variance);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(variance);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(variance);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
232	[BUG]  [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  problem.getInvalidMatrix();	  InvalidMatrixException    ime    =    problem.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
233	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.restriction.getInvalidMatrix();  [CE]  cannot  find  symbol  restriction  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.restriction.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.restriction.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.results.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol  restriction	29	None	replace
234	[BUG]  [BUGGY]  Imerials  ime  =  this.results.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Imerials  ime  =  this.results.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Imerials  ime  =  this.results.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.results.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
235	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  parameters);  [CE]  cannot  find  symbol  Ime  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  parameters);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  Ime	136	None	replace
236	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSet.getInstance(this);  [CE]  cannot  find  symbol  ImmutableSet  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSet.getInstance(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSet.getInstance(this);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  ImmutableSet	136	None	replace
237	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this);  [CE]  cannot  find  symbol  ImmutableFormat  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  ImmutableFormat	136	None	replace
238	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters);	  EstimationProblem    problem    =    ime.getMatrixIndexOutOfBounds();    	non-compiled	[CE]  ';'  expected	92	None	replace
239	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  parameters;	  EstimationProblem    problem    =    ime.getMatrixIndexOutOfBounds();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	92	None	replace
240	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  parameters);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
241	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  i);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  i);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  i);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
242	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  cols);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  cols);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  cols);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
243	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  residuals);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
244	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  cols;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  cols;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  cols;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
245	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  rowCount  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  rowCount  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  rowCount  +  1;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  ';'  expected	124	None	replace
246	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  0,  rowCount;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  0,  rowCount;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  0,  rowCount;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  <identifier>  expected	124	None	replace
247	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  index;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  index;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  index;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
248	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges()  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges()  -  1;	  final    int    rows    =    problem.getRanges();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
249	[BUG]  [BUGGY]  final  int  rows  =  this.problem.getRanges();  [CE]  cannot  find  symbol  problem  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.problem.getRanges();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.problem.getRanges();	  final    int    rows    =    problem.getRanges();    	non-compiled	[CE]  cannot  find  symbol  problem	5	None	replace
250	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
251	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
252	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	111	None	replace
253	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);  [CE]  cannot  find  symbol  column  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  column);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  column	111	None	replace
254	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
255	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
256	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(result,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(result,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(result,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(result);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	132	None	replace
257	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "problem ",  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "problem ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "problem ",  jTj);	  EstimationProblem    problem    =    ime.getProblem(   "problem   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	109	None	replace
258	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(problem);  [CE]  cannot  find  symbol  ImmutableFormat  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstance(problem);	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableFormat	1	None	replace
259	[BUG]  [BUGGY]  ImmutableFormat  ime  =  ImmutableFormat.getInstance();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmutableFormat  ime  =  ImmutableFormat.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmutableFormat  ime  =  ImmutableFormat.getInstance();	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
260	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstanceUTC();  [CE]  cannot  find  symbol  ImmutableFormat  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstanceUTC();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstanceUTC();	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableFormat	1	None	replace
261	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
262	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(rows);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
263	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
264	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Invalid  parameter: "  +  parameters);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
265	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  null);	  EstimationProblem    problem    =    ime.getStandardError(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
266	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  cols);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  cols);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  cols);	  EstimationProblem    problem    =    ime.getStandardError(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
267	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	137	None	replace
268	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	137	None	replace
269	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: "  +  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: "  +  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  error: "  +  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	137	None	replace
270	[BUG]  [BUGGY]  ImmediateMatrixException  ime  =  problem.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateMatrixException  ime  =  problem.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateMatrixException  ime  =  problem.getImmediateParentPointer();	  InvalidMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
271	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ").toString();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ").toString();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ").toString();	  EstimationProblem    problem    =    ime.getProblem(   "result   ".toString());    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
272	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Result ").toString();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Result ").toString();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "Result ").toString();	  EstimationProblem    problem    =    ime.getProblem(   "result   ".toString());    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
273	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  +  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  +  2;	  final    int    rows    =    problem.getRanges().length    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
274	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Expected    an    error:   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	102	None	replace
275	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: ",  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: ",  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: ",  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Expected    an    error:   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	102	None	replace
276	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  result);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Expected    an    error:   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	102	None	replace
277	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getInvalidMatrixException( " ");	  ImerialsException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
278	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException( ", ");  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getInvalidMatrixException( ", ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getInvalidMatrixException( ", ");	  ImerialsException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
279	[BUG]  [BUGGY]  ImerialsException  ime  =  issue.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  issue.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  issue.getInvalidMatrixException( " ");	  ImerialsException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
280	[BUG]  [BUGGY]  final  int  rows  =  parameters.getRanges().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getRanges().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getRanges().length;	  final    int    rows    =    problems.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
281	[BUG]  [BUGGY]  final  int  rows  =  parameter.getRanges().length;  [CE]  cannot  find  symbol  parameter  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameter.getRanges().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameter.getRanges().length;	  final    int    rows    =    problems.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol  parameter	83	None	replace
282	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(jTj,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(jTj,  problem);	  EstimationProblem    problem    =    ime.getMatrixException(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
283	[BUG]  [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  parameters.getInvalidMatrixException();	  ImerialsException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
284	[BUG]  [BUGGY]  ImerialsException  ime  =  error.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  error.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  error.getInvalidMatrixException();	  ImerialsException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
285	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
286	[BUG]  [BUGGY]  ImerialsException  ime  =  residuals.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  residuals.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  residuals.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
287	[BUG]  [BUGGY]  ImerialsException  ime  =  parameters.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  parameters.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
288	[BUG]  [BUGGY]  ImerialsException  ime  =  this.ime.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  this.ime.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  this.ime.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
289	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  costEvaluations);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
290	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  jTj);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
291	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  null);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  null);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
292	[BUG]  [BUGGY]  final  int  rows  =  problem.getColumns(),  cols.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getColumns(),  cols.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getColumns(),  cols.length;	  final    int    rows    =    problem.getColumns().length;    	non-compiled	[CE]  ';'  expected	43	None	replace
293	[BUG]  [BUGGY]  int  rows  =  problem.getSize().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getSize().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getSize().length;	  int    rows    =    problem.getMeasurements().length;    int    rows    =    problem.getSize().length;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
294	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.length  +  1);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.length  +  1);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.length  +  1);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  cannot  find  symbol  result	11	None	replace
295	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(problem.length);  [CE]  cannot  find  symbol  length  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(problem.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(problem.length);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  cannot  find  symbol  length	11	None	replace
296	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(reason.length);  [CE]  cannot  find  symbol  reason  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(reason.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(reason.length);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  cannot  find  symbol  reason	11	None	replace
297	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Error    reading    variable    residuals.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
298	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Error    reading    variable    residuals.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
299	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Error    reading    variable    residuals.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
300	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  parameters);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
301	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
302	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
303	[BUG]  [BUGGY]  int  rows  =  problem.getRows();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows();	  int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
304	[BUG]  [BUGGY]  int  rows  =  problem.getRows().length  -  1;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows().length  -  1;	  int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
305	[BUG]  [BUGGY]  int  rows  =  problem.getRows().length  +  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows().length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows().length  +  1;	  int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
306	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	110	None	add
307	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    Final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  ';'  expected	110	None	add
308	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.getAllParameters().length);  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.getAllParameters().length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result.getAllParameters().length);	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	110	None	add
309	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  int  cols  =  problem.getAllParameters().length;  [CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  int  cols  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  int  cols  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  cols  is  already  defined  in  method  getCovariances(EstimationProblem)	110	None	add
310	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  parameters.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  parameters.length;	  final    int    rows    =    problem.getRows(),    length;    	non-compiled	[CE]  ';'  expected	86	None	replace
311	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  width;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  width;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  width;	  final    int    rows    =    problem.getRows(),    length;    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
312	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  length  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  length  +  1;	  final    int    rows    =    problem.getRows(),    length;    	non-compiled	[CE]  ';'  expected	86	None	replace
313	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError()  /  1;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError()  /  1;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError()  /  1;	  EstimationProblem    problem    =    ime.getStandardError()    +    1;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
314	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(this.results);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(this.results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(this.results);	  InvalidMatrixException    ime    =    ImeUtil.getInstance();    	non-compiled	[CE]  cannot  find  symbol  results	89	None	replace
315	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(results);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(results);	  InvalidMatrixException    ime    =    ImeUtil.getInstance();    	non-compiled	[CE]  cannot  find  symbol  results	89	None	replace
316	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(problem,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(problem,  parameters);	  EstimationProblem    problem    =    Ime.getInstance(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	63	None	replace
317	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(variances,  problem);	  EstimationProblem    problem    =    Ime.getInstance(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	63	None	replace
318	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(results);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(results);	  EstimationProblem    problem    =    Ime.getInstance(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	63	None	replace
319	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  parameters);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
320	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  residuals);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
321	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  jTj);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
322	[BUG]  [BUGGY]  final  int  rows  =  parameters.getRows().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getRows().length;	  final    int    rows    =    problems.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
323	[BUG]  [BUGGY]  final  int  rows  =  this.restriction.getRows().length;  [CE]  cannot  find  symbol  restriction  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.restriction.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.restriction.getRows().length;	  final    int    rows    =    problems.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  restriction	87	None	replace
324	[BUG]  [BUGGY]  final  int  rows  =  this.problem.getColumnCount();  [CE]  cannot  find  symbol  problem  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.problem.getColumnCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.problem.getColumnCount();	  final    int    rows    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol  problem	17	None	replace
325	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  variables);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  variables);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  variables);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
326	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  result);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
327	[BUG]  [BUGGY]  ImerializationException  ime  =  residuals.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  residuals.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  residuals.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
328	[BUG]  [BUGGY]  ImerializationException  ime  =  parameters.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  parameters.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  parameters.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
329	[BUG]  [BUGGY]  ImerializationException  ime  =  errorMatrix.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  errorMatrix.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  errorMatrix.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
330	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(variances,  parameters);	  EstimationProblem    problem    =    Ime.getInstance(variances);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
331	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.variances);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.variances);	  EstimationProblem    problem    =    Ime.getInstance(variances);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
332	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  variables);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(variances,  variables);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(variances,  variables);	  EstimationProblem    problem    =    Ime.getInstance(variances);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	64	None	replace
333	[BUG]  [BUGGY]  final  int  rows  =  problem.getRangeParameters();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRangeParameters();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRangeParameters();	  final    int    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
334	[BUG]  [BUGGY]  final  int  rows  =  problem.getRangeParameters(),  parameters.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRangeParameters(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRangeParameters(),  parameters.length;	  final    int    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  ';'  expected	106	None	replace
335	[BUG]  [BUGGY]  final  int  rows  =  problem.getRangeParameters().length  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRangeParameters().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRangeParameters().length  -  1;	  final    int    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
336	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  parameters);  [CE]  cannot  find  symbol  ImeUtil  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  parameters);	  InvalidMatrixException    ime    =    ImeUtil.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  ImeUtil	88	None	replace
337	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(this.result);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(this.result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(this.result);	  InvalidMatrixException    ime    =    ImeUtil.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  result	88	None	replace
338	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  ';'  expected	68	None	replace
339	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException(null);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException(null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrixException(null);	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
340	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(message,  parameters);	  EstimationProblem    problem    =    ime.getStandardError(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	118	None	replace
341	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(message,  jTj);	  EstimationProblem    problem    =    ime.getStandardError(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	118	None	replace
342	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.rows,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.rows,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	74	None	replace
343	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  rows,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(AbstractEstimator,int,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  rows,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(AbstractEstimator,int,int)	74	None	replace
344	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results,  cols);  [CE]  cannot  find  symbol  results  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
345	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  cols);  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
346	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  parameters);	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
347	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  residuals);	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
348	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  jTj.intValue());  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  jTj.intValue());  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  jTj.intValue());	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
349	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  jTj);	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
350	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
351	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows);	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
352	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(ex.getMessage());  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(ex.getMessage());  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(ex.getMessage());	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
353	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  cols);	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
354	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ExitStatisticsException  ex  =  new  ExitStatisticsException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ExitStatisticsException  ex  =  new  ExitStatisticsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ExitStatisticsException  ex  =  new  ExitStatisticsException();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
355	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  jTj);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
356	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  cost);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  cost);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  cost);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
357	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  parameters);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
358	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.criterion);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.criterion);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.criterion);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
359	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrix();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem,  parameters.getInvalidMatrix();	  ImerialMatrixException    ime    =    problem.getInvalidMatrix();    	non-compiled	[CE]  ';'  expected	125	None	replace
360	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problems.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problems.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problems.getInvalidMatrix();	  ImerialMatrixException    ime    =    problem.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
361	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrix(),  parameters;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrix(),  parameters;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrix(),  parameters;	  ImerialMatrixException    ime    =    problem.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
362	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(problem);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	70	None	replace
363	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  residuals);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  residuals);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
364	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  variables);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
365	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea,  rowCount;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  dataArea,  rowCount;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  dataArea,  rowCount;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
366	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(variances);  [CE]  cannot  find  symbol  variances  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableValues.getInstance(variances);	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol  variances	2	None	replace
367	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(null);  [CE]  cannot  find  symbol  ImmutableValues  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableValues.getInstance(null);	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableValues	2	None	replace
368	[BUG]  [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problems.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
369	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(null,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(null,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(null,  residuals);	  EstimationProblem    problem    =    ime.getStandardError(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
370	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(null,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(null,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(null,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardError(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
371	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  residuals.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  residuals.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  residuals.getImmediateParentPointer();	  InvalidMatrixException    ime    =    issue.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
372	[BUG]  [BUGGY]  int  rows  =  this.problem.getRowCount();  [CE]  cannot  find  symbol  problem  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  this.problem.getRowCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  this.problem.getRowCount();	  int    rows    =    problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  problem	8	None	replace
373	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
374	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  [0];  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  [0];  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds()  [0];	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds()    +    1;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	replace
375	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
376	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  result);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
377	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  +  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  parameters.length  +  2;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  parameters.length  +  2;	  final    int    rows    =    problem.getRanges(),    parameters.length;    	non-compiled	[CE]  ';'  expected	117	None	replace
378	[BUG]  [BUGGY]  int  rows  =  problem.getRows().length;  Integer  rows  =  problem.getMeasurements().length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows().length;  Integer  rows  =  problem.getMeasurements().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows().length;  Integer  rows  =  problem.getMeasurements().length;	  int    rows    =    problem.getMeasurements().length;    Integer    rows    =    problem.getMeasurements().length;    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
379	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(mean,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(mean,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(mean,  residuals);	  EstimationProblem    problem    =    ime.getMatrixException(mean);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
380	[BUG]  [BUGGY]  final  int  rows  =  parameters.getRows();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getRows();	  final    int    rows    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
381	[BUG]  [BUGGY]  final  int  rows  =  problems.getRows();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problems.getRows();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problems.getRows();	  final    int    rows    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol  problems	41	None	replace
382	[BUG]  [BUGGY]  ImegMatrixException  ime  =  problem.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImegMatrixException  ime  =  problem.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImegMatrixException  ime  =  problem.getImmediateParentPointer();	  InvalidMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
383	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize(),  costEvaluations.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize(),  costEvaluations.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize(),  costEvaluations.length;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  ';'  expected	119	None	replace
384	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize(),  length;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize(),  length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize(),  length;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
385	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  residuals,  costEvaluations;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  residuals,  costEvaluations;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  residuals,  costEvaluations;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    residuals;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	91	None	replace
386	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  parameters);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
387	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  costEvaluations);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  costEvaluations);	  EstimationProblem    problem    =    ime.getProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	52	None	replace
388	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  results	10	None	replace
389	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  rows);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows,  rows);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	10	None	replace
390	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.measure.getInvalidMatrixException();  [CE]  cannot  find  symbol  measure  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.measure.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.measure.getInvalidMatrixException();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  measure	66	None	replace
391	[BUG]  [BUGGY]  final  int  rows  =  parameters.getColumnCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getColumnCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getColumnCount();	  final    int    rows    =    problem.getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
392	[BUG]  [BUGGY]  final  int  rows  =  parameter.getRows().length;  [CE]  cannot  find  symbol  parameter  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameter.getRows().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameter.getRows().length;	  final    int    rows    =    problems.getRows().length;    	non-compiled	[CE]  cannot  find  symbol  parameter	87	None	replace
393	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  parameters,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
394	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  residuals);  [CE]  cannot  find  symbol  Ime  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  residuals);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  Ime	136	None	replace
395	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  problem);  [CE]  cannot  find  symbol  Ime  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  problem);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  Ime	136	None	replace
396	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  estimations);  [CE]  cannot  find  symbol  estimations  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  estimations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  estimations);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  estimations	136	None	replace
397	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  ProblemUtil.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  ProblemUtil.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  ProblemUtil.getImmediateParentPointer();	  ImmediateParentPointer    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
398	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  problematic.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  problematic.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  problematic.getImmediateParentPointer();	  ImmediateParentPointer    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
399	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(results);  [CE]  cannot  find  symbol  results  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSetUtil.getInstance(results);	  InvalidMatrixException    ime    =    ImmutableSet.getInstance();    	non-compiled	[CE]  cannot  find  symbol  results	4	None	replace
400	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtilities.getInstance(problem);  [CE]  cannot  find  symbol  ImmutableSetUtilities  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableSetUtilities.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableSetUtilities.getInstance(problem);	  InvalidMatrixException    ime    =    ImmutableSet.getInstance();    	non-compiled	[CE]  cannot  find  symbol  ImmutableSetUtilities	4	None	replace
401	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  costEvaluations.length  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  costEvaluations.length  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  costEvaluations.length  +  1;	  final    int    rows    =    problem.getRanges(),    costEvaluations.length;    	non-compiled	[CE]  ';'  expected	82	None	replace
402	[BUG]  [BUGGY]  final  int  rows  =  problems.getRows().length  -  1;  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problems.getRows().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problems.getRows().length  -  1;	  final    int    rows    =    problem.getRows().length    -    1;    	non-compiled	[CE]  cannot  find  symbol  problems	42	None	replace
403	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(problem,  residuals);  [CE]  cannot  find  symbol  Ime  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(problem,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(problem,  residuals);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  Ime	135	None	replace
404	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.setIndexOutOfBoundsException(e);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.setIndexOutOfBoundsException(e);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    e.setIndexOutOfBoundsException(e);	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
405	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.initCause(JavaScriptConstants.EXPR_RESULT);  [CE]  cannot  find  symbol  JavaScriptConstants  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  e.initCause(JavaScriptConstants.EXPR_RESULT);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    e.initCause(JavaScriptConstants.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  JavaScriptConstants	121	None	add
406	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().initCause(problem);  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().initCause(problem);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().initCause(problem);	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	110	None	add
407	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().init(rows);  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().init(rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException().init(rows);	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	110	None	add
408	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JacobianProblem ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JacobianProblem ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "JacobianProblem ");	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
409	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JavaScriptException ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JavaScriptException ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "JavaScriptException ");	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
410	[BUG]  [BUGGY]  final  int  rows  =  problem.getRowCount()  /  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRowCount()  /  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRowCount()  /  1;	  final    int    rows    =    problem.getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
411	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  +  1L;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  +  1L;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  +  1L;	  final    int    rows    =    problem.getRanges().length    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
412	[BUG]  [BUGGY]  int  rows  =  problem.getRangeParameters().length;  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRangeParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRangeParameters().length;	  int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
413	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(results);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  results	122	None	replace
414	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
415	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
416	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(message,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardError(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	118	None	replace
417	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  costEvaluations);	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
418	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(jTj,  result);	  EstimationProblem    problem    =    ime.getProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	51	None	replace
419	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  +  problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Expected    an    error:   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	102	None	replace
420	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  costEvaluations);	  EstimationProblem    problem    =    ime.getMatrixException(   "Square    error:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
421	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(this,  costEvaluations);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	105	None	replace
422	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  parameters.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  parameters.getImmediateParentPointer();	  InvalidMatrixException    ime    =    parameters.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
423	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  issue.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  issue.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  issue.getImmediateParentPointer();	  ImerialMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
424	[BUG]  [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  problem.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
425	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  jTj,  result);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	47	None	replace
426	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  costEvaluations);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.results,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.results,  costEvaluations);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
427	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  result);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(result);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	132	None	replace
428	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  residuals);  [CE]  cannot  find  symbol  ImeUtil  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(problem,  residuals);	  InvalidMatrixException    ime    =    ImeUtil.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  ImeUtil	88	None	replace
429	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  variables);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  variables);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  variables);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
430	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(null,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(null,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(null,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	49	None	replace
431	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  residuals;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  residuals;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardMatrixOutOfBounds(),  residuals;	  EstimationProblem    problem    =    ime.getStandardMatrixOutOfBounds();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	131	None	replace
432	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ",  jTj,  residuals);	  EstimationProblem    problem    =    ime.getProblem(   "result   ",    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	55	None	replace
433	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  costEvaluations);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(),  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	50	None	replace
434	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  criterion);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrixException( " ",  criterion);	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
435	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "problem. ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "problem. ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "problem. ");	  EstimationProblem    problem    =    ime.getProblem(   "problem   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	109	None	replace
436	[BUG]  [BUGGY]  final  int  rows  =  this.results.getRanges().length;  [CE]  cannot  find  symbol  results  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.results.getRanges().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.results.getRanges().length;	  final    int    rows    =    problems.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol  results	83	None	replace
437	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
438	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  InvalidMatrixException  ime  =  ime.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    InvalidMatrixException  ime  =  ime.getInvalidMatrixException();	  	non-compiled	[CE]  cannot  find  symbol	57	None	add
439	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(variances);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(variances);	  EstimationProblem    problem    =    ime.getStandardProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	80	None	replace
440	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  residuals.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  residuals.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  residuals.getInvalidMatrix();	  InvalidMatrixException    ime    =    problems.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
441	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  parameters.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  parameters.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  parameters.getInvalidMatrix();	  InvalidMatrixException    ime    =    parameters.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
442	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( ", ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( ", ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
443	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( ", ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( ", ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( ", ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
444	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
445	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
446	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( ", ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( ", ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( ", ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	137	None	replace
447	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ",  0));  [CE]  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ",  0));  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( " ",  0));	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  	137	None	replace
448	[BUG]  [BUGGY]  final  int  rows  =  problems.getRanges().length  -  1;  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problems.getRanges().length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problems.getRanges().length  -  1;	  final    int    rows    =    problem.getRanges().length    -    1;    	non-compiled	[CE]  cannot  find  symbol  problems	6	None	replace
449	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  costEvaluations;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  costEvaluations;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  costEvaluations;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
450	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  residuals;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  residuals;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  residuals;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	36	None	replace
451	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  costEvaluations);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(),  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardError(),    parameters);    	non-compiled	[CE]  ';'  expected	32	None	replace
452	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals: "  +  problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Error    reading    variable    residuals.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
453	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(null,  jTj);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
454	[BUG]  [BUGGY]  final  int  rows  =  problems.getRangeParameters().length;  [CE]  cannot  find  symbol  problems  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problems.getRangeParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problems.getRangeParameters().length;	  final    int    rows    =    problem.getRangeParameters().length;    	non-compiled	[CE]  cannot  find  symbol  problems	106	None	replace
455	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  costEvaluations);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
456	[BUG]  [BUGGY]  Final  int  rows  =  problem.getAllParameters().length;  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Final  int  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Final  int  rows  =  problem.getAllParameters().length;	  final    int    rows    =    problem.getAllParameters().length;    Final    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	25	None	replace
457	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);  [CE]  cannot  find  symbol  results  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(results);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  results	111	None	replace
458	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.rows);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
459	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.rows);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.rows);	  final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	111	1	replace
460	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  parameters.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  parameters.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  parameters.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
461	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  residuals.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  residuals.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  residuals.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
462	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "));  [CE]  unclosed  string  literal  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "));	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
463	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
464	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
465	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: "));  [CE]  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: "));	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  	115	None	replace
466	[BUG]  [BUGGY]  ImerializationException  ime  =  parameter.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  parameter.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  parameter.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
467	[BUG]  [BUGGY]  ImetarException  ime  =  issue.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImetarException  ime  =  issue.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImetarException  ime  =  issue.getInvalidMatrixException();	  ImetarException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
468	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(null);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
469	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(variances);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(variances);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
470	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInstance(problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInstance(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInstance(problem);	  EstimationProblem    problem    =    ime.getInstance();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	62	None	replace
471	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(this,  residuals);	  EstimationProblem    problem    =    ime.getProblem(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
472	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(this,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(this,  costEvaluations);	  EstimationProblem    problem    =    ime.getProblem(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	141	None	replace
473	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  jTj);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
474	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(problem,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(problem,  parameters);	  EstimationProblem    problem    =    ime.getProblem(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	108	None	replace
475	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  0);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  0);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  0);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
476	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
477	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
478	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  cannot  find  symbol  Ex  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    Ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  cannot  find  symbol  Ex	9	None	add
479	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.measure.getInvalidMatrix();  [CE]  cannot  find  symbol  measure  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.measure.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.measure.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol  measure	28	None	replace
480	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.measure.getImmediateParentPointer();  [CE]  cannot  find  symbol  measure  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.measure.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.measure.getImmediateParentPointer();	  InvalidMatrixException    ime    =    this.ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol  measure	14	None	replace
481	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
482	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj.toString());  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ",  jTj.toString());  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ",  jTj.toString());	  EstimationProblem    problem    =    ime.getProblem(   "result   ".toString());    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
483	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ".toString(),  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "result ".toString(),  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "result ".toString(),  residuals);	  EstimationProblem    problem    =    ime.getProblem(   "result   ".toString());    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	56	None	replace
484	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(mean,  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(mean,  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(mean,  residuals);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(mean);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	133	None	replace
485	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(problem,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(problem,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
486	[BUG]  [BUGGY]  int  rows  =  problem.getRanges(),  costEvaluations.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRanges(),  costEvaluations.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRanges(),  costEvaluations.length;	  int    rows    =    problem.getRanges().length;    	non-compiled	[CE]  ';'  expected	93	None	replace
487	[BUG]  [BUGGY]  ImerialsException  ime  =  problems.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problems.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problems.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
488	[BUG]  [BUGGY]  ImerialsException  ime  =  problem.getInstance();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problem.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problem.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
489	[BUG]  [BUGGY]  ImerializationException  ime  =  problem.getInstance();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  problem.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  problem.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
490	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  residuals.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  residuals.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  residuals.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problems.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
491	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows.length);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(rows.length);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	11	None	replace
492	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.result.length);  [CE]  cannot  find  symbol  result  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.result.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(this.result.length);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  cannot  find  symbol  result	11	None	replace
493	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  iSquare);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  iSquare);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(jTj,  iSquare);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	69	None	replace
494	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  parameter.getImmediateParentPointer();  [CE]  cannot  find  symbol  parameter  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  parameter.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  parameter.getImmediateParentPointer();	  InvalidMatrixException    ime    =    problems.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol  parameter	127	None	replace
495	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  residuals);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  residuals);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  residuals);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
496	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable: "  +  problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
497	[BUG]  [BUGGY]  int  rows  =  problem.getRows(),  length;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows(),  length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows(),  length;	  int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
498	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ". ");  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ". ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  problem.getInvalidMatrixException( ". ");	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ".   ");    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
499	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }	  final    int    rows    =    problem.getAllParameters().length;    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	24	None	replace
500	[BUG]  [BUGGY]  final  int  rows  =  parameters.getRanges();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameters.getRanges();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameters.getRanges();	  final    int    rows    =    problem.getRanges();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
501	[BUG]  [BUGGY]  final  int  rows  =  problems.getRanges();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problems.getRanges();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problems.getRanges();	  final    int    rows    =    problem.getRanges();    	non-compiled	[CE]  cannot  find  symbol  problems	5	None	replace
502	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  criterion);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  criterion);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  criterion);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
503	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  rows,  cols);  [CE]  cannot  find  symbol  results  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  rows,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this.results,  rows,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  results	74	None	replace
504	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(null,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(null,  parameters);	  EstimationProblem    problem    =    ime.getMatrixException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	37	None	replace
505	[BUG]  [BUGGY]  ImerialsException  ime  =  this.results.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  this.results.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  this.results.getInvalidMatrixException();	  InvalidMatrixException    ime    =    this.results.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
506	[BUG]  [BUGGY]  ImerialsException  ime  =  residuals.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  residuals.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  residuals.getInvalidMatrixException();	  ImerialsException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
507	[BUG]  [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problems.getInvalidMatrixException();	  ImerialsException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
508	[BUG]  [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  parameters.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  parameters.getInvalidMatrixException( " ");	  ImerialsException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
509	[BUG]  [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  problems.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  problems.getInvalidMatrixException( " ");	  ImerialsException    ime    =    ime.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
510	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  parameters,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  parameters,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  parameters,  costEvaluations);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
511	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
512	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  issue.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  issue.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  issue.getInvalidMatrixException();	  ImerialMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
513	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(variances);  [CE]  cannot  find  symbol  variances  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(variances);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstance(variances);	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  variances	1	None	replace
514	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this.results);  [CE]  cannot  find  symbol  results  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this.results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstance(this.results);	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
515	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  costEvaluations);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  costEvaluations);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
516	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  residuals;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  residuals;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixIndexOutOfBounds(),  residuals;	  EstimationProblem    problem    =    ime.getMatrixIndexOutOfBounds();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	92	None	replace
517	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
518	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
519	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
520	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
521	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row  rows:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row  rows:n ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
522	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row  rows:n ");  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row  rows:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row  rows:n ");	          final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	115	1	replace
523	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters.length;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  max,  parameters.length;	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    max;    	non-compiled	[CE]  ';'  expected	36	None	replace
524	[BUG]  [BUGGY]  final  int  rows  =  this.restriction.getRanges().length;  [CE]  cannot  find  symbol  restriction  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.restriction.getRanges().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.restriction.getRanges().length;	  final    int    rows    =    problems.getRanges().length;    	non-compiled	[CE]  cannot  find  symbol  restriction	83	None	replace
525	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Exception  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  Exception  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    Exception  ex  =  new  ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
526	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");  [CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Example  error: ");	  	non-compiled	[CE]  variable  ex  is  already  defined  in  method  getCovariances(EstimationProblem)	9	None	add
527	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  problem.results);  [CE]  cannot  find  symbol  results  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  problem.results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  problem.results);	  InvalidMatrixException    ime    =    Ime.getInstance(this.results);    	non-compiled	[CE]  cannot  find  symbol  results	90	None	replace
528	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(jTj,  jTj);	  EstimationProblem    problem    =    ime.getStandardProblem(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	48	None	replace
529	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getInvalidMatrixException( " "));  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getInvalidMatrixException( " "));  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem.getInvalidMatrixException( " "));	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ".   ");    	non-compiled	[CE]  	95	None	replace
530	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem));  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem));  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( " ".equals(problem));	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ".   ");    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
531	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem,  parameters);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse: "  +  problem,  parameters);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse:   "    +    parameters);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	46	None	replace
532	[BUG]  [BUGGY]  ImerializationException  ime  =  ime,  problem.getInvalidMatrix();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  ime,  problem.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  ime,  problem.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  ';'  expected	126	None	replace
533	[BUG]  [BUGGY]  ImerializationException  ime  =  issue.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  issue.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  issue.getInvalidMatrix();	  ImerializationException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
534	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  cost);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(),  parameters,  cost);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(),  parameters,  cost);	  EstimationProblem    problem    =    ime.getStandardError(),    parameters);    	non-compiled	[CE]  ';'  expected	32	None	replace
535	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
536	[BUG]  [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	1	replace
537	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(problem);	  EstimationProblem    problem    =    ime.getStandardError(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	75	None	replace
538	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Success ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "Success ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "Success ");	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
539	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JavaScript  error ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem( "JavaScript  error ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem( "JavaScript  error ");	  EstimationProblem    problem    =    ime.getProblem(   "Result   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	54	None	replace
540	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(result);	  EstimationProblem    problem    =    ime.getMatrixException(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	97	None	replace
541	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges().length  /  2  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges().length  /  2  +  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges().length  /  2  +  1;	  final    int    rows    =    problem.getRanges().length    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
542	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  result);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(result);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	132	None	replace
543	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(problem,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(problem,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(problem,  null);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	72	None	replace
544	[BUG]  [BUGGY]  ImerialsException  ime  =  ime,  problem.getInvalidMatrix();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  ime,  problem.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  ime,  problem.getInvalidMatrix();	  ImerialsException    ime    =    ime.getInvalidMatrix();    	non-compiled	[CE]  ';'  expected	84	None	replace
545	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  criterion);  [CE]  cannot  find  symbol  criterion  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  criterion);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ", ",  criterion);	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ",   ");    	non-compiled	[CE]  cannot  find  symbol  criterion	60	None	replace
546	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",  null ");  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",  null ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem.getInvalidMatrixException( ",  null ");	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   ",   ");    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
547	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.results.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.results.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.results.getInvalidMatrixException( " ");	  InvalidMatrixException    ime    =    this.results.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  results	67	None	replace
548	[BUG]  [BUGGY]  null  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  null  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	null  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  final    int    rows    =    problem.getAllParameters().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  not  a  statement	26	None	replace
549	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  problem);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  problem);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
550	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  errorResults);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  errorResults);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  errorResults);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
551	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  errorRestriction);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  errorRestriction);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  errorRestriction);	  EstimationProblem    problem    =    ime.getProblem(),    residuals);    	non-compiled	[CE]  ';'  expected	53	None	replace
552	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  java.util.ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  java.util.ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  java.util.ArrayIndexOutOfBoundsException  ex  =  new  java.util.ArrayIndexOutOfBoundsException();	  	non-compiled	[CE]  cannot  find  symbol	110	None	add
553	[BUG]  [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    final  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  	non-compiled	[CE]  	110	None	add
554	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(variants);  [CE]  cannot  find  symbol  variants  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableValues.getInstance(variants);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableValues.getInstance(variants);	  InvalidMatrixException    ime    =    ImmutableValues.getInstance();    	non-compiled	[CE]  cannot  find  symbol  variants	2	None	replace
555	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  a  non-function  problem. ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  a  non-function  problem. ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  a  non-function  problem. ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "   "));    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	137	None	replace
556	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrix();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrix();	  InvalidMatrixException    ime    =    problem.getInvalidMatrix();    	non-compiled	[CE]  ';'  expected	27	None	replace
557	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Exception  e  =  new  ArrayIndexOutOfBoundsException( " ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
558	[BUG]  [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException( " ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Exception  e  =  new  ArrayIndexOutOfBoundsException( " ");	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(   "   "));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	replace
559	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
560	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
561	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(message,  null);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
562	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  final  int  rows  =  problem.getAllParameters().length;  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  final  int  rows  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  final  int  rows  =  problem.getAllParameters().length;  }	  final    int    rows    =    problem.getAllParameters().length;    final    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	replace
563	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  error);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
564	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  sourceName);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  sourceName);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getInvalidMatrixException(message,  sourceName);	  EstimationProblem    problem    =    ime.getInvalidMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	71	None	replace
565	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals:n ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals:n ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Error  reading  variable  residuals:n ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Error    reading    variable    residuals.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
566	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(result);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImeUtil.getInstance(result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImeUtil.getInstance(result);	  InvalidMatrixException    ime    =    ImeUtil.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  result	88	None	replace
567	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result,  dataset.length);  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result,  dataset.length);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException(result,  dataset.length);	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(result.length);    	non-compiled	[CE]  cannot  find  symbol  result	11	None	replace
568	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem,  parameters.getImmediateParentPointer();	  InvalidMatrixException    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  ';'  expected	12	None	replace
569	[BUG]  [BUGGY]  int  rows  =  problem.getRows(),  cols.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRows(),  cols.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRows(),  cols.length;	  int    rows    =    problem.getRows().length;    	non-compiled	[CE]  ';'  expected	73	None	replace
570	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " "));	  	non-compiled	[CE]  	121	None	add
571	[BUG]  [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  [CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]          ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException();  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	                ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException( " ");	  	non-compiled	[CE]  variable  e  is  already  defined  in  method  getCovariances(EstimationProblem)	121	None	add
572	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(result);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(result);	  EstimationProblem    problem    =    Ime.getInstance(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	63	None	replace
573	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError()  *  1;  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError()  *  1;  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError()  *  1;	  EstimationProblem    problem    =    ime.getStandardError()    +    1;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	33	None	replace
574	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(message,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(message,  error);	  EstimationProblem    problem    =    ime.getStandardError(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	118	None	replace
575	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  error);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getProblem(),  parameters,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getProblem(),  parameters,  error);	  EstimationProblem    problem    =    ime.getProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	52	None	replace
576	[BUG]  [BUGGY]  final  int  rows  =  problem.getRanges(),  costEvaluations.length  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRanges(),  costEvaluations.length  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRanges(),  costEvaluations.length  -  1;	  final    int    rows    =    problem.getRanges(),    costEvaluations.length;    	non-compiled	[CE]  ';'  expected	82	None	replace
577	[BUG]  [BUGGY]  e.printStackTrace();  [CE]  cannot  find  symbol  e  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  e.printStackTrace();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	e.printStackTrace();	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	non-compiled	[CE]  cannot  find  symbol  e	122	None	replace
578	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Exception  e  =  new  ArrayIndexOutOfBoundsException();	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
579	[BUG]  [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException();  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Exception  e  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Exception  e  =  new  ArrayIndexOutOfBoundsException();	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
580	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  + "expected  an  error: ");  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  + "expected  an  error: ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Expected  an  error: "  + "expected  an  error: ");	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Expected    an    error:   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	102	None	replace
581	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(message);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(message);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardWarnings(message);	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	76	None	replace
582	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(this);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardWarnings(this);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardWarnings(this);	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	76	None	replace
583	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardParameters();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardParameters();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardParameters();	  EstimationProblem    problem    =    ime.getStandardWarnings();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	76	None	replace
584	[BUG]  [BUGGY]  ImerializationException  ime  =  this.results.getInvalidMatrix();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  this.results.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  this.results.getInvalidMatrix();	  InvalidMatrixException    ime    =    this.results.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
585	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(mean,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(mean,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(mean,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(mean);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	116	None	replace
586	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.problems.getInvalidMatrixException();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.problems.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.problems.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problems.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  problems	113	None	replace
587	[BUG]  [BUGGY]  int  rows  =  problem.getRanges(),  parameters.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRanges(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRanges(),  parameters.length;	  int    rows    =    problem.getRanges().length;    	non-compiled	[CE]  ';'  expected	93	None	replace
588	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  boolean  rows  =  problem.getAllParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  boolean  rows  =  problem.getAllParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    boolean  rows  =  problem.getAllParameters().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
589	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getallParameters().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getallParameters().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int    rows    =    problem.getAllParameters().length;    int  rows  =  problem.getallParameters().length;	  	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	57	None	add
590	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  0);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  0);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException(null,  null,  0);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	101	None	replace
591	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows(),  rowCount  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  problem.getRows(),  rowCount  -  1;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows(),  rowCount  -  1;	  final    int    rows    =    problem.getRows(),    rowCount;    	non-compiled	[CE]  ';'  expected	124	None	replace
592	[BUG]  [BUGGY]  ImerialsException  ime  =  ime,  problem.getInvalidMatrixException();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  ime,  problem.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  ime,  problem.getInvalidMatrixException();	  ImerialsException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  ';'  expected	112	None	replace
593	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize(),  dataArea.length;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize(),  dataArea.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize(),  dataArea.length;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  ';'  expected	119	None	replace
594	[BUG]  [BUGGY]  int  rows  =  problem.getRowSize(),  parameters.length;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getRowSize(),  parameters.length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getRowSize(),  parameters.length;	  int    rows    =    problem.getRowSize().length;    	non-compiled	[CE]  ';'  expected	119	None	replace
595	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
596	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
597	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
598	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  row:n ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
599	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
600	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( "Expected  an  error: ");	  ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	10	1	replace
601	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.period);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.period);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(this.chiSquare,  this.period);	  EstimationProblem    problem    =    ime.getStandardProblem(this.chiSquare);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
602	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	1	replace
603	[BUG]  [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	Integer  rows  =  problem.getMeasurements().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException();	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException();    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	139	1	replace
604	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  dataArea);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  dataArea);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  dataArea	136	None	replace
605	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  errorRestriction);  [CE]  cannot  find  symbol  errorRestriction  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this,  errorRestriction);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this,  errorRestriction);	  InvalidMatrixException    ime    =    Ime.getInstance(this);    	non-compiled	[CE]  cannot  find  symbol  errorRestriction	136	None	replace
606	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(result);  [CE]  cannot  find  symbol  result  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(result);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  result	135	None	replace
607	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.result);  [CE]  cannot  find  symbol  result  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  Ime.getInstance(this.result);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  Ime.getInstance(this.result);	  InvalidMatrixException    ime    =    Ime.getInstance(problem);    	non-compiled	[CE]  cannot  find  symbol  result	135	None	replace
608	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(problem,  null);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(problem,  null);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(problem,  null);	  EstimationProblem    problem    =    ime.getMatrixException(null,    null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	98	None	replace
609	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  problem);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
610	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBoundsException( "Failed  to  parse  variable. ",  error);	  EstimationProblem    problem    =    ime.getMatrixOutOfBoundsException(   "Failed    to    parse    variable.   ");    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	138	None	replace
611	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(results);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  ImmutableFormat.getInstance(results);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  ImmutableFormat.getInstance(results);	  InvalidMatrixException    ime    =    ImmutableFormat.getInstance();    	non-compiled	[CE]  cannot  find  symbol  results	1	None	replace
612	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }  else  {  return  super.getCovariances();  }  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }  else  {  return  super.getCovariances();  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  int  rows  =  problem.getAllParameters().length;  }  else  {  return  super.getCovariances();  }	  final    int    rows    =    problem.getAllParameters().length;    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	24	None	replace
613	[BUG]  [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrixException( " ");  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerializationException  ime  =  problem.getInvalidMatrixException( " ");  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerializationException  ime  =  problem.getInvalidMatrixException( " ");	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
614	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInstance();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem,  parameters.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  ';'  expected	3	None	replace
615	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problems.getInstance();  [CE]  cannot  find  symbol  problems  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problems.getInstance();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problems.getInstance();	  InvalidMatrixException    ime    =    problem.getInstance();    	non-compiled	[CE]  cannot  find  symbol  problems	3	None	replace
616	[BUG]  [BUGGY]  ImmediateParentPointer  ime  =  issue.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImmediateParentPointer  ime  =  issue.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImmediateParentPointer  ime  =  issue.getImmediateParentPointer();	  ImmediateParentPointer    ime    =    problem.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
617	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.problems.getImmediateParentPointer();  [CE]  cannot  find  symbol  problems  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.problems.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.problems.getImmediateParentPointer();	  InvalidMatrixException    ime    =    problems.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol  problems	127	None	replace
618	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  problem,  parameters.getInvalidMatrixException();	  InvalidMatrixException    ime    =    problem.getInvalidMatrixException();    	non-compiled	[CE]  ';'  expected	65	None	replace
619	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(message,  error);	  EstimationProblem    problem    =    ime.getMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
620	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  sourceName);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException(message,  sourceName);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException(message,  sourceName);	  EstimationProblem    problem    =    ime.getMatrixException(message);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	39	None	replace
621	[BUG]  [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  Final  int  rows  =  problem.getAllParameters().length;  }  [CE]  not  a  statement  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  Final  int  rows  =  problem.getAllParameters().length;  }  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	if(problem.getAllParameters()!=  null)  {  final  int  rows  =  problem.getAllParameters().length;  Final  int  rows  =  problem.getAllParameters().length;  }	  final    int    rows    =    problem.getAllParameters().length;    Final    int    rows    =    problem.getAllParameters().length;    	non-compiled	[CE]  not  a  statement	25	None	replace
622	[BUG]  [BUGGY]  final  int  rows  =  parameter.getRowCount();  [CE]  cannot  find  symbol  parameter  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameter.getRowCount();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameter.getRowCount();	  final    int    rows    =    this.problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol  parameter	99	None	replace
623	[BUG]  [BUGGY]  ImerialMatrixException  ime  =  error.getInvalidMatrixException();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialMatrixException  ime  =  error.getInvalidMatrixException();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialMatrixException  ime  =  error.getInvalidMatrixException();	  ImerialMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
624	[BUG]  [BUGGY]  int  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [CE]  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getAllParameters().length;  ArrayIndexOutOfBoundsException  ex  =  new  ArrayIndexOutOfBoundsException( " "));	  int    rows    =    problem.getMeasurements().length;    ArrayIndexOutOfBoundsException    ex    =    new    ArrayIndexOutOfBoundsException(   "   "));    	non-compiled	[CE]  	140	None	replace
625	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  cost);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  cost);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  cost);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
626	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  chiSquare);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  chiSquare);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixOutOfBounds(),  parameters,  chiSquare);	  EstimationProblem    problem    =    ime.getMatrixOutOfBounds(),    parameters);    	non-compiled	[CE]  ';'  expected	34	None	replace
627	[BUG]  [BUGGY]  int  rows  =  ime.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [CE]  cannot  find  symbol  ime  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  ime.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  ime.getMeasurements().length;  InvalidMatrixException  ime  =  problem.getInvalidMatrixException();	  int    rows    =    problem.getMeasurements().length;    InvalidMatrixException    ime    =    ime.getInvalidMatrixException();    	non-compiled	[CE]  cannot  find  symbol  ime	77	None	replace
628	[BUG]  [BUGGY]  InvalidMatrixException  ime  =  this.problems.getInvalidMatrix();  [CE]  cannot  find  symbol  problems  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  InvalidMatrixException  ime  =  this.problems.getInvalidMatrix();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	InvalidMatrixException  ime  =  this.problems.getInvalidMatrix();	  InvalidMatrixException    ime    =    problems.getInvalidMatrix();    	non-compiled	[CE]  cannot  find  symbol  problems	30	None	replace
629	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj);	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
630	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj.toString());  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj.toString());  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardError(jTj,  jTj.toString());	  EstimationProblem    problem    =    ime.getStandardError(jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	31	None	replace
631	[BUG]  [BUGGY]  int  rows  =  problem.getColumns().length;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  int  rows  =  problem.getColumns().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	int  rows  =  problem.getColumns().length;	  int    rows    =    problem.getMeasurements().length;    int    rows    =    problem.getRows().length;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
632	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  errorRestriction);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  errorRestriction);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  errorRestriction);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
633	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  error);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this,  error);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this,  error);	  EstimationProblem    problem    =    Ime.getInstance(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	134	None	replace
634	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols,  rows);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols,  rows);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(cols,  rows);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	74	None	replace
635	[BUG]  [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  cols);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(AbstractEstimator,int)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  cols);  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(this,  cols);	          ArrayIndexOutOfBoundsException    e    =    new    ArrayIndexOutOfBoundsException(rows,    cols);    	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(AbstractEstimator,int)	74	None	replace
636	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexInOfBounds();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixIndexInOfBounds();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixIndexInOfBounds();	  EstimationProblem    problem    =    ime.getMatrixIndexOutOfBounds();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	92	None	replace
637	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  jTj);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  jTj);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getMatrixException( "Square  error: "  +  jTj,  jTj);	  EstimationProblem    problem    =    ime.getMatrixException(   "Square    error:   "    +    jTj);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	40	None	replace
638	[BUG]  [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  Ime.getInstance(this.results,  problem);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  Ime.getInstance(this.results,  problem);	  EstimationProblem    problem    =    Ime.getInstance(this.results);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	96	None	replace
639	[BUG]  [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  cost);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  cost);  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	EstimationProblem  problem  =  ime.getStandardProblem(),  parameters,  cost);	  EstimationProblem    problem    =    ime.getStandardProblem(),    parameters);    	non-compiled	[CE]  ';'  expected	50	None	replace
640	[BUG]  [BUGGY]  final  int  rows  =  this.problem.getColumns().length;  [CE]  cannot  find  symbol  problem  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  this.problem.getColumns().length;  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  this.problem.getColumns().length;	  final    int    rows    =    problem.getColumns().length;    	non-compiled	[CE]  cannot  find  symbol  problem	43	None	replace
641	[BUG]  [BUGGY]  ImerialsException  ime  =  system.getImmediateParentPointer();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  ImerialsException  ime  =  system.getImmediateParentPointer();  [BUGGY]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	ImerialsException  ime  =  system.getImmediateParentPointer();	  ImerialsException    ime    =    ime.getImmediateParentPointer();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
642	[BUG]  [BUGGY]  final  int  rows  =  parameter.getRanges();  [CE]  cannot  find  symbol  parameter  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throws  EstimationException  {  updateJacobian();        [BUGGY]  final  int  rows  =  parameter.getRanges();  [BUGGY]      final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  parameter.getRanges();	  final    int    rows    =    problem.getRanges();    	non-compiled	[CE]  cannot  find  symbol  parameter	5	None	replace
