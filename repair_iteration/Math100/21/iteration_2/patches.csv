bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(wm,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(wm,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(wm,  i);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  factor);  [CE]  cannot  find  symbol  factor  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  factor);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol  factor	7	None	replace
3	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(variable,  i);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(variable,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(variable,  i);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol  	7	None	replace
4	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(prototype,  i);  [CE]  cannot  find  symbol  prototype  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(prototype,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(prototype,  i);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol  prototype	7	None	replace
5	[BUG]  [BUGGY]  double  wm  =  wm[i].getWidth();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getWidth();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getWidth();	  double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	replace
6	[BUG]  [BUGGY]  double  wm  =  wm[i].getWeight()  *  criterion;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getWeight()  *  criterion;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getWeight()  *  criterion;	  double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	replace
7	[BUG]  [BUGGY]  double  residual  =  wm[i].getRemainder()  *  criterion;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRemainder()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRemainder()  *  criterion;	  double    residual    =    wm[i].getRemainder();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
8	[BUG]  [BUGGY]  double  residual  =  wm[i].getRemainder()  +  criterion;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRemainder()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRemainder()  +  criterion;	  double    residual    =    wm[i].getRemainder();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
9	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWeight()  *  criterion;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWeight()  *  criterion;	  double    residual    =    wm[i].getRowWeight();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
10	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnWeight();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnWeight();	  double    residual    =    wm[i].getRowWeight();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
11	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWeight()  +  criterion;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWeight()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWeight()  +  criterion;	  double    residual    =    wm[i].getRowWeight();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
12	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnResidual();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnResidual();	  double    residual    =    wm[i].getRowResidual();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
13	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidual()  *  criterion;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidual()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidual()  *  criterion;	  double    residual    =    wm[i].getRowResidual();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
14	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i].getWeight());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i].getWeight());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i].getWeight());	  EstimationProblem    criterion    =    problem.getMeasurement(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
15	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i]);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurement(i,  wm[i]);	  EstimationProblem    criterion    =    problem.getMeasurement(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
16	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurement(i,  wm.length);	  EstimationProblem    criterion    =    problem.getMeasurement(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
17	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i].getWeight());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i].getWeight());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i].getWeight());	  EstimationProblem    criterion    =    problem.getMeasurements(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	77	None	replace
18	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i]);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i,  wm[i]);	  EstimationProblem    criterion    =    problem.getMeasurements(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	77	None	replace
19	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i  +  1);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i  +  1);	  EstimationProblem    criterion    =    problem.getMeasurements(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	77	None	replace
20	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm.length);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm.length);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i,  wm.length);	  EstimationProblem    criterion    =    problem.getMeasurements(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	77	None	replace
21	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  parameters);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  parameters);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  parameters);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem);    	non-compiled	[CE]  inconvertible  types	116	None	replace
22	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(this.result);  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(this.result);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(this.result);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem);    	non-compiled	[CE]  cannot  find  symbol  result	116	None	replace
23	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidue()  *  criterion;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRsidue()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidue()  *  criterion;	  double    residual    =    wm[i].getRsidue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
24	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  *  i;	  EstimationProblem    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	34	None	replace
25	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  +  criterion;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  +  criterion;	  double    residual    =    wm[i].getRaw()    +    i;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
26	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  *  i;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  *  i;	  double    residual    =    wm[i].getRaw()    +    i;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
27	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  +  coefficient;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  +  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  +  coefficient;	  double    residual    =    wm[i].getRaw()    +    i;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
28	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  +  cost;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  +  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  +  cost;	  double    residual    =    wm[i].getRaw()    +    i;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
29	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  *  1;	  double    residual    =    wm[i].getRow()    +    1;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
30	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  +  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  +  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  +  2;	  double    residual    =    wm[i].getRow()    +    1;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
31	[BUG]  [BUGGY]  double  residual  =  wm[i].getRawValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRawValue();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRawValue();	  double    residual    =    wm[i].getColumnValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
32	[BUG]  [BUGGY]  double  wm[i]  =  wm[i].getWeight();  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm[i]  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm[i]  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    wm[i].getWeight();    	non-compiled	[CE]  ']'  expected	12	None	replace
33	[BUG]  [BUGGY]  if(wm[i]!=  null)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  if(wm[i]!=  null)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	if(wm[i]!=  null)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }	  double    residual    =    wm[i].getWeight();    double    wm[i].getWeight();    	non-compiled	[CE]  ']'  expected	12	None	replace
34	[BUG]  [BUGGY]  if(wm[i].getWeight()  >  0)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  if(wm[i].getWeight()  >  0)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	if(wm[i].getWeight()  >  0)  {  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  }	  double    residual    =    wm[i].getWeight();    double    wm[i].getWeight();    	non-compiled	[CE]  ']'  expected	12	None	replace
35	[BUG]  [BUGGY]  double  wm[i]  =  wm[i].getWidth();  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm[i]  =  wm[i].getWidth();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm[i]  =  wm[i].getWidth();	  double    residual    =    wm[i].getWeight();    double    wm[i].getWeight();    	non-compiled	[CE]  ']'  expected	12	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	Double  residual  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    Double    residual    =    wm[i].getWeight();    	compilable	  [FE]  AssertionFailedError  	13	9	replace
37	[BUG]  [BUGGY]  Double  residual  =  wm[i].getWeight();  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  residual  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    Double    residual    =    wm[i].getWeight();    	compilable	  [FE]  AssertionFailedError  	13	9	replace
38	[BUG]  [BUGGY]  double  criterion  =  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    Double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
39	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i  +  1];  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i  +  1];  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i  +  1];	  EstimationProblem    wm    =    problem.getMeasurements()[i];    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	112	None	replace
40	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion;	  EstimationProblem    wm    =    problem.getMeasurements()[i];    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	112	None	replace
41	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS();	  EstimationProblem    wm    =    problem.getRsidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	35	None	replace
42	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
43	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
44	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
45	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(rm,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(rm,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(rm,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
46	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  cost);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  cost);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,    factor);    	non-compiled	[CE]  inconvertible  types	46	None	replace
47	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  i);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  i);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,    factor);    	non-compiled	[CE]  inconvertible  types	46	None	replace
48	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  factor);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
49	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(wm[i].getWeight(),  factor);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(wm[i].getWeight(),  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(wm[i].getWeight(),  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
50	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  coefficient);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
51	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion,  factor);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	21	None	replace
52	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  cost);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	21	None	replace
53	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor,  cost);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor,  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	21	None	replace
54	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  coefficient);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	21	None	replace
55	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  +  i  +  1;	  wm[i]    =    problem.getMeasurements()    +    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
56	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  +  criterion;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  +  criterion;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  +  criterion;	  wm[i]    =    problem.getMeasurements()    +    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
57	[BUG]  [BUGGY]  Double  wm  =  wm[i].getWeight();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  wm  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  wm  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	127	None	replace
58	[BUG]  [BUGGY]  wm  =  wm[i].getWeight();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  incompatible  types	127	None	replace
59	[BUG]  [BUGGY]  double  wm  =  wm[i].getWight();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getWight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getWight();	  double    residual    =    wm[i].getWeight();    double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	127	None	replace
60	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRaw()  +  1;	  double    residual    =    wm[i],    cost.getRaw();    	non-compiled	[CE]  ';'  expected	108	None	replace
61	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getWeight();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getWeight();	  double    residual    =    wm[i],    cost.getRaw();    	non-compiled	[CE]  ';'  expected	108	None	replace
62	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  +  2;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  +  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRaw()  +  2;	  double    residual    =    wm[i],    cost.getRaw();    	non-compiled	[CE]  ';'  expected	108	None	replace
63	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  *  2;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRaw()  *  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRaw()  *  2;	  double    residual    =    wm[i],    cost.getRaw();    	non-compiled	[CE]  ';'  expected	108	None	replace
64	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue(i  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue(i  +  1);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue(i  +  1);	  double    residual    =    wm[i].getRowValue(i);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
65	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue(i,  criterion);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue(i,  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue(i,  criterion);	  double    residual    =    wm[i].getRowValue(i);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
66	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue(i,  cost);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue(i,  cost);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue(i,  cost);	  double    residual    =    wm[i].getRowValue(i);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
67	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  coefficient);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  coefficient);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
68	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  factor);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  factor);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
69	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1,  criterion);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount()  -  1,  criterion);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
70	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  cost);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  cost);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
71	[BUG]  [BUGGY]  double  wm  =  problem[i].getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem[i].getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getResidual();	  double    wm    =    problem[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
72	[BUG]  [BUGGY]  double  wm  =  problem[i].getMeasurements().length;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem[i].getMeasurements().length;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getMeasurements().length;	  double    wm    =    problem[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
73	[BUG]  [BUGGY]  double  wm  =  problem[i].getMeasurements()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem[i].getMeasurements()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getMeasurements()  +  i;	  double    wm    =    problem[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
74	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  factor);  [CE]  cannot  find  symbol  factor  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(criterion,  factor);	  double    residual    =    wm[i].getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	97	None	replace
75	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  coefficient);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(criterion,  coefficient);	  double    residual    =    wm[i].getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol  coefficient	97	None	replace
76	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(criterion,  cost);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(criterion,  cost);	  double    residual    =    wm[i].getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
77	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  *  factor;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  *  factor;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
78	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRow()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRow()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRow()  *  criterion;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	replace
79	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumn()  *  criterion;  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumn()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumn()  *  criterion;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
80	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  *  cost;  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  *  cost;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
81	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm,  parameters.getMeasurements();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  wm,  parameters.getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  wm,  parameters.getMeasurements();	  SizedMeasurement[]    measurements    =    problem,    parameters.getMeasurements();    	non-compiled	[CE]  ';'  expected	52	None	replace
82	[BUG]  [BUGGY]  Double  criterion  =  wm[i].getResidual();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  criterion  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  criterion  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
83	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
84	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
85	[BUG]  [BUGGY]  Double  criterion  =  wm[i].getResidual()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  criterion  =  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  criterion  =  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    Double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
86	[BUG]  [BUGGY]  Math.rint(wm[i].getWeight()  *  cost);  [CE]  cannot  find  symbol  residual  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getWeight()  *  cost);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getWeight()  *  cost);	  Math.rint(wm[i].getWeight()    *    factor);    	non-compiled	[CE]  cannot  find  symbol  residual	110	None	replace
87	[BUG]  [BUGGY]  Math.rint(wm[i].getWeight()  *  criterion);  [CE]  cannot  find  symbol  residual  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getWeight()  *  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getWeight()  *  criterion);	  Math.rint(wm[i].getWeight()    *    factor);    	non-compiled	[CE]  cannot  find  symbol  residual	110	None	replace
88	[BUG]  [BUGGY]  Math.rint(wm[i].getWeight()  *  residual);  [CE]  cannot  find  symbol  residual  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getWeight()  *  residual);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getWeight()  *  residual);	  Math.rint(wm[i].getWeight()    *    factor);    	non-compiled	[CE]  cannot  find  symbol  residual	110	None	replace
89	[BUG]  [BUGGY]  Math.rint(wm[i].getWeight()  *  result);  [CE]  cannot  find  symbol  result  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getWeight()  *  result);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getWeight()  *  result);	  Math.rint(wm[i].getWeight()    *    factor);    	non-compiled	[CE]  cannot  find  symbol  result	110	None	replace
90	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm.length);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
91	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm.length);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
92	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm.length);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
93	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm.length);  [CE]  inconvertible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
94	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	2	None	replace
95	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  double  criterion  =  wm[i].getResidual();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  double  criterion  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  double  criterion  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	2	None	replace
96	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements()  *  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurements()  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements()  *  i;	  double    wm    =    wm[i].getMeasurements()    +    i;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
97	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements()  +  criterion;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurements()  +  criterion;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements()  +  criterion;	  double    wm    =    wm[i].getMeasurements()    +    i;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	84	None	replace
98	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i],  factor);  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i],  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  wm[i],  factor);	  ((    EstimationProblem)problem).getRMS(criterion,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	122	None	replace
99	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i],  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i],  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(wm[i],  criterion);	  ((    EstimationProblem)problem).getRMS(criterion,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
100	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  problem[i]);  [CE]  array  required,  but  EstimationProblem  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  problem[i]);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion,  problem[i]);	  ((    EstimationProblem)problem).getRMS(criterion,    wm[i]);    	non-compiled	[CE]  array  required,  but  EstimationProblem  found	122	None	replace
101	[BUG]  [BUGGY]  double  wm  =  problem.getResidual()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getResidual()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getResidual()  +  i;	  double    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	45	None	replace
102	[BUG]  [BUGGY]  double  wm  =  problem.getRMS(i);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getRMS(i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getRMS(i);	  double    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	45	None	replace
103	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  +  1);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  +  1);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
104	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  cost);  [CE]  inconvertible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
105	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  coefficient);  [CE]  inconvertible  types  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
106	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  factor);  [CE]  inconvertible  types  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
107	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(creator);  [CE]  cannot  find  symbol  creator  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(creator);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(creator);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(reciterion);    	non-compiled	[CE]  cannot  find  symbol  creator	103	None	replace
108	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(cost);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(cost);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(reciterion);    	non-compiled	[CE]  inconvertible  types	103	None	replace
109	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  1;	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
110	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWidth();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWidth();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWidth();	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
111	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  2;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  2;	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
112	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  -  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  -  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  -  1;	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
113	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems,  wm.getMeasurements();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  problems,  wm.getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  problems,  wm.getMeasurements();	  SizedMeasurement[]    measurements    =    problems.getMeasurements();    	non-compiled	[CE]  ';'  expected	73	None	replace
114	[BUG]  [BUGGY]  double  wm  =  problem.getMean();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMean();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMean();	  double    wm    =    wm[i].getMean();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
115	[BUG]  [BUGGY]  double  wm  =  problem[i].getMean();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem[i].getMean();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getMean();	  double    wm    =    wm[i].getMean();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
116	[BUG]  [BUGGY]  double  result  =  wm[i].getWeight();  [CE]  cannot  find  symbol  residual  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  result  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  result  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  residual	10	None	replace
117	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  residual  =  wm[i].getWeight()  *  criterion;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  residual  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight()    *    criterion;    double  residual  =  wm[i].getWeight()  *  criterion;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
118	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  criterion  =  wm[i].getWeight()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  criterion  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight()    *    criterion;    double  criterion  =  wm[i].getWeight()  *  criterion;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
119	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  Double  residual  =  wm[i].getWeight()  *  criterion;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  Double  residual  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight()    *    criterion;    Double  residual  =  wm[i].getWeight()  *  criterion;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
120	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  Double  criterion  =  wm[i].getWeight()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  Double  criterion  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight()    *    criterion;    Double  criterion  =  wm[i].getWeight()  *  criterion;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
121	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  remaining  =  wm[i].getWeight()  *  criterion;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  double  remaining  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight()    *    criterion;    double  remaining  =  wm[i].getWeight()  *  criterion;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	30	None	add
122	[BUG]  [BUGGY]  wm[i]  =  problem.getRMS(i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getRMS(i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getRMS(i);	  wm[i]    =    Problem.RMS.getResidual();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
123	[BUG]  [BUGGY]  wm[i]  =  Problem.RMS;  [CE]  cannot  find  symbol  Problem  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  Problem.RMS;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.RMS;	  wm[i]    =    Problem.RMS.getResidual();    	non-compiled	[CE]  cannot  find  symbol  Problem	125	None	replace
124	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  1;	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
125	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWidth();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWidth();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWidth();	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
126	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  wm.length;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  wm.length;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  wm.length;	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
127	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  2;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  2;	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
128	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumns().length  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumns().length  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumns().length  +  1;	  int    cols    =    wm[i].getColumns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
129	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumns()  *  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumns()  *  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumns()  *  1;	  int    cols    =    wm[i].getColumns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
130	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(variable,  criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(variable,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(variable,  criterion);	  ((    EstimationProblem)problem).getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
131	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i]);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i]);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(wm[i]);	  ((    EstimationProblem)problem).getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
132	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
133	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
134	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
135	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor  +  1);  [CE]  cannot  find  symbol  factor  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor  +  1);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	57	None	replace
136	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  1);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  1);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  inconvertible  types	57	None	replace
137	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1,  factor);  [CE]  cannot  find  symbol  factor  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1,  factor);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  cannot  find  symbol  factor	57	None	replace
138	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i,  criterion);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i,  criterion);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	104	None	replace
139	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i,  parameters);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i,  parameters);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i,  parameters);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	104	None	replace
140	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i  +  1);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i  +  1);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	104	None	replace
141	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  wm[i].getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  wm[i].getMeasurements();	  SizedMeasurement[]    measurements    =    problems[i].getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
142	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  +  factor;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  +  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  +  factor;	  double    residual    =    wm[i].getRMS()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
143	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  +  coefficient;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  +  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  +  coefficient;	  double    residual    =    wm[i].getRMS()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
144	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  +  cost;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  +  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  +  cost;	  double    residual    =    wm[i].getRMS()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
145	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  i);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  i);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(branch.getWeight());    	non-compiled	[CE]  inconvertible  types	82	None	replace
146	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight(),  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(branch.getWeight());    	non-compiled	[CE]  inconvertible  types	82	None	replace
147	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	Double  residual  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
148	[BUG]  [BUGGY]  Double  residual  =  wm[i].getResidual();  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  residual  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
149	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  resid  =  wm[i].getResidual();  Double  residual  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  resid  =  wm[i].getResidual();  Double  residual  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
150	[BUG]  [BUGGY]  double  resid  =  wm[i].getResidual();  Double  residual  =  wm[i].getResidual();  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  resid  =  wm[i].getResidual();  Double  residual  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  resid  =  wm[i].getResidual();  Double  residual  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	Double  residual  =  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  AssertionFailedError  	3	9	replace
152	[BUG]  [BUGGY]  Double  residual  =  wm[i].getResidual()  +  1;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  residual  =  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    Double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  AssertionFailedError  	3	9	replace
153	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  +  criterion;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  +  criterion;	  double    residual    =    wm[i].getRow()    +    i;    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
154	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  *  i;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  *  i;	  double    residual    =    wm[i].getRow()    +    i;    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
155	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  +  i  +  1;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  +  i  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  +  i  +  1;	  double    residual    =    wm[i].getRow()    +    i;    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
156	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost,  factor);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    cost);    	non-compiled	[CE]  inconvertible  types	42	None	replace
157	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount());  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount());	  Math.rint(wm[i].getMeasurementCount());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
158	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  cost);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount(),  cost);	  Math.rint(wm[i].getMeasurementCount());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
159	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  +  1);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  +  1);	  Math.rint(wm[i].getMeasurementCount());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
160	[BUG]  [BUGGY]  double  remaining  =  wm[i].getResidual();  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  remaining  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  remaining  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    remaining    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  cannot  find  symbol  residual	5	None	replace
161	[BUG]  [BUGGY]  double  resid  =  wm[i].getResidual();  [CE]  cannot  find  symbol  residual  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  resid  =  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  resid  =  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    remaining    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  cannot  find  symbol  residual	5	None	replace
162	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  2);	  Math.rint(wm[i].getMeasurementCount()    -    2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
163	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRMS()  +  1;	  double    residual    =    wm[i],    cost.getRMS();    	non-compiled	[CE]  ';'  expected	98	None	replace
164	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  *  factor;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRMS()  *  factor;	  double    residual    =    wm[i],    cost.getRMS();    	non-compiled	[CE]  ';'  expected	98	None	replace
165	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  +  2;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  cost.getRMS()  +  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRMS()  +  2;	  double    residual    =    wm[i],    cost.getRMS();    	non-compiled	[CE]  ';'  expected	98	None	replace
166	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  *  factor;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  *  factor;	  double    residual    =    wm[i].getRaw()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
167	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRaw()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRaw()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRaw()  *  criterion;	  double    residual    =    wm[i].getRaw()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	55	None	replace
168	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  *  cost;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  *  cost;	  double    residual    =    wm[i].getRaw()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
169	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  *  coefficient;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRaw()  *  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  *  coefficient;	  double    residual    =    wm[i].getRaw()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
170	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  2  -  1);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  2  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  /  2  -  1);	  Math.rint(wm[i].getMeasurementCount()    *    2    -    1);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
171	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor,  problem);  [CE]  cannot  find  symbol  factor  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor,  problem);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor,  problem);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,    problem);    	non-compiled	[CE]  cannot  find  symbol  factor	48	None	replace
172	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  cost);  [CE]  inconvertible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  cost);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,    problem);    	non-compiled	[CE]  inconvertible  types	48	None	replace
173	[BUG]  [BUGGY]  Double  criterion  =  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Double  criterion  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Double  criterion  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    Double    criterion    =    wm[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	87	None	replace
174	[BUG]  [BUGGY]  criterion  =  wm[i].getWeight();  [CE]  cannot  find  symbol  residual  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  criterion  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	criterion  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    Double    criterion    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  residual	87	None	replace
175	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumns().length  +  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumns().length  +  2;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumns().length  +  2;	  int    cols    =    wm[i].getColumns().length;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
176	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  +  factor;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  +  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  +  factor;	  double    residual    =    wm[i].getResidue()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
177	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  +  coefficient;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  +  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  +  coefficient;	  double    residual    =    wm[i].getResidue()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
178	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  /  criterion;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  /  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  /  criterion;	  double    residual    =    wm[i].getResidue()    +    criterion;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
179	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  2  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnCount()  *  2  +  1;	  int    cols    =    wm[i].getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
180	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnCount()  *  1;	  int    cols    =    wm[i].getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
181	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidue()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getResidue()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getResidue()  *  criterion;	  double    residual    =    wm[i].getResidue()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	69	None	replace
182	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  factors;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  *  factors;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  factors;	  double    residual    =    wm[i].getResidue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
183	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  coefficient;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  *  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  coefficient;	  double    residual    =    wm[i].getResidue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
184	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem,  i);  [CE]  inconvertible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem,  i);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem,    i);    	non-compiled	[CE]  inconvertible  types	49	None	replace
185	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  factor);  [CE]  cannot  find  symbol  factor  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  factor);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem,    i);    	non-compiled	[CE]  cannot  find  symbol  factor	49	None	replace
186	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  1);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  1);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
187	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  2);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  2);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  /  2);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
188	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  /  1);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  /  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount()  /  1);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
189	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  /  1);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  /  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  2  /  1);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
190	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  i);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  i);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  inconvertible  types	102	None	replace
191	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  cost);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  cost);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  inconvertible  types	102	None	replace
192	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.length);  [CE]  cannot  find  symbol  length  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.length);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
193	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  cannot  find  symbol  coefficient	102	None	replace
194	[BUG]  [BUGGY]  int  cols  =  wm[i].getCols();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getCols();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getCols();	  int    cols    =    wm[i].getRows();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
195	[BUG]  [BUGGY]  double  residual  =  wm[i].getLeft();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getLeft();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getLeft();	  double    residual    =    wm[i].getRight();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
196	[BUG]  [BUGGY]  double  residual  =  wm[i].getRight()  *  criterion;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRight()  *  criterion;	  double    residual    =    wm[i].getRight();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
197	[BUG]  [BUGGY]  double  residual  =  wm[i].getRight()  +  criterion;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRight()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRight()  +  criterion;	  double    residual    =    wm[i].getRight();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
198	[BUG]  [BUGGY]  double  wm  =  problem.getStandardMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getStandardMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getStandardMeasurements();	  double    wm    =    wm[i].getStandardMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	106	None	replace
199	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  cost;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  cost;	  double    residual    =    wm[i].getResidue()    *    factor;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
200	[BUG]  [BUGGY]  double  residual  =  factor[i].getResidue()  *  wm;  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  factor[i].getResidue()  *  wm;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  factor[i].getResidue()  *  wm;	  double    residual    =    wm[i].getResidue()    *    factor;    	non-compiled	[CE]  cannot  find  symbol  factor	92	None	replace
201	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor.remainder;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor.remainder;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  factor.remainder;	  double    residual    =    wm[i].getResidue()    *    factor;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
202	[BUG]  [BUGGY]  EstimationProblem  result  =  problem.getRMS(i,  wm[i]);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  result  =  problem.getRMS(i,  wm[i]);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  result  =  problem.getRMS(i,  wm[i]);	  EstimationProblem    result    =    problem.getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
203	[BUG]  [BUGGY]  EstimationProblem  result  =  problem.getRMS(i,  wm[i].getWeight());  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  result  =  problem.getRMS(i,  wm[i].getWeight());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  result  =  problem.getRMS(i,  wm[i].getWeight());	  EstimationProblem    result    =    problem.getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
204	[BUG]  [BUGGY]  EstimationProblem  result  =  problem.getRMS(wm[i]);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  result  =  problem.getRMS(wm[i]);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  result  =  problem.getRMS(wm[i]);	  EstimationProblem    result    =    problem.getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
205	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm[i].getWeight());  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm[i].getWeight());  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getRMS(i,  wm[i].getWeight());	  EstimationProblem    criterion    =    problem.getRMS(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
206	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm[i]);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm[i]);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getRMS(i,  wm[i]);	  EstimationProblem    criterion    =    problem.getRMS(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
207	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i  +  1);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i  +  1);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getRMS(i  +  1);	  EstimationProblem    criterion    =    problem.getRMS(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
208	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  *  factor;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  *  factor;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
209	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnValue()  *  criterion;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnValue()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnValue()  *  criterion;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
210	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRowValue()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRowValue()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRowValue()  *  criterion;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	39	None	replace
211	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  *  coefficient;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  *  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  *  coefficient;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
212	[BUG]  [BUGGY]  SizedMeasurement[]  wm  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  wm  =  problem.getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  wm  =  problem.getResidual();	  wm[i]    =    wm.getResidual();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
213	[BUG]  [BUGGY]  SizedMeasurement[]  wms  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  wms  =  problem.getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  wms  =  problem.getResidual();	  wm[i]    =    wm.getResidual();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
214	[BUG]  [BUGGY]  wm[i]  =  problem,  parameters.getRMS();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem,  parameters.getRMS();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem,  parameters.getRMS();	  wm[i]    =    problem.getRMS();    	non-compiled	[CE]  ';'  expected	53	None	replace
215	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  cost);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  cost);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion,    factor);    	non-compiled	[CE]  inconvertible  types	56	None	replace
216	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  i);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  i);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion,    factor);    	non-compiled	[CE]  inconvertible  types	56	None	replace
217	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  problem);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  problem);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  problem);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion,    factor);    	non-compiled	[CE]  inconvertible  types	56	None	replace
218	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion,    factor);    	non-compiled	[CE]  cannot  find  symbol  coefficient	56	None	replace
219	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
220	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i,  criterion);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
221	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  0);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  0);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  0);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
222	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  i);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
223	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(period,    criterion);    	non-compiled	[CE]  inconvertible  types	58	None	replace
224	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i  +  1);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS(i  +  1);	  EstimationProblem    wm    =    problem.getRMS(i);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	33	None	replace
225	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  i);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS(i,  i);	  EstimationProblem    wm    =    problem.getRMS(i);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	33	None	replace
226	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  criterion);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS(i,  criterion);	  EstimationProblem    wm    =    problem.getRMS(i);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	33	None	replace
227	[BUG]  [BUGGY]  double  residual  =  problem.getRsidual();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  problem.getRsidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  problem.getRsidual();	  double    residual    =    wm[i].getRsidual();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
228	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion.length,  wm.length);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion.length,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion.length,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    factor);    	non-compiled	[CE]  inconvertible  types	22	None	replace
229	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  inconvertible  types	8	None	replace
230	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  i);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion,  i);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  inconvertible  types	8	None	replace
231	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  problem);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  problem);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion,  problem);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  inconvertible  types	8	None	replace
232	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion  +  1);  [CE]  inconvertible  types  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion  +  1);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  inconvertible  types	8	None	replace
233	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm.length);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm.length);	  ((    EstimationProblem)problem).getRMS(ast,    i);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
234	[BUG]  [BUGGY]  double  residual  =  problem[i].getRMS(wm);  [CE]  array  required,  but  EstimationProblem  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  problem[i].getRMS(wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  problem[i].getRMS(wm);	  double    residual    =    wm[i].getRMS(problem);    	non-compiled	[CE]  array  required,  but  EstimationProblem  found	114	None	replace
235	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(problem,  factor);  [CE]  cannot  find  symbol  factor  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(problem,  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(problem,  factor);	  double    residual    =    wm[i].getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  factor	114	None	replace
236	[BUG]  [BUGGY]  double  residual  =  problem.getRMS[i].getRMS(wm);  [CE]  cannot  find  symbol  getRMS  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  problem.getRMS[i].getRMS(wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  problem.getRMS[i].getRMS(wm);	  double    residual    =    wm[i].getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  getRMS	114	None	replace
237	[BUG]  [BUGGY]  Wm[i]  =  problem.getStandardResidual();  [CE]  cannot  find  symbol  Wm  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Wm[i]  =  problem.getStandardResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Wm[i]  =  problem.getStandardResidual();	  wm[i]    =    problem.getStandardResidual();    	non-compiled	[CE]  cannot  find  symbol  Wm	99	None	replace
238	[BUG]  [BUGGY]  wm[i]  =  problem.getStandardResidual()  +  i;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getStandardResidual()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getStandardResidual()  +  i;	  wm[i]    =    problem.getStandardResidual();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
239	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  residual  =  wm[i].getResidual()  *  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  residual  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    double  residual  =  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	add
240	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  criterion  =  wm[i].getResidual()  *  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  criterion  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    double  criterion  =  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	add
241	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  Double  residual  =  wm[i].getResidual()  *  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  Double  residual  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    Double  residual  =  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	add
242	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  wm[i].getResidual()  *  1;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  double  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    double  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  ']'  expected	62	None	add
243	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  int  i  =  wm[i].getResidual()  *  1;  [CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  int  i  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    int  i  =  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	add
244	[BUG]  [BUGGY]  int  cols  =  wm[i].getColsCount();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColsCount();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColsCount();	  int    cols    =    wm[i].getRowCount();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
245	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  *  i;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  *  i;	  double    residual    =    wm[i].getRowValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
246	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  +  criterion;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  +  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  +  criterion;	  double    residual    =    wm[i].getRowValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
247	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  +  i  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  +  i  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  +  i  +  1;	  double    residual    =    wm[i].getRowValue()    +    i;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
248	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor,  cost);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor,  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	20	None	replace
249	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  i,  factor);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  i,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  i,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	20	None	replace
250	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  cost);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	20	None	replace
251	[BUG]  [BUGGY]  double  wm  =  problem[i].getRMS(wm);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem[i].getRMS(wm);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getRMS(wm);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
252	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(criterion);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(criterion);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
253	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(problem,  cost);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(problem,  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(problem,  cost);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
254	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(prototype);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(prototype);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(prototype);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
255	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  *  criterion;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  *  criterion;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  *  criterion;	  wm[i]    =    problem.getMeasurements()    *    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
256	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  *  i  +  1;	  wm[i]    =    problem.getMeasurements()    *    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
257	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  /  i;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  /  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  /  i;	  wm[i]    =    problem.getMeasurements()    *    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	54	None	replace
258	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  +  i  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  +  i  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getResidual()  +  i  +  1;	  EstimationProblem    wm    =    problem.getResidual()    +    i;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	80	None	replace
259	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  *  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getResidual()  *  i;	  EstimationProblem    wm    =    problem.getResidual()    +    i;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	80	None	replace
260	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  /  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  /  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getResidual()  /  i;	  EstimationProblem    wm    =    problem.getResidual()    +    i;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	80	None	replace
261	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnSize()  +  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumnSize()  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnSize()  +  1;	  int    cols    =    wm[i].getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
262	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnSize()  +  i;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumnSize()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnSize()  +  i;	  int    cols    =    wm[i].getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
263	[BUG]  [BUGGY]  int  cols  =  wm[i].getRowSize();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getRowSize();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getRowSize();	  int    cols    =    wm[i].getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
264	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm,  problem.getMeasurements();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  wm,  problem.getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  wm,  problem.getMeasurements();	  SizedMeasurement[]    measurements    =    wm.getMeasurements();    	non-compiled	[CE]  ';'  expected	50	None	replace
265	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(criterion,  factor);  [CE]  cannot  find  symbol  factor  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue(criterion,  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(criterion,  factor);	  double    residual    =    wm[i].getResidue(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	119	None	replace
266	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(criterion,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue(criterion,  coefficient);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(criterion,  coefficient);	  double    residual    =    wm[i].getResidue(criterion);    	non-compiled	[CE]  cannot  find  symbol  coefficient	119	None	replace
267	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(variable,  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue(variable,  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(variable,  criterion);	  double    residual    =    wm[i].getResidue(criterion);    	non-compiled	[CE]  cannot  find  symbol  	119	None	replace
268	[BUG]  [BUGGY]  Math.rint(wm[i],  wm.getMeasurementCount()  -  1);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  wm.getMeasurementCount()  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  wm.getMeasurementCount()  -  1);	  Math.rint(wm[i],    problem.getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
269	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  *  1);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  *  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount()  *  1);	  Math.rint(wm[i],    problem.getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
270	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual();  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  double  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    wm[i].getResidual()    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
271	[BUG]  [BUGGY]  double  wm[i].getResidual();  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    wm[i].getResidual()    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
272	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  +  1;  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    double    wm[i].getResidual()    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
273	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  >  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  >  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  double  wm[i].getResidual()  >  1;	  double    residual    =    wm[i].getResidual()    +    1;    double    wm[i].getResidual()    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
274	[BUG]  [BUGGY]  double  remaining  =  wm[i].getWeight();  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  remaining  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  remaining  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    remaining    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  residual	14	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getResidual()  *  2;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
276	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  2;  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  2;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  *  2;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
277	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  /  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getResidual()  /  1;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
278	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  /  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  /  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  /  1;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	63	1	replace
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getWeight()  *  1;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	9	replace
280	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  1;  [FE]  AssertionFailedError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight()  *  1;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	9	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  3;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getResidual()  *  3;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
282	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  3;  [FE]  AssertionFailedError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  3;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  *  3;	  double    residual    =    wm[i].getResidual()    *    1;    	compilable	  [FE]  AssertionFailedError  	63	2	replace
283	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  criterion,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  criterion,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  criterion,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.max(result,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	117	None	replace
284	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(criterion,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(criterion,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(criterion,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.max(result,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	117	None	replace
285	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  1);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  1);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.max(result,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	117	None	replace
286	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost;  [CE]  cannot  find  symbol  Criterion  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Criterion  +=  wm[i].getWeight()  *  cost;	  criterion    +=    wm[i].getWeight()    *    factor;    	non-compiled	[CE]  cannot  find  symbol  Criterion	109	None	replace
287	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual;  [CE]  cannot  find  symbol  residual  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	criterion  +=  wm[i].getWeight()  *  residual;	  criterion    +=    wm[i].getWeight()    *    factor;    	non-compiled	[CE]  cannot  find  symbol  residual	109	None	replace
288	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion  +  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion  +  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion    +    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	118	None	replace
289	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  cost  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  cost  +  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  cost  +  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion    +    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	118	None	replace
290	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result  +  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result  +  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion    +    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	118	None	replace
291	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements().length  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurements().length  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements().length  +  1;	  double    wm    =    wm[i].getMeasurements().length;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	83	None	replace
292	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements().length;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements().length;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements().length;	  double    wm    =    wm[i].getMeasurements().length;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	83	None	replace
293	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWidth()  +  i;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWidth()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWidth()  +  i;	  double    residual    =    wm[i].getRowWidth();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
294	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWidth()  *  criterion;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWidth()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWidth()  *  criterion;	  double    residual    =    wm[i].getRowWidth();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
295	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnWidth();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnWidth();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnWidth();	  double    residual    =    wm[i].getRowWidth();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
296	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements()  +  i;	  double    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
297	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements()  *  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements()  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements()  *  i;	  double    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
298	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements()  +  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements()  +  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements()  +  1;	  double    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
299	[BUG]  [BUGGY]  double  residual  =  wm[i].getRawColumn();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRawColumn();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRawColumn();	  double    residual    =    wm[i].getColumn();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
300	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  factor;  [CE]  cannot  find  symbol  factor  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight()  *  factor;	  double    residual    =    wm[i].getWeight()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol  factor	31	None	replace
301	[BUG]  [BUGGY]  double  criterion  =  wm[i].getWeight()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getWeight()  *  criterion;	  double    residual    =    wm[i].getWeight()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	31	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getWeight()  *  cost;	  double    residual    =    wm[i].getWeight()    *    criterion;    	compilable	  [FE]  AssertionFailedError  	31	2	replace
303	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  cost;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight()  *  cost;	  double    residual    =    wm[i].getWeight()    *    criterion;    	compilable	  [FE]  AssertionFailedError  	31	2	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getWeight()  *  criterion  +  1;	  double    residual    =    wm[i].getWeight()    *    criterion;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
305	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight()  *  criterion  +  1;	  double    residual    =    wm[i].getWeight()    *    criterion;    	compilable	  [FE]  AssertionFailedError  	31	9	replace
306	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnResidue();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnResidue();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnResidue();	  double    residual    =    wm[i].getRowResidue();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
307	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidue()  *  criterion;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidue()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidue()  *  criterion;	  double    residual    =    wm[i].getRowResidue();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
308	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  factor);  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  factor);	  ((    EstimationProblem)problem).getRMS(i,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol  factor	100	None	replace
309	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i],  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(wm[i],  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(wm[i],  i);	  ((    EstimationProblem)problem).getRMS(i,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
310	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  coefficient);	  ((    EstimationProblem)problem).getRMS(i,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	100	None	replace
311	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(i,  problem[i]);  [CE]  array  required,  but  EstimationProblem  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(i,  problem[i]);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(i,  problem[i]);	  ((    EstimationProblem)problem).getRMS(i,    wm[i]);    	non-compiled	[CE]  array  required,  but  EstimationProblem  found	100	None	replace
312	[BUG]  [BUGGY]  double  wm  =  problem.getStandardResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getStandardResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getStandardResidual();	  double    wm    =    wm[i].getStandardResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
313	[BUG]  [BUGGY]  double  residual  =  wm[i].getStandardResidual();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getStandardResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getStandardResidual();	  double    wm    =    wm[i].getStandardResidual();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
314	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  *  factor;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  *  factor;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
315	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRMS()  *  criterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRMS()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRMS()  *  criterion;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	replace
316	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  *  cost;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  *  cost;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
317	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  *  coefficient;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS()  *  coefficient;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  *  coefficient;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
318	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  wm[i].getResidual());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  wm[i].getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  wm[i].getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
319	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual(),  factor);  [CE]  cannot  find  symbol  factor  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual(),  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual(),  factor);	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol  factor	101	None	replace
320	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  problem.getResidual());  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  problem.getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  problem.getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
321	[BUG]  [BUGGY]  Math.sqrt(wm[i].getWeight()  *  criterion);  [CE]  cannot  find  symbol  residual  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.sqrt(wm[i].getWeight()  *  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.sqrt(wm[i].getWeight()  *  criterion);	  Math.sqrt(wm[i].getWeight()    *    cost);    	non-compiled	[CE]  cannot  find  symbol  residual	67	None	replace
322	[BUG]  [BUGGY]  Math.sqrt(wm[i].getWeight()  *  factor);  [CE]  cannot  find  symbol  factor  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.sqrt(wm[i].getWeight()  *  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.sqrt(wm[i].getWeight()  *  factor);	  Math.sqrt(wm[i].getWeight()    *    cost);    	non-compiled	[CE]  cannot  find  symbol  factor	67	None	replace
323	[BUG]  [BUGGY]  Math.sqrt(wm[i].getWeight()  /  cost);  [CE]  cannot  find  symbol  residual  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.sqrt(wm[i].getWeight()  /  cost);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.sqrt(wm[i].getWeight()  /  cost);	  Math.sqrt(wm[i].getWeight()    *    cost);    	non-compiled	[CE]  cannot  find  symbol  residual	67	None	replace
324	[BUG]  [BUGGY]  Math.sqrt(wm[i].getWeight()  *  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.sqrt(wm[i].getWeight()  *  coefficient);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.sqrt(wm[i].getWeight()  *  coefficient);	  Math.sqrt(wm[i].getWeight()    *    cost);    	non-compiled	[CE]  cannot  find  symbol  coefficient	67	None	replace
325	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  [i].getResidual();  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  [i].getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  [i].getResidual();	  wm[i]    =    problem.getMeasurements()    [i];    	non-compiled	[CE]  incompatible  types	126	None	replace
326	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  [i  +  1];  [CE]  cannot  find  symbol  residual  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  [i  +  1];  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  [i  +  1];	  wm[i]    =    problem.getMeasurements()    [i];    	non-compiled	[CE]  cannot  find  symbol  residual	126	None	replace
327	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  [i],  criterion;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  [i],  criterion;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  [i],  criterion;	  wm[i]    =    problem.getMeasurements()    [i];    	non-compiled	[CE]  ';'  expected	126	None	replace
328	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  i);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount(),  i);	  Math.rint(wm[i].getMeasurementCount());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
329	[BUG]  [BUGGY]  double  wm  =  problems[i].getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problems[i].getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problems[i].getMeasurements();	  double    wm    =    problem[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
330	[BUG]  [BUGGY]  double  residual  =  problems[i].getRMS(wm);  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  problems[i].getRMS(wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  problems[i].getRMS(wm);	  double    residual    =    wm[i].getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  problems	114	None	replace
331	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidue()  *  factor;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRsidue()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidue()  *  factor;	  double    residual    =    wm[i].getRsidue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
332	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion  +  i);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion  +  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion  +  i);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  inconvertible  types	8	None	replace
333	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardResidual()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardResidual()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardResidual()  +  i;	  double    wm    =    wm[i].getStandardResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
334	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMeasurement();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardMeasurement();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMeasurement();	  double    wm    =    wm[i].getStandardResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	113	None	replace
335	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements().length  +  2;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurements().length  +  2;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements().length  +  2;	  double    wm    =    wm[i].getMeasurements().length;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	83	None	replace
336	[BUG]  [BUGGY]  double  ret  =  wm[i].getWeight();  [CE]  cannot  find  symbol  residual  [FE]                AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  ret  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  ret  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    remaining    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  residual	14	None	replace
337	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  +  i;	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
338	[BUG]  [BUGGY]  wm[i]  =  Problem.getStandardResidual();  [CE]  cannot  find  symbol  Problem  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  Problem.getStandardResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.getStandardResidual();	  wm[i]    =    problem.getStandardResidual();    	non-compiled	[CE]  cannot  find  symbol  Problem	99	None	replace
339	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMeasurements()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardMeasurements()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMeasurements()  +  i;	  double    wm    =    wm[i].getStandardMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	106	None	replace
340	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  -  1);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight()  -  1);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
341	[BUG]  [BUGGY]  wm[i]  =  Problem.RMS.getResidual(i);  [CE]  package  Problem  does  not  exist  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  Problem.RMS.getResidual(i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.RMS.getResidual(i);	  wm[i]    =    Problem.RMS.getResidual();    	non-compiled	[CE]  package  Problem  does  not  exist	125	None	replace
342	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  Double  criterion  =  wm[i].getResidual()  *  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  Double  criterion  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    *    1;    Double  criterion  =  wm[i].getResidual()  *  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	62	None	add
343	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurements()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurements()  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurements()  -  1);	  Math.rint(wm[i],    problem.getMeasurementCount()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	85	None	replace
344	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1  +  i);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1  +  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount()  -  1  +  i);	  Math.rint(wm[i],    problem.getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
345	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  criterion);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
346	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(this,  problem);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(this,  problem);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(this,  problem);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem);    	non-compiled	[CE]  inconvertible  types	116	None	replace
347	[BUG]  [BUGGY]  double  residual  =  wm[i].getRight()  +  i;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRight()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRight()  +  i;	  double    residual    =    wm[i].getRight();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
348	[BUG]  [BUGGY]  double  wm  =  wm[i].getWeight()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getWeight()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getWeight()  +  i;	  double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	replace
349	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(result);  [CE]  cannot  find  symbol  result  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(result);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(result);	  double    residual    =    wm[i].getRsidual();    	non-compiled	[CE]  cannot  find  symbol  result	72	None	replace
350	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(remainder);  [CE]  cannot  find  symbol  remainder  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(remainder);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(remainder);	  double    residual    =    wm[i].getRsidual();    	non-compiled	[CE]  cannot  find  symbol  remainder	72	None	replace
351	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  /  1);  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  /  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  /  1);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
352	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  Double  wm[i].getResidual();  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  Double  wm[i].getResidual();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  Double  wm[i].getResidual();	  double    residual    =    wm[i].getResidual()    +    1;    double    wm[i].getResidual()    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
353	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual()  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual();  Double  criterion  =  wm[i].getResidual()  +  1;	  double    residual    =    wm[i].getResidual()    +    1;    Double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	91	None	replace
354	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  wm.length);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS(i,  wm.length);	  EstimationProblem    wm    =    problem.getRMS(i);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	33	None	replace
355	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWeight()  +  i;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWeight()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWeight()  +  i;	  double    residual    =    wm[i].getRowWeight();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
356	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWeight()  *  factor;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWeight()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWeight()  *  factor;	  double    residual    =    wm[i].getRowWeight();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
357	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0  +  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  0  +  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion    +    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	118	None	replace
358	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  i);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight()  -  i);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.max(result,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	117	None	replace
359	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(variable);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(variable);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(variable);	  double    residual    =    wm[i].getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol  	97	None	replace
360	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(variable,  criterion);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRMS(variable,  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(variable,  criterion);	  double    residual    =    wm[i].getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol  	97	None	replace
361	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements(i);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements(i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements(i);	  EstimationProblem    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	34	None	replace
362	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurement();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurement();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurement();	  double    wm    =    wm[i].getMean();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
363	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidue()  +  i;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidue()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidue()  +  i;	  double    residual    =    wm[i].getRowResidue();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
364	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidue()  *  factor;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidue()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidue()  *  factor;	  double    residual    =    wm[i].getRowResidue();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
365	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i,  wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getRMS(i,  wm);	  EstimationProblem    criterion    =    problem.getRMS(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
366	[BUG]  [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor;  [CE]  cannot  find  symbol  Criterion  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Criterion  +=  wm[i].getWeight()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Criterion  +=  wm[i].getWeight()  *  factor;	  criterion    +=    wm[i].getWeight()    *    cost;    	non-compiled	[CE]  cannot  find  symbol  Criterion	66	None	replace
367	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRMS()  *  i;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRMS()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRMS()  *  i;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	replace
368	[BUG]  [BUGGY]  double  residual  =  wm[i].getRemainder()  *  factor;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRemainder()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRemainder()  *  factor;	  double    residual    =    wm[i].getRemainder();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
369	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements(i);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements(i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements(i);	  double    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
370	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i,  wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i,  wm);	  EstimationProblem    criterion    =    problem.getMeasurements(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	77	None	replace
371	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm.length);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
372	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  coefficient);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem,    i);    	non-compiled	[CE]  cannot  find  symbol  coefficient	49	None	replace
373	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems,  parameters.getMeasurements();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  problems,  parameters.getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  problems,  parameters.getMeasurements();	  SizedMeasurement[]    measurements    =    problems.getMeasurements();    	non-compiled	[CE]  ';'  expected	73	None	replace
374	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRowValue()  *  i;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRowValue()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRowValue()  *  i;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	39	None	replace
375	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(wm,  criterion[i]);  [CE]  array  required,  but  double  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(wm,  criterion[i]);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(wm,  criterion[i]);	  ((    EstimationProblem)problem).getRMS(criterion,    wm[i]);    	non-compiled	[CE]  array  required,  but  double  found	122	None	replace
376	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  i);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  i);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    cost);    	non-compiled	[CE]  inconvertible  types	42	None	replace
377	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidual()  +  i;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidual()  +  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidual()  +  i;	  double    residual    =    wm[i].getRowResidual();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
378	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  i  +  1);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  i  +  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  *  i  +  1);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  inconvertible  types	57	None	replace
379	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  /  1);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  /  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  /  1);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  inconvertible  types	57	None	replace
380	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  [i].result;  [CE]  cannot  find  symbol  result  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  [i].result;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  [i].result;	  wm[i]    =    problem.getMeasurements()    [i];    	non-compiled	[CE]  cannot  find  symbol  result	126	None	replace
381	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(problem,  costEvaluations);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(problem,  costEvaluations);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(problem,  costEvaluations);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
382	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i  *  i;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  +  i  *  i;	  wm[i]    =    problem.getMeasurements()    +    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	105	None	replace
383	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i],  criterion);	  EstimationProblem    wm    =    problem.getMeasurements()[i];    	non-compiled	[CE]  ';'  expected	112	None	replace
384	[BUG]  [BUGGY]  double  residual  =  wm[i].getRangeValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRangeValue();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRangeValue();	  double    residual    =    wm[i].getColumnValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
385	[BUG]  [BUGGY]  double  residual  =  wm[i],  problem.getRMS();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i],  problem.getRMS();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  problem.getRMS();	  double    residual    =    wm[i],    cost.getRMS();    	non-compiled	[CE]  ';'  expected	98	None	replace
386	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion);	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
387	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion.getResidual());  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion.getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion.getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
388	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  cost.getResidual());  [CE]  double  cannot  be  dereferenced  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  cost.getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  cost.getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
389	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
390	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion  +  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i],  criterion  +  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
391	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  i);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  i);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
392	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  i,  criterion);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  i,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  i,  criterion);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
393	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  i,  factor);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  i,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  i,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion,    factor);    	non-compiled	[CE]  inconvertible  types	20	None	replace
394	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  cost);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  cost);	  ((    EstimationProblem)problem).getRMS(i,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
395	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters,  problem.getMeasurements();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  parameters,  problem.getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  parameters,  problem.getMeasurements();	  SizedMeasurement[]    measurements    =    problem,    parameters.getMeasurements();    	non-compiled	[CE]  ';'  expected	52	None	replace
396	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm);	  ((    EstimationProblem)problem).getRMS(criterion);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
397	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRsidual()  +  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRsidual()  +  i;	  EstimationProblem    wm    =    problem.getRsidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	35	None	replace
398	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    factor);    	non-compiled	[CE]  inconvertible  types	22	None	replace
399	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  factor);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    factor);    	non-compiled	[CE]  inconvertible  types	22	None	replace
400	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reciterion,  factor);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reciterion,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reciterion,  factor);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    factor);    	non-compiled	[CE]  inconvertible  types	22	None	replace
401	[BUG]  [BUGGY]  double  wm  =  problem.getResidual()  *  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getResidual()  *  i;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getResidual()  *  i;	  double    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	45	None	replace
402	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRow()  *  i;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRow()  *  i;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRow()  *  i;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	replace
403	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i,  wm.length);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i,  wm.length);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	104	None	replace
404	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i,  wm);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i,  wm);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i,  wm);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	104	None	replace
405	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i,  c);  [CE]  cannot  find  symbol  c  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements(i,  c);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i,  c);	  wm[i]    =    problem.getMeasurements(i);    	non-compiled	[CE]  cannot  find  symbol  c	104	None	replace
406	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  +  wm[i].getWeight();	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
407	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  *  i);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  *  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  2  *  i);	  Math.rint(wm[i].getMeasurementCount()    *    2    -    1);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
408	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  i);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  i);	  ((    EstimationProblem)problem).getRMS(ast,    i);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
409	[BUG]  [BUGGY]  wm[i]  =  problems.getResidual();  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problems.getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problems.getResidual();	  wm[i]    =    wm.getResidual();    	non-compiled	[CE]  cannot  find  symbol  problems	124	None	replace
410	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight(),  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
411	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  criterion);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
412	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	102	None	replace
413	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  criterion);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redefinition,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
414	[BUG]  [BUGGY]  double  residual  =  wm[i].getWidth()  *  criterion;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getWidth()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWidth()  *  criterion;	  double    residual    =    wm[i].getWeight()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
415	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reason,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reason,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(reason,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
416	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(factor);  [CE]  cannot  find  symbol  factor  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue(factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(factor);	  double    residual    =    wm[i].getResidue(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	119	None	replace
417	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i,  wm);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurement(i,  wm);	  EstimationProblem    criterion    =    problem.getMeasurement(i);    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
418	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(braced[i].getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(braced[i].getWeight(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(braced[i].getWeight(),  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    criterion);    	non-compiled	[CE]  inconvertible  types	41	None	replace
419	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  2);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  2);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  2);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    1);    	non-compiled	[CE]  inconvertible  types	57	None	replace
420	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  *  cost;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowValue()  *  cost;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  *  cost;	  double    residual    =    wm[i].getRowValue()    *    criterion;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
421	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRow()  *  reciterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRow()  *  reciterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRow()  *  reciterion;	  double    residual    =    wm[i].getRow()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	37	None	replace
422	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  coefficient);	  ((    EstimationProblem)problem).getRMS(criterion,    i);    	non-compiled	[CE]  cannot  find  symbol  coefficient	7	None	replace
423	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidual()  *  factor;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRsidual()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidual()  *  factor;	  double    residual    =    wm[i].getRsidual();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
424	[BUG]  [BUGGY]  wm[i]  =  wm.getRMS();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  wm.getRMS();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  wm.getRMS();	  wm[i]    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
425	[BUG]  [BUGGY]  wm[i]  =  problems[i].getRMS();  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problems[i].getRMS();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problems[i].getRMS();	  wm[i]    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol  problems	53	None	replace
426	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMeasurements().length;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardMeasurements().length;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMeasurements().length;	  double    wm    =    wm[i].getStandardMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	106	None	replace
427	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMeasurements(criterion);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardMeasurements(criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMeasurements(criterion);	  double    wm    =    wm[i].getStandardMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	106	None	replace
428	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  criterion);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount(),  criterion);	  Math.rint(wm[i].getMeasurementCount());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
429	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight(),  cost);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight(),  cost);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight(),  cost);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight(),    cost);    	non-compiled	[CE]  inconvertible  types	42	None	replace
430	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWidth()  *  factor;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowWidth()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWidth()  *  factor;	  double    residual    =    wm[i].getRowWidth();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
431	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i  +  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i  +  2;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  *  i  +  2;	  wm[i]    =    problem.getMeasurements()    *    i;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
432	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  1.0);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  1.0);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  1.0);	  Math.rint(wm[i].getMeasurementCount()    /    1);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
433	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  SizedMeasurement[]  measurements  =  parameters[i].getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  parameters[i].getMeasurements();	  SizedMeasurement[]    measurements    =    problems[i].getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
434	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  factor;  [CE]  cannot  find  symbol  factor  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidual()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  *  factor;	  double    residual    =    wm[i].getResidual()    *    1;    	non-compiled	[CE]  cannot  find  symbol  factor	63	None	replace
435	[BUG]  [BUGGY]  double  residual  =  wm[i].getRemainderValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRemainderValue();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRemainderValue();	  double    residual    =    wm[i].getColumnValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
436	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i].getResidual());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i].getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  wm[i].getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
437	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion,  wm[i].getResidual());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion,  wm[i].getResidual());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i],  criterion,  wm[i].getResidual());	  ((    EstimationProblem)problem).getRMS(i,    wm[i].getResidual());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
438	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMean();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getStandardMean();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMean();	  double    wm    =    wm[i].getMean();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
439	[BUG]  [BUGGY]  double  wm  =  wm[i].getSecond();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getSecond();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getSecond();	  double    wm    =    wm[i].getMean();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	94	None	replace
440	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  *  criterion  -  1);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  *  criterion  -  1);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  2  *  criterion  -  1);	  Math.rint(wm[i].getMeasurementCount()    *    2    -    1);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
441	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight(),  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i],    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	43	None	replace
442	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight(),  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight(),  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.max(result,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	117	None	replace
443	[BUG]  [BUGGY]  wm[i]  =  wm.getRsidual();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  wm.getRsidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  wm.getRsidual();	  wm[i]    =    problem.getRsidual();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
444	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements().length  -  1;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getMeasurements().length  -  1;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements().length  -  1;	  double    wm    =    wm[i].getMeasurements().length;    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	83	None	replace
445	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRow()  /  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  /  1;	  double    residual    =    wm[i].getRow()    +    1;    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
446	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  criterion);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).setIndexedField(problem);    	non-compiled	[CE]  inconvertible  types	116	None	replace
447	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnValue(i);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getColumnValue(i);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnValue(i);	  double    residual    =    wm[i].getRowValue(i);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
448	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements()  [i];  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  problem.getMeasurements()  [i];  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements()  [i];	  double    wm    =    problem.getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	15	None	replace
449	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(branch.getWeight());    	non-compiled	[CE]  inconvertible  types	82	None	replace
450	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  problem.getWeight());  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  problem.getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  problem.getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(branch.getWeight());    	non-compiled	[CE]  inconvertible  types	82	None	replace
451	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm.length);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm.length);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm.length);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm.length);    	non-compiled	[CE]  inconvertible  types	23	None	replace
452	[BUG]  [BUGGY]  double  criterion  =  wm[i].getRMS()  *  reciterion;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getRMS()  *  reciterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getRMS()  *  reciterion;	  double    residual    =    wm[i].getRMS()    *    criterion;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	28	None	replace
453	[BUG]  [BUGGY]  wm[i]  =  problem,  parameters.getStandardResidual();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  problem,  parameters.getStandardResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem,  parameters.getStandardResidual();	  wm[i]    =    problem.getStandardResidual();    	non-compiled	[CE]  ';'  expected	99	None	replace
454	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidue(criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRsidue(criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidue(criterion);	  double    residual    =    wm[i].getRsidue();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
455	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidue(criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidue(criterion);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidue(criterion);	  double    residual    =    wm[i].getRowResidue();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
456	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidual()  *  factor;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getRowResidual()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidual()  *  factor;	  double    residual    =    wm[i].getRowResidual();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
457	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  int  cols  =  wm[i].getColumnCount()  *  2;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnCount()  *  2;	  int    cols    =    wm[i].getColumnCount()    +    2;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
458	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i],  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i],  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  wm[i],  coefficient);	  ((    EstimationProblem)problem).getRMS(criterion,    wm[i]);    	non-compiled	[CE]  cannot  find  symbol  coefficient	122	None	replace
459	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  factor;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  factor;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()  [i].getWeight()  *  factor;	  EstimationProblem    criterion    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	78	None	replace
460	[BUG]  [BUGGY]  double  w  =  wm[i].getWeight();  [CE]  cannot  find  symbol  residual  [FE]        AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  w  =  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  w  =  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol  residual	10	None	replace
461	[BUG]  [BUGGY]  wm[i]  =  Problem.RMS  ||  problem.getResidual();  [CE]  cannot  find  symbol  Problem  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  Problem.RMS  ||  problem.getResidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.RMS  ||  problem.getResidual();	  wm[i]    =    Problem.RMS.getResidual();    	non-compiled	[CE]  cannot  find  symbol  Problem	125	None	replace
462	[BUG]  [BUGGY]  wm[i]  =  Problem.RMS_RESULT;  [CE]  cannot  find  symbol  Problem  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  Problem.RMS_RESULT;  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.RMS_RESULT;	  wm[i]    =    Problem.RMS.getResidual();    	non-compiled	[CE]  cannot  find  symbol  Problem	125	None	replace
463	[BUG]  [BUGGY]  double  wm[i].getWeight();  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm[i].getWeight();  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm[i].getWeight();	  double    residual    =    wm[i].getWeight();    double    wm[i].getWeight();    	non-compiled	[CE]  ']'  expected	12	None	replace
464	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(problem,  factor);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(problem,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(problem,  factor);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
465	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(problem,  coefficient);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getRMS(problem,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(problem,  coefficient);	  double    wm    =    wm[i].getRMS(problem);    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	95	None	replace
466	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  factor);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  factor);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  factor);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
467	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  coefficient);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  coefficient);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  criterion,  coefficient);	  Math.rint(wm[i].getMeasurementCount()    -    1,    criterion);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
468	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(remainder,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(remainder,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(remainder,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
469	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(brace,  wm[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	40	None	replace
470	[BUG]  [BUGGY]  double  wm  =  parameters[i].getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  parameters[i].getMeasurements();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  parameters[i].getMeasurements();	  double    wm    =    problem[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
471	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redeclarations[i].getWeight());  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redeclarations[i].getWeight());  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(redeclarations[i].getWeight());	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket[i].getWeight());    	non-compiled	[CE]  inconvertible  types	81	None	replace
472	[BUG]  [BUGGY]  double  criterion  =  wm[i].getResidual()  *  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  criterion  =  wm[i].getResidual()  *  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  criterion  =  wm[i].getResidual()  *  1;	  double    residual    =    wm[i].getResidual()    +    1;    double    criterion    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	2	None	replace
473	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(protocol,  i);  [CE]  cannot  find  symbol  protocol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)problem).getRMS(protocol,  i);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(protocol,  i);	  ((    EstimationProblem)problem).getRMS(ast,    i);    	non-compiled	[CE]  cannot  find  symbol  protocol	9	None	replace
474	[BUG]  [BUGGY]  double  wm  =  wm[i].getSidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  wm  =  wm[i].getSidual();  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getSidual();	  double    wm    =    wm[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	44	None	replace
475	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  criterion);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
476	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  1.0);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  1.0);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(result,  1.0);	  ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(criterion,    criterion);    	non-compiled	[CE]  inconvertible  types	115	None	replace
477	[BUG]  [BUGGY]  wm[i]  =  wm.getMeasurements()  [i];  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  wm[i]  =  wm.getMeasurements()  [i];  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  wm.getMeasurements()  [i];	  wm[i]    =    problem.getMeasurements()    [i];    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
478	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  *  criterion;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  *  criterion;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()  [i].getWeight()  *  criterion;	  EstimationProblem    wm    =    problem.getMeasurements()[i].getWeight();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	111	None	replace
479	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  error);  [CE]  cannot  find  symbol  error  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm).getRMS(criterion,  error);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(criterion,  error);	  ((    EstimationProblem)wm).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol  error	8	None	replace
480	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.resid);  [CE]  cannot  find  symbol  resid  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.resid);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  problem.resid);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion    +    factor);    	non-compiled	[CE]  cannot  find  symbol  resid	102	None	replace
481	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(chroterion,  factor);  [CE]  cannot  find  symbol  chroterion  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue(chroterion,  factor);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(chroterion,  factor);	  double    residual    =    wm[i].getResidue(criterion);    	non-compiled	[CE]  cannot  find  symbol  chroterion	119	None	replace
482	[BUG]  [BUGGY]  EstimationProblem  result  =  wm.getRMS(i);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  EstimationProblem  result  =  wm.getRMS(i);  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  result  =  wm.getRMS(i);	  EstimationProblem    result    =    problem.getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
483	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor  +  1;  [BUGGY]      criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  factor  +  1;	  double    residual    =    wm[i].getResidue()    *    factor;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
484	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterian);  [CE]  cannot  find  symbol  criterian  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {      [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterian);  [BUGGY]      double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterian);	  ((    EstimationProblem)wm[i].getResidual()).setWeight(reciterion);    	non-compiled	[CE]  cannot  find  symbol  criterian	103	None	replace
