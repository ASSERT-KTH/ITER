bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  residual  =  wm[i].getResidual()  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    double  residual  =  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
2	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  criterion  =  wm[i].getResidual()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  criterion  =  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    double  criterion  =  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
3	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  Double  residual  =  wm[i].getResidual()  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  Double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    Double  residual  =  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
4	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  wm[i].getResidual()  +  1;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    double  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  ']'  expected	3	None	add
5	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  remaining  =  wm[i].getResidual()  +  1;  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  double  remaining  =  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    double  remaining  =  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
6	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
7	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  i);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  i);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
8	[BUG]  [BUGGY]  ((  EstimationProblem)wm).getRMS(i);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm).getRMS(i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm).getRMS(i);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  inconvertible  types	15	None	replace
9	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(ast,  i);  [CE]  cannot  find  symbol  ast  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(ast,  i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(ast,  i);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol  ast	15	None	replace
10	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  double  residual  =  wm[i].getWeight();  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  double  residual  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    double  residual  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
11	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  double  criterion  =  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  double  criterion  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    double  criterion  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
12	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  double  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    double  wm[i].getWeight();	  	non-compiled	[CE]  ']'  expected	1	None	add
13	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  Double  residual  =  wm[i].getWeight();  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  Double  residual  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    Double  residual  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
14	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  double  remaining  =  wm[i].getWeight();  [CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  double  remaining  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    double  remaining  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  residual  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
15	[BUG]  [BUGGY]  double  wm  =  problem.getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  problem.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getMeasurements();	      double    wm    =    wm[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
16	[BUG]  [BUGGY]  double  wm  =  problem[i].getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  problem[i].getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem[i].getMeasurements();	      double    wm    =    wm[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
17	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  -  1);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getMeasurementCount()  *  2  -  1);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  *  2  -  1);	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
18	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  2);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  2);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  2);	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
19	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount());  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getMeasurementCount());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount());	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
20	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor);  [CE]  inconvertible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion,  factor);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion);    	non-compiled	[CE]  inconvertible  types	14	None	replace
21	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor);  [CE]  inconvertible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket,  criterion,  factor);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion);    	non-compiled	[CE]  inconvertible  types	14	None	replace
22	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  factor);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  factor);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion);    	non-compiled	[CE]  inconvertible  types	14	None	replace
23	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.length);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.length);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm.length);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion);    	non-compiled	[CE]  inconvertible  types	14	None	replace
24	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getColumnCount()  +  1;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnCount()  +  1;	      int    cols    =    wm[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  int  cols  =  wm[i].getRowCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getRowCount();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getRowCount();	      int    cols    =    wm[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnCount()  +  2;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getColumnCount()  +  2;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnCount()  +  2;	      int    cols    =    wm[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
27	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  +  criterion;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRMS()  +  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  +  criterion;	  double    residual    =    wm[i].getRMS();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
28	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS()  *  criterion;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRMS()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS()  *  criterion;	  double    residual    =    wm[i].getRMS();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
29	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWidth();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowWidth();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWidth();	  double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getWeight()  *  criterion;	  double    residual    =    wm[i].getWeight();    	compilable	  [FE]  AssertionFailedError  	2	3	replace
31	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight()  *  criterion;	  double    residual    =    wm[i].getWeight();    	compilable	  [FE]  AssertionFailedError  	2	3	replace
32	[BUG]  [BUGGY]  double  residual  =  wm[i].getRight();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRight();	  double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
33	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getRMS(i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRMS(i);	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
34	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements();	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
35	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getRsidual();	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
36	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumn();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getColumn();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumn();	  double    residual    =    wm[i].getRow();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
37	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  *  criterion;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRow()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  *  criterion;	  double    residual    =    wm[i].getRow();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
38	[BUG]  [BUGGY]  double  residual  =  wm[i].getColumnValue();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getColumnValue();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getColumnValue();	  double    residual    =    wm[i].getRowValue();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
39	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  *  criterion;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowValue()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  *  criterion;	  double    residual    =    wm[i].getRowValue();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
40	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  wm[i].getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
41	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  criterion);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  criterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  criterion);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
42	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost);  [CE]  inconvertible  types  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight(),  cost);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
43	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i],  wm[i].getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
44	[BUG]  [BUGGY]  double  wm  =  wm[i].getWeight();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getWeight();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getWeight();	      double    wm    =    wm[i].getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
45	[BUG]  [BUGGY]  double  wm  =  problem.getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  problem.getResidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  problem.getResidual();	      double    wm    =    wm[i].getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
46	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor);  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  factor);	      ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	17	None	replace
47	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  coefficient);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  coefficient);	      ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);    	non-compiled	[CE]  cannot  find  symbol  coefficient	17	None	replace
48	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem);  [CE]  inconvertible  types  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion,  problem);	      ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);    	non-compiled	[CE]  inconvertible  types	17	None	replace
49	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  i);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem,  i);	      ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);    	non-compiled	[CE]  inconvertible  types	17	None	replace
50	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  SizedMeasurement[]  measurements  =  wm.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  wm.getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
51	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems[i].getMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  SizedMeasurement[]  measurements  =  problems[i].getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  problems[i].getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problem,  parameters.getMeasurements();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  SizedMeasurement[]  measurements  =  problem,  parameters.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  problem,  parameters.getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  ';'  expected	9	None	replace
53	[BUG]  [BUGGY]  wm[i]  =  problem.getRMS();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getRMS();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getRMS();	      wm[i]    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
54	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getMeasurements()  *  i;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  *  i;	      wm[i]    =    problem.getMeasurements();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	22	None	replace
55	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  *  criterion;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRaw()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  *  criterion;	  double    residual    =    wm[i].getRaw();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
56	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor);  [CE]  cannot  find  symbol  factor  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion,  factor);	      ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	23	None	replace
57	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1);  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  1);	      ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion);    	non-compiled	[CE]  inconvertible  types	23	None	replace
58	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(period,  criterion);  [CE]  cannot  find  symbol  period  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(period,  criterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(period,  criterion);	      ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion);    	non-compiled	[CE]  cannot  find  symbol  period	23	None	replace
59	[BUG]  [BUGGY]  int  cols  =  wm[i].getRows();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getRows();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getRows();	      int    cols    =    wm[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
60	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumns().length;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getColumns().length;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumns().length;	      int    cols    =    wm[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
61	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumns()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getColumns()  +  1;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumns()  +  1;	      int    cols    =    wm[i].getColumns();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getResidual()  *  1;	  double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
63	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  *  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  *  1;	  double    residual    =    wm[i].getResidual()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	1	replace
64	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidual();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowResidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidual();	  double    residual    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
65	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  criterion  =  problem.getRMS(i);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getRMS(i);	      	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
66	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost;  [CE]  cannot  find  symbol  residual  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  criterion  +=  wm[i].getWeight()  *  cost;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	criterion  +=  wm[i].getWeight()  *  cost;	      	non-compiled	[CE]  cannot  find  symbol  residual	7	None	replace
67	[BUG]  [BUGGY]  Math.sqrt(wm[i].getWeight()  *  cost);  [CE]  cannot  find  symbol  residual  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.sqrt(wm[i].getWeight()  *  cost);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.sqrt(wm[i].getWeight()  *  cost);	      	non-compiled	[CE]  cannot  find  symbol  residual	7	None	replace
68	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurement(i);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurement(i);	      	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
69	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  criterion;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidue()  *  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  criterion;	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
70	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  +  criterion;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidue()  +  criterion;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  +  criterion;	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
71	[BUG]  [BUGGY]  wm[i]  =  problem.getRsidual();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getRsidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getRsidual();	      wm[i]    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
72	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidual();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRsidual();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidual();	  double    residual    =    wm[i].getResidual()    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
73	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  SizedMeasurement[]  measurements  =  problems.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  problems.getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
74	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  +  i;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRow()  +  i;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  +  i;	  double    residual    =    wm[i].getRow();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  int  cols  =  wm[i].getColumnSize();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  int  cols  =  wm[i].getColumnSize();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	int  cols  =  wm[i].getColumnSize();	      int    cols    =    wm[i].getColumnCount();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
76	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue()  +  i;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowValue()  +  i;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue()  +  i;	  double    residual    =    wm[i].getRowValue();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
77	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i);  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements(i);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements(i);	      	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
78	[BUG]  [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  criterion  =  problem.getMeasurements()[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  criterion  =  problem.getMeasurements()[i].getWeight();	      	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
79	[BUG]  [BUGGY]  EstimationProblem  result  =  problem.getRMS(i);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  result  =  problem.getRMS(i);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  result  =  problem.getRMS(i);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
80	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getResidual()  +  i;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getResidual()  +  i;	      EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
81	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight());  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket[i].getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
82	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight());  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(branch.getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
83	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements().length;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getMeasurements().length;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements().length;	      double    wm    =    wm[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
84	[BUG]  [BUGGY]  double  wm  =  wm[i].getMeasurements()  +  i;  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getMeasurements()  +  i;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMeasurements()  +  i;	      double    wm    =    wm[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
85	[BUG]  [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i],  problem.getMeasurementCount()  -  1);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i],  problem.getMeasurementCount()  -  1);	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
86	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  1);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getMeasurementCount()  /  1);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  /  1);	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
87	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  Double  criterion  =  wm[i].getWeight();  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  Double  criterion  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    Double  criterion  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
88	[BUG]  [BUGGY]  double  residual  =  wm[i].getRemainder();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRemainder();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRemainder();	  double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
89	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowWeight();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowWeight();	  double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
90	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue(i);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowValue(i);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue(i);	  double    residual    =    wm[i].getWeight();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
91	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  Double  criterion  =  wm[i].getResidual()  +  1;  [CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  Double  criterion  =  wm[i].getResidual()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getResidual()    +    1;    Double  criterion  =  wm[i].getResidual()  +  1;	  	non-compiled	[CE]  variable  criterion  is  already  defined  in  method  getRMS(EstimationProblem)	3	None	add
92	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidue()  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue()  *  factor;	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
93	[BUG]  [BUGGY]  double  residual  =  wm[i].getRsidue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRsidue();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRsidue();	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
94	[BUG]  [BUGGY]  double  wm  =  wm[i].getMean();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getMean();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getMean();	      double    wm    =    wm[i].getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
95	[BUG]  [BUGGY]  double  wm  =  wm[i].getRMS(problem);  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getRMS(problem);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getRMS(problem);	      double    wm    =    wm[i].getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
96	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw()  +  i;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRaw()  +  i;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw()  +  i;	  double    residual    =    wm[i].getRaw();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
97	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(criterion);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRMS(criterion);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(criterion);	  double    residual    =    wm[i].getRMS();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
98	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRMS();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i],  cost.getRMS();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRMS();	  double    residual    =    wm[i].getRMS();    	non-compiled	[CE]  ';'  expected	18	None	replace
99	[BUG]  [BUGGY]  wm[i]  =  problem.getStandardResidual();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getStandardResidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getStandardResidual();	      wm[i]    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
100	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i]);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i]);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
101	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual());  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(i,  wm[i].getResidual());	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
102	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  factor);  [CE]  cannot  find  symbol  factor  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  factor);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(criterion  +  factor);	      ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion);    	non-compiled	[CE]  cannot  find  symbol  factor	23	None	replace
103	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(reciterion);  [CE]  cannot  find  symbol  reciterion  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setWeight(reciterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setWeight(reciterion);	      ((    EstimationProblem)wm[i].getResidual()).setWeight(criterion);    	non-compiled	[CE]  cannot  find  symbol  reciterion	23	None	replace
104	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements(i);  [CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getMeasurements(i);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements(i);	      wm[i]    =    problem.getMeasurements();    	non-compiled	[CE]  method  getMeasurements  in  interface  EstimationProblem  cannot  be  applied  to  given  types;	22	None	replace
105	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getMeasurements()  +  i;  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  +  i;	      wm[i]    =    problem.getMeasurements();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
106	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getStandardMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardMeasurements();	      double    wm    =    wm[i].getMeasurements();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	16	None	replace
107	[BUG]  [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getMeasurementCount()  -  1,  criterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getMeasurementCount()  -  1,  criterion);	      Math.rint(wm[i].getMeasurementCount()    -    1);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
108	[BUG]  [BUGGY]  double  residual  =  wm[i],  cost.getRaw();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i],  cost.getRaw();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i],  cost.getRaw();	  double    residual    =    wm[i].getRaw();    	non-compiled	[CE]  ';'  expected	5	None	replace
109	[BUG]  [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor;  [CE]  cannot  find  symbol  factor  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  criterion  +=  wm[i].getWeight()  *  factor;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	criterion  +=  wm[i].getWeight()  *  factor;	      	non-compiled	[CE]  cannot  find  symbol  factor	7	None	replace
110	[BUG]  [BUGGY]  Math.rint(wm[i].getWeight()  *  factor);  [CE]  cannot  find  symbol  factor  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  Math.rint(wm[i].getWeight()  *  factor);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	Math.rint(wm[i].getWeight()  *  factor);	      	non-compiled	[CE]  cannot  find  symbol  factor	7	None	replace
111	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()[i].getWeight();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()[i].getWeight();	      	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
112	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()[i];  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  EstimationProblem  wm  =  problem.getMeasurements()[i];  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	EstimationProblem  wm  =  problem.getMeasurements()[i];	      	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	7	None	replace
113	[BUG]  [BUGGY]  double  wm  =  wm[i].getStandardResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  wm  =  wm[i].getStandardResidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  wm  =  wm[i].getStandardResidual();	      double    wm    =    wm[i].getResidual();    	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	13	None	replace
114	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS(problem);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRMS(problem);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS(problem);	  double    residual    =    wm[i].getRMS();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
115	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  criterion);  [CE]  inconvertible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  criterion);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion,  criterion);	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(bracket.length,    criterion);    	non-compiled	[CE]  inconvertible  types	14	None	replace
116	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem);  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).setIndexedField(problem);	      ((    EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);    	non-compiled	[CE]  inconvertible  types	17	None	replace
117	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight());  [CE]  inconvertible  types  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.max(result,  wm[i].getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
118	[BUG]  [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion  +  wm[i].getWeight());  [CE]  inconvertible  types  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion  +  wm[i].getWeight());  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(criterion  +  wm[i].getWeight());	      ((    EstimationProblem)wm[i].getResidual()).result    =    Math.min(wm[i].getWeight());    	non-compiled	[CE]  inconvertible  types	24	None	replace
119	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue(criterion);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getResidue(criterion);  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue(criterion);	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
120	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowResidue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRowResidue();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowResidue();	  double    residual    =    wm[i].getResidue();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
121	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow()  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getRow()  +  1;  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow()  +  1;	  double    residual    =    wm[i].getRow();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
122	[BUG]  [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i]);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  ((  EstimationProblem)problem).getRMS(criterion,  wm[i]);  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	((  EstimationProblem)problem).getRMS(criterion,  wm[i]);	      ((    EstimationProblem)problem).getRMS(i);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
123	[BUG]  [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  SizedMeasurement[]  measurements  =  parameters.getMeasurements();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	SizedMeasurement[]  measurements  =  parameters.getMeasurements();	      SizedMeasurement[]    measurements    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
124	[BUG]  [BUGGY]  wm[i]  =  wm.getResidual();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  wm.getResidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  wm.getResidual();	      wm[i]    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
125	[BUG]  [BUGGY]  wm[i]  =  Problem.RMS.getResidual();  [CE]  package  Problem  does  not  exist  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  Problem.RMS.getResidual();  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  Problem.RMS.getResidual();	      wm[i]    =    problem.getResidual();    	non-compiled	[CE]  package  Problem  does  not  exist	21	None	replace
126	[BUG]  [BUGGY]  wm[i]  =  problem.getMeasurements()  [i];  [CE]  cannot  find  symbol  residual  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  wm[i]  =  problem.getMeasurements()  [i];  [BUGGY]    double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	wm[i]  =  problem.getMeasurements()  [i];	      wm[i]    =    problem.getMeasurements();    	non-compiled	[CE]  cannot  find  symbol  residual	22	None	replace
127	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  double  wm  =  wm[i].getWeight();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    AssertionFailedError    [CONTEXT]    public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {    [BUGGY]  double  residual  =  wm[i].getWeight();  double  wm  =  wm[i].getWeight();  [BUGGY]    criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double    residual    =    wm[i].getWeight();    double  wm  =  wm[i].getWeight();	  	non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	1	None	add
