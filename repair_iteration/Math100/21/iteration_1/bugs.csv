bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getWeight();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getWeight();	double  residual  =  wm[i].getResidual();  	compilable	  [FE]  AssertionFailedError  	42	9	replace
2	[BUG]  [BUGGY]  double  residual  =  wm[i].getWeight();  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getWeight();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getWeight();	double  residual  =  wm[i].getResidual();  	compilable	  [FE]  AssertionFailedError  	42	9	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	double  residual  =  wm[i].getResidual()  +  1;	double  residual  =  wm[i].getResidual();  	compilable	  [FE]  AssertionFailedError  	42	9	replace
4	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  [FE]  AssertionFailedError  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidual()  +  1;  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidual()  +  1;	double  residual  =  wm[i].getResidual();  	compilable	  [FE]  AssertionFailedError  	42	9	replace
5	[BUG]  [BUGGY]  double  residual  =  wm[i].getRaw();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getRaw();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRaw();	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol	42	None	replace
6	[BUG]  [BUGGY]  double  residual  =  wm[i].getRow();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getRow();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRow();	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol	42	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  residual  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	  	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol  residual	42	None	replace
8	[BUG]  [BUGGY]    EstimationProblem  wm  =  problem.getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    EstimationProblem  wm  =  problem.getResidual();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    EstimationProblem  wm  =  problem.getResidual();		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	43	None	add
9	[BUG]  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getMeasurements();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    SizedMeasurement[]  measurements  =  problem.getMeasurements();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    SizedMeasurement[]  measurements  =  problem.getMeasurements();		non-compiled	[CE]  cannot  find  symbol	43	None	add
10	[BUG]  [BUGGY]    int  cols  =  wm[i].getColumns();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    int  cols  =  wm[i].getColumns();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    int  cols  =  wm[i].getColumns();		non-compiled	[CE]  cannot  find  symbol	43	None	add
11	[BUG]  [BUGGY]    int  cols  =  wm[i].getColumnCount();  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    int  cols  =  wm[i].getColumnCount();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    int  cols  =  wm[i].getColumnCount();		non-compiled	[CE]  cannot  find  symbol	43	None	add
12	[BUG]  [BUGGY]    Math.rint(wm[i].getMeasurementCount()  -  1);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    Math.rint(wm[i].getMeasurementCount()  -  1);  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    Math.rint(wm[i].getMeasurementCount()  -  1);		non-compiled	[CE]  cannot  find  symbol	43	None	add
13	[BUG]  [BUGGY]    double  wm  =  wm[i].getResidual();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    double  wm  =  wm[i].getResidual();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    double  wm  =  wm[i].getResidual();		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	43	None	add
14	[BUG]  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion);  [CE]  inconvertible  types  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion);  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(bracket.length,  criterion);		non-compiled	[CE]  inconvertible  types	43	None	add
15	[BUG]  [BUGGY]    ((  EstimationProblem)problem).getRMS(i);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    ((  EstimationProblem)problem).getRMS(i);  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    ((  EstimationProblem)problem).getRMS(i);		non-compiled	[CE]  cannot  find  symbol	43	None	add
16	[BUG]  [BUGGY]    double  wm  =  wm[i].getMeasurements();  [CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    double  wm  =  wm[i].getMeasurements();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    double  wm  =  wm[i].getMeasurements();		non-compiled	[CE]  variable  wm  is  already  defined  in  method  getRMS(EstimationProblem)	43	None	add
17	[BUG]  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);  [CE]  inconvertible  types  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    ((  EstimationProblem)wm[i].getResidual()).setIndexedField(criterion);		non-compiled	[CE]  inconvertible  types	43	None	add
18	[BUG]  [BUGGY]  double  residual  =  wm[i].getRMS();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getRMS();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRMS();	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol	42	None	replace
19	[BUG]  [BUGGY]  double  residual  =  wm[i].getResidue();  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getResidue();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getResidue();	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol	42	None	replace
20	[BUG]  [BUGGY]  double  residual  =  wm[i].getRowValue();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]  double  residual  =  wm[i].getRowValue();  [BUGGY]  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	double  residual  =  wm[i].getRowValue();	double  residual  =  wm[i].getResidual();  	non-compiled	[CE]  cannot  find  symbol	42	None	replace
21	[BUG]  [BUGGY]    wm[i]  =  problem.getResidual();  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    wm[i]  =  problem.getResidual();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    wm[i]  =  problem.getResidual();		non-compiled	[CE]  cannot  find  symbol	43	None	add
22	[BUG]  [BUGGY]    wm[i]  =  problem.getMeasurements();  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    wm[i]  =  problem.getMeasurements();  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    wm[i]  =  problem.getMeasurements();		non-compiled	[CE]  incompatible  types	43	None	add
23	[BUG]  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion);  [CE]  inconvertible  types  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion);  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    ((  EstimationProblem)wm[i].getResidual()).setWeight(criterion);		non-compiled	[CE]  inconvertible  types	43	None	add
24	[BUG]  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight());  [CE]  inconvertible  types  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  public  double  getRMS(EstimationProblem  problem)  {  WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  [BUGGY]    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight());  [BUGGY]  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	    ((  EstimationProblem)wm[i].getResidual()).result  =  Math.min(wm[i].getWeight());		non-compiled	[CE]  inconvertible  types	43	None	add
