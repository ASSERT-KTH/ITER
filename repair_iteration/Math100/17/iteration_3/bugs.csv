bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  cols[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    total    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	90	None	replace
2	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  max);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  max);	  ((    EstimationProblem)problem).setMeasures(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
3	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  k);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  k);	  ((    EstimationProblem)problem).setMeasures(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
4	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  jTj,  rows);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  jTj,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  jTj,  rows);	  ((    EstimationProblem)problem).setMeasures(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
5	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows);	  ((    EstimationProblem)problem).setMeasurements(rows);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
6	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  k);	  ((    EstimationProblem)problem).setMeasurements(rows);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
7	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jcobian[j  +  i];  [CE]  cannot  find  symbol  jcobian  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jcobian[j  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jcobian[j  +  i];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	133	None	replace
8	[BUG]  [BUGGY]  SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	170	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	1	replace
10	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	170	1	replace
11	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
12	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
13	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	201	None	replace
14	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian;	  sum    +=    jTj[k    +    j]    *    jacobian;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
15	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  k,  max);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  k,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  k,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  max);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
17	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  max);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  jTj,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
18	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  cols,  max);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  cols,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
19	[BUG]  [BUGGY]  jTj[i]  =  jTj;  [CE]  incompatible  types  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  jTj;	  jTj[i]    =    sum;    	non-compiled	[CE]  incompatible  types	126	None	replace
20	[BUG]  [BUGGY]  jTj[i]  =  sum  +  1;  [CE]  incompatible  types  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  sum  +  1;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  sum  +  1;	  jTj[i]    =    sum;    	non-compiled	[CE]  incompatible  types	126	None	replace
21	[BUG]  [BUGGY]  SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    sum    =    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
22	[BUG]  [BUGGY]  SummarySquare  sum  =  jTj[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummarySquare  sum  =  jTj[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummarySquare  sum  =  jTj[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    sum    =    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
23	[BUG]  [BUGGY]  SummarySquare  sum  =  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummarySquare  sum  =  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummarySquare  sum  =  jacobian[k  +  i]  *  residuals[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    sum    =    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
24	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][i]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
25	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][i]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
26	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][i]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
27	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
28	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
29	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    for(int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	33	None	add
30	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    int  jTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	33	None	add
31	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    JTj[i][j]  =  sum;  jTj[i][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  JTj	33	None	add
32	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[0]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
35	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[0];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[0]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
36	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  Sum  +=  jacobian[0]  *  jacobian[0];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  Sum  +=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    Sum  +=  jacobian[0]  *  jacobian[0];	  	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	add
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[0]  *  jacobian[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
38	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[0]  *  jacobian[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
39	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[1]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[1]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
40	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[1]  *  jacobian[0];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  +=  jacobian[1]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    sum  +=  jacobian[1]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
41	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  total  +=  jacobian[0]  *  jacobian[0];  [CE]  cannot  find  symbol  total  [FE]            EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  total  +=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    total  +=  jacobian[0]  *  jacobian[0];	  	non-compiled	[CE]  cannot  find  symbol  total	13	None	add
42	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian[1  +  j];	  sum    +=    jTj[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	178	None	replace
43	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[1  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	178	None	replace
44	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[1  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	178	None	replace
45	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[k  +  max];	  sum    +=    jTj[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	47	None	replace
46	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[k  +  j];	  sum    +=    jTj[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	47	None	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
48	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
49	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    Sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	188	None	add
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
51	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
52	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  total  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  total  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  total  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    total  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  total	188	None	add
53	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [CE]  cannot  find  symbol  Sum  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	103	None	replace
54	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	103	None	replace
55	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [CE]  cannot  find  symbol  Sum  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[1];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	103	None	replace
56	[BUG]  [BUGGY]  Sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	103	None	replace
57	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  cols.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  cols.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  cols.length);	  double    jTj    =    Math.max(sum,    residuals.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	165	None	replace
58	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	174	None	replace
59	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	174	None	replace
60	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  [CE]  cannot  find  symbol  Sum  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	53	None	replace
61	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	53	None	replace
62	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	53	None	replace
63	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
64	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
65	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];  [CE]  cannot  find  symbol  ki  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	non-compiled	[CE]  cannot  find  symbol  ki	23	None	replace
66	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	23	None	replace
67	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[jTj  +  j];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[jTj  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[jTj  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	23	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
69	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
70	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	105	None	add
71	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
72	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
74	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
76	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
77	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	159	None	add
78	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
79	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
80	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	159	None	add
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
82	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
83	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	143	None	add
84	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
85	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
86	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
87	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
88	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[k  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
89	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[k  +  i];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
90	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[k  +  i];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
91	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jcobian[k  +  k];  [CE]  cannot  find  symbol  jcobian  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jcobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jcobian[k  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  jcobian	134	None	replace
92	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[1];	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
93	[BUG]  [BUGGY]  sum  +=  cols  *  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jTj[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jTj[0];	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
94	[BUG]  [BUGGY]  sum  +=(jTj[0]  *  jacobian[1]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=(jTj[0]  *  jacobian[1]);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=(jTj[0]  *  jacobian[1]);	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	28	None	replace
95	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  k);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max,  k);	  jTj[i]    =    Math.max(sum,    jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	9	None	replace
96	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  max);  [CE]  no  suitable  method  found  for  max(double,double,double[],int)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  sum,  jTj[i],  max);	  jTj[i]    =    Math.max(sum,    jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[],int)	9	None	replace
97	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  max);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	186	None	replace
98	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	186	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj,  max);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	186	None	replace
100	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  jTj;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  jTj;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  jTj;  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[j][j]    =    jTj;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	183	None	replace
101	[BUG]  [BUGGY]  jTj[j][j]  =  jTj;  [CE]  incompatible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  jTj;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]  =  jTj;	  for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[j][j]    =    jTj;    }    	non-compiled	[CE]  incompatible  types	183	None	replace
102	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  jTj;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  jTj;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  jTj;  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[j][j]    =    jTj;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	183	None	replace
103	[BUG]  [BUGGY]  double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  ';'  expected	91	None	replace
104	[BUG]  [BUGGY]  double  sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  ';'  expected	91	None	replace
105	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jacobian[k  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	163	None	replace
106	[BUG]  [BUGGY]  sum  +=  cols[j  +  i]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  i]  *  jacobian[k  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	163	None	replace
107	[BUG]  [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  k]  *  jacobian[k  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	163	None	replace
108	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
109	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
110	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
111	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[k].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[k].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[k].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
113	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
114	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  j.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  j.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  j.length);	  double    jTj    =    Math.max(sum,    jtj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	82	None	replace
115	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[0];	  sum    +=    jacobian[0]    *    jTj[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	replace
116	[BUG]  [BUGGY]  sum  +=(jTj[0]  *  jacobian[0]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=(jTj[0]  *  jacobian[0]);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=(jTj[0]  *  jacobian[0]);	  sum    +=    jacobian[0]    *    jTj[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	replace
117	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  i,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  i,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  i,  cols);	  ((    EstimationProblem)problem).setMeasurements(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
118	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  rows,  cols);	  ((    EstimationProblem)problem).setMeasurements(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
119	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj,  cols);	  double    jTj    =    Math.max(sum,    cols);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	197	None	replace
120	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  j);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  j);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  j);	  double    jTj    =    Math.max(sum,    cols);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	197	None	replace
121	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  cols);	  double    jTj    =    Math.max(sum,    cols);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	197	None	replace
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	1	replace
123	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  k]  *  jacobian[0  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	189	1	replace
124	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1]  *  jacobian[0];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	189	1	replace
125	[BUG]  [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1]  *  jacobian[0];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	189	1	replace
126	[BUG]  [BUGGY]  sum  +=  jacobian[1]  *  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jTj[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1]  *  jTj[0];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	189	None	replace
127	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  j]  *  jTj[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  j]  *  jTj[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  j]  *  jTj[0  +  k];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	189	None	replace
128	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols.doubleValue());  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    coefficient.doubleValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	185	None	replace
129	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max.doubleValue());  [CE]  int  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    coefficient.doubleValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	185	None	replace
130	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  max);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  k,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
131	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  max);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
132	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  max);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
133	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  k.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  k.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  k.doubleValue());	  double    jTj    =    Math.max(sum,    i.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	187	None	replace
134	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  j.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  j.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  j.doubleValue());	  double    jTj    =    Math.max(sum,    i.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	187	None	replace
135	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  costEvaluations);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  costEvaluations);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols,  costEvaluations);	  jTj[i]    =    Math.max(sum,    jTj[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	107	None	replace
136	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  max);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols,  max);	  jTj[i]    =    Math.max(sum,    jTj[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	107	None	replace
137	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  sum);  [CE]  no  suitable  method  found  for  max(double,double[],int,double)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols,  sum);	  jTj[i]    =    Math.max(sum,    jTj[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,double)	107	None	replace
138	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
139	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
140	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
141	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    max;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
142	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    max;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  remainings.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  remainings.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  remainings.length;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    max;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
144	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[1  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	121	None	replace
145	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[0  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	121	None	replace
146	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	173	None	replace
147	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	173	None	replace
148	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k  +  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  k  +  1);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
149	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k  +  1);  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k  +  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  k  +  1);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
150	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj);  [CE]  no  suitable  method  found  for  max(double,double[][])  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj);	  sum    +=    Math.max(sum,    k);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[][])	128	None	replace
151	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  cols);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
152	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  cols);  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  cols);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
153	[BUG]  [BUGGY]  double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ';'  expected	153	None	replace
154	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	1	replace
155	[BUG]  [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	1	replace
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  else  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  else  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	1	replace
157	[BUG]  [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  else  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  else  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	if(jTj!=  null)  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }  else  {  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  }	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	153	1	replace
158	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
159	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
160	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
161	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
163	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
164	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	51	None	add
165	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
166	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
167	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[j  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
168	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[j  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[j  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
169	[BUG]  [BUGGY]  int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	155	None	replace
170	[BUG]  [BUGGY]  int  jTj[i][j]  =  max;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  jTj[i][j]  =  max;	          jTj[i][j]    =    sum;    int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	155	None	replace
171	[BUG]  [BUGGY]  double  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	155	None	replace
172	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[k  +  max];	  sum    +=    jacobian[i    +    k]    *    jtj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
173	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[jTj[k  +  j];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  cols[jTj[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jtj[k    +    j];    	non-compiled	[CE]  ']'  expected	193	None	replace
174	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  max,  residuals.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  max,  residuals.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  max,  residuals.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
175	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  residuals.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  residuals.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  residuals.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
176	[BUG]  [BUGGY]  double  jTj  =  Math.max(results.length,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(results.length,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(results.length,  sum);	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
177	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  '.class'  expected	123	None	replace
178	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
179	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj,  max;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj,  max;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj,  max;	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  ';'  expected	39	None	replace
180	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj,  cols;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj,  cols;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj,  cols;	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  ';'  expected	39	None	replace
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj.length;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  k]  *  jTj.length;	  sum    +=    jacobian[j    +    k]    *    jTj;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
182	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj.length;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj.length;	  sum    +=    jacobian[j    +    k]    *    jTj;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	replace
183	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj;	  sum    +=    jacobian[0]    *    jacobian[0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
184	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[0];	  sum    +=    jacobian[0]    *    jacobian[0];    	compilable	  [FE]  EstimationException  	14	1	replace
185	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[0];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[0];	  sum    +=    jacobian[0]    *    jacobian[0];    	compilable	  [FE]  EstimationException  	14	1	replace
186	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  jTj[j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[j][j]    =    sum;    jTj[j][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	1	add
187	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  jTj[j][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  jTj[j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    jTj[j][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	98	1	add
188	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  int  jTj[j][j]  =  sum;  [CE]  ']'  expected  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  int  jTj[j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    int  jTj[j][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	98	None	add
189	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  for(int  j][j]  =  sum;  [CE]  ';'  expected  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  for(int  j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    for(int  j][j]  =  sum;	  	non-compiled	[CE]  ';'  expected	98	None	add
190	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  ((  EstimationProblem)problem).setMeasurements(cols);  [CE]  cannot  find  symbol  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  ((  EstimationProblem)problem).setMeasurements(cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    ((  EstimationProblem)problem).setMeasurements(cols);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
191	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum,  residuals);  [CE]  no  suitable  method  found  for  max(double,double[],double,double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum,  residuals);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  sum,  residuals);	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double,double[])	149	None	replace
192	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals);  [CE]  no  suitable  method  found  for  max(double,double[],int,double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals);	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,double[])	149	None	replace
193	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  sum  +=  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    Math.max(sum,    jTj.length);    sum  +=  Math.max(sum,  jTj.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	add
194	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  sum  +=  Math.max(sum,  jTj.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  sum  +=  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    sum  +=  Math.max(sum,  jTj.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	add
195	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  Sum  +=  Math.max(sum,  jTj.length);  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  Sum  +=  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    Sum  +=  Math.max(sum,  jTj.length);	  	non-compiled	[CE]  cannot  find  symbol  Sum	124	None	add
196	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  total  +=  Math.max(sum,  jTj.length);  [CE]  cannot  find  symbol  total  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  total  +=  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    total  +=  Math.max(sum,  jTj.length);	  	non-compiled	[CE]  cannot  find  symbol  total	124	None	add
197	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  max  +=  Math.max(sum,  jTj.length);  [CE]  cannot  assign  a  value  to  final  variable  max  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  max  +=  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    max  +=  Math.max(sum,  jTj.length);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  max	124	None	add
198	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  sum  +=  Math.max(sum,  jTj.length);  }  [CE]  illegal  start  of  type  [FE]            EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  sum  +=  Math.max(sum,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    sum  +=  Math.max(sum,  jTj.length);  }	  	non-compiled	[CE]  illegal  start  of  type	124	None	add
199	[BUG]  [BUGGY]  jTj[i][j]  =  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  jTj.doubleValue();  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  jTj.doubleValue();	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
200	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  /  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  /  jacobian[1];	  sum    +=    jacobian[0]    *    jacobian[1];    	compilable	  [FE]  EstimationException  	30	1	replace
201	[BUG]  [BUGGY]  sum  +=  jacobian[0]  /  jacobian[1];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  /  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  /  jacobian[1];	  sum    +=    jacobian[0]    *    jacobian[1];    	compilable	  [FE]  EstimationException  	30	1	replace
202	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  max;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  max;	  sum    +=    jacobian[0]    *    jacobian[1];    	compilable	  [FE]  EstimationException  	30	1	replace
203	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  max;  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  max;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  max;	  sum    +=    jacobian[0]    *    jacobian[1];    	compilable	  [FE]  EstimationException  	30	1	replace
204	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
205	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
206	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
207	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
208	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	144	1	replace
209	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[0  +  k];	  sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	144	None	replace
210	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
211	[BUG]  [BUGGY]  sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	93	1	replace
212	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[k  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	69	None	replace
213	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
214	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
215	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
216	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  k];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jTj[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
217	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[k  +  k];  [CE]  array  required,  but  int  found  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jTj[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
218	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  i];  [CE]  array  required,  but  int  found  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jTj[k  +  i];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
219	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  cols[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
220	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
221	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
222	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
223	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
224	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
225	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
226	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	54	None	add
227	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
228	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
229	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
230	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  AssertionFailedError  	104	1	replace
232	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  AssertionFailedError  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  AssertionFailedError  	104	1	replace
233	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  min;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  min;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  min;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
234	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  max);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj,  max);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
235	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  max,  jTj);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  max,  jTj);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  max,  jTj);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
236	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  jTj);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  jTj);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj,  jTj);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
237	[BUG]  [BUGGY]  ((  EstimationProblem)jTj).setMeasurements(cols,  problem);  [CE]  inconvertible  types  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)jTj).setMeasurements(cols,  problem);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)jTj).setMeasurements(cols,  problem);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  inconvertible  types	117	None	replace
238	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum,  cols);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
239	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols,  max);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
240	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  columns,  max);  [CE]  cannot  find  symbol  columns  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  columns,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  columns,  max);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	136	None	replace
241	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  jTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[i][j]    =    k;    jTj[i][j]  =  k;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	1	add
242	[BUG]  [BUGGY]  jTj[i][j]  =  k;  jTj[i][j]  =  k;  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  jTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    jTj[i][j]  =  k;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	112	1	add
243	[BUG]  [BUGGY]  jTj[i][j]  =  k;  for(int  jTj[i][j]  =  k;  [CE]  ']'  expected  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  for(int  jTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    for(int  jTj[i][j]  =  k;	  	non-compiled	[CE]  ']'  expected	112	None	add
244	[BUG]  [BUGGY]  jTj[i][j]  =  k;  int  jTj[i][j]  =  k;  [CE]  ']'  expected  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  int  jTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    int  jTj[i][j]  =  k;	  	non-compiled	[CE]  ']'  expected	112	None	add
245	[BUG]  [BUGGY]  jTj[i][j]  =  k;  JTj[i][j]  =  k;  [CE]  cannot  find  symbol  JTj  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  JTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    JTj[i][j]  =  k;	  	non-compiled	[CE]  cannot  find  symbol  JTj	112	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[1  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  AssertionFailedError  	12	1	replace
247	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[1  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  AssertionFailedError  	12	1	replace
248	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jTj[1  +  k];	  sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
249	[BUG]  [BUGGY]  sum  +=  jtj[k  +  k]  *  jacobian;  [CE]  cannot  find  symbol  jtj  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[k  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[k  +  k]  *  jacobian;	  sum    +=    jtj[k    +    j]    *    jacobian;    	non-compiled	[CE]  cannot  find  symbol  jtj	139	None	replace
250	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  j]  *  jtj;  [CE]  cannot  find  symbol  jtj  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  j]  *  jtj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  j]  *  jtj;	  sum    +=    jtj[k    +    j]    *    jacobian;    	non-compiled	[CE]  cannot  find  symbol  jtj	139	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  j);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.pow(10,  j);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
252	[BUG]  [BUGGY]  sum  +=  Math.pow(10,  j);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  j);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.pow(10,  j);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
253	[BUG]  [BUGGY]  sum  +=  Math.pow(10,  jTj);  [CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  jTj);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.pow(10,  jTj);	          sum    +=    Math.pow(10,    k);    	non-compiled	[CE]  method  pow  in  class  Math  cannot  be  applied  to  given  types;	142	None	replace
254	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  k  -  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.pow(10,  k  -  1);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  EstimationException  	142	1	replace
255	[BUG]  [BUGGY]  sum  +=  Math.pow(10,  k  -  1);  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  k  -  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.pow(10,  k  -  1);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  EstimationException  	142	1	replace
256	[BUG]  [BUGGY]  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  Sum	89	None	replace
257	[BUG]  [BUGGY]  Sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  Sum	89	None	replace
258	[BUG]  [BUGGY]  Sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  Sum	89	None	replace
259	[BUG]  [BUGGY]  Sum  +=  jacobian[0]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  Sum	89	None	replace
260	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
261	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
262	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
263	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
264	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  remaining[j][j];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  remaining[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  remaining[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
265	[BUG]  [BUGGY]  jTj[i][j]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  Sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  Sum;	          jTj[i][j]    =    sum;    jTj[i][j]    =    Sum;    	non-compiled	[CE]  cannot  find  symbol  Sum	37	None	replace
266	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jTj[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jTj[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jTj[1  +  k];	  sum    +=    jTj[0]    *    jacobian[1    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
267	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[1  +  k];	  sum    +=    jTj[0]    *    jacobian[1    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
268	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jtj[1  +  k];  [CE]  cannot  find  symbol  jtj  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jtj[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jtj[1  +  k];	  sum    +=    jTj[0]    *    jacobian[1    +    i];    	non-compiled	[CE]  cannot  find  symbol  jtj	31	None	replace
269	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.getValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	175	None	replace
270	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.getValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	175	None	replace
271	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  sum  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    Math.max(sum,    k);    sum  +=  Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
272	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  sum  +=  Math.max(sum,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  sum  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    sum  +=  Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
273	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  Sum  +=  Math.max(sum,  k);  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  Sum  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    Sum  +=  Math.max(sum,  k);	  	non-compiled	[CE]  cannot  find  symbol  Sum	127	None	add
274	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  total  +=  Math.max(sum,  k);  [CE]  cannot  find  symbol  total  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  total  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    total  +=  Math.max(sum,  k);	  	non-compiled	[CE]  cannot  find  symbol  total	127	None	add
275	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  amount  +=  Math.max(sum,  k);  [CE]  cannot  find  symbol  amount  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  amount  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    amount  +=  Math.max(sum,  k);	  	non-compiled	[CE]  cannot  find  symbol  amount	127	None	add
276	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  sum  +=  Math.max(sum,  k);  }  [CE]  illegal  start  of  type  [FE]            EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  sum  +=  Math.max(sum,  k);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    sum  +=  Math.max(sum,  k);  }	  	non-compiled	[CE]  illegal  start  of  type	127	None	add
277	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  '.class'  expected	167	None	replace
278	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  '.class'  expected	167	None	replace
279	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                sum    +=    Math.pow(10,    k);    sum  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
280	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  sum  +=  Math.pow(10,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    sum  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
281	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  Sum  +=  Math.pow(10,  k);  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  Sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    Sum  +=  Math.pow(10,  k);	  	non-compiled	[CE]  cannot  find  symbol  Sum	141	None	add
282	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  k  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                sum    +=    Math.pow(10,    k);    k  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
283	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  k  +=  Math.pow(10,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  k  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    k  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
284	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  total  +=  Math.pow(10,  k);  [CE]  cannot  find  symbol  total  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  total  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    total  +=  Math.pow(10,  k);	  	non-compiled	[CE]  cannot  find  symbol  total	141	None	add
285	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                sum    +=    Math.pow(10,    k);    Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
286	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  Math.pow(10,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	141	1	add
287	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
288	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
289	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
290	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
291	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
292	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
293	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
294	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  total  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  total  [FE]            EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  total  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    total  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  total	11	None	add
295	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
296	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
297	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
298	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
299	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	101	None	add
300	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
301	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
302	[BUG]  [BUGGY]  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	95	None	replace
303	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  2;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
304	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
305	[BUG]  [BUGGY]  SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SumMetrics    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	97	None	replace
306	[BUG]  [BUGGY]  SumMetrics  residuals[0]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SumMetrics  residuals[0]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SumMetrics  residuals[0]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SumMetrics    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	97	None	replace
307	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  cols);  [CE]  no  suitable  method  found  for  max(double,double,double[],int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  sum,  jTj[i],  cols);	  jTj[i]    =    Math.max(sum,    sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[],int)	108	None	replace
308	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj,  sum);  [CE]  no  suitable  method  found  for  max(double,double[][],double)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj,  sum);	  jTj[i]    =    Math.max(sum,    sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[][],double)	108	None	replace
309	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[i][j].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
310	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
311	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
312	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
313	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
314	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	146	None	add
315	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
316	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
317	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
318	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  sum  +=  residuals[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    sum  +=  residuals[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	146	1	add
319	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[j  +  k];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	68	None	replace
320	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[i  +  k];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	68	None	replace
321	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  cols[k  +  k];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	68	None	replace
322	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  i,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  i,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  i,  cols);	  ((    EstimationProblem)problem).setMeasures(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
323	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  rows,  cols);	  ((    EstimationProblem)problem).setMeasures(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
324	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  cols);	  ((    EstimationProblem)problem).setMeasures(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
325	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
326	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length,  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
327	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
328	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[1  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[1  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jTj[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jTj[1    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	158	None	replace
329	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[1  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[1  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jTj[1    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	158	None	replace
330	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  cols,  max);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
331	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[1];    sum  +=  jacobian[0]  *  jacobian[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
332	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    sum  +=  jacobian[0]  *  jacobian[1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
333	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  Sum  +=  jacobian[0]  *  jacobian[1];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  Sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    Sum  +=  jacobian[0]  *  jacobian[1];	  	non-compiled	[CE]  cannot  find  symbol  Sum	29	None	add
334	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	29	None	add
335	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++k)  {  sum  +=  jacobian[0]  *  jacobian[1];  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++k)  {  sum  +=  jacobian[0]  *  jacobian[1];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    for(int  j  =  0;  j  <  cols;  ++k)  {  sum  +=  jacobian[0]  *  jacobian[1];  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	29	None	add
336	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];  [CE]  illegal  start  of  expression  [FE]            EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  jacobian[0]  *  jacobian[1];	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
337	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][k];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][k];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	196	None	replace
338	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][jTj];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][jTj];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][jTj];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	196	None	replace
339	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][0];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][0];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	196	None	replace
340	[BUG]  [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	18	None	replace
341	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	18	None	replace
342	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[j  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[j  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  jacobian[j  +  max];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
343	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  cols[K  +  k];  [CE]  cannot  find  symbol  K  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  cols[K  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  cols[K  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[K    +    k];    	non-compiled	[CE]  cannot  find  symbol  K	122	None	replace
344	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [CE]  cannot  find  symbol  K  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[K    +    k];    	non-compiled	[CE]  cannot  find  symbol  K	122	None	replace
345	[BUG]  [BUGGY]  sum  +=  residuals[0]  *  jTj[1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jTj[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0]  *  jTj[1];	  sum    +=    jacobian[0]    *    jtj[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
346	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
347	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  k,  rows);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  k,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  k,  rows);	  ((    EstimationProblem)problem).setMeasures(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
348	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[k    +    k];    sum  +=  jacobian[0]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
349	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    sum  +=  jacobian[0]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
350	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  Sum  +=  jacobian[0]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  Sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    Sum  +=  jacobian[0]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	49	None	add
351	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  total  +=  jacobian[0]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  total  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  total  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    total  +=  jacobian[0]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  total	49	None	add
352	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[0]  *  jacobian[K  +  k];  [CE]  cannot  find  symbol  K  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[0]  *  jacobian[K  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    sum  +=  jacobian[0]  *  jacobian[K  +  k];	  	non-compiled	[CE]  cannot  find  symbol  K	49	None	add
353	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[0];  sum  +=  jacobian[1  +  i]  *  jTj[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj[0];  sum  +=  jacobian[1  +  i]  *  jTj[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[0];  sum  +=  jacobian[1  +  i]  *  jTj[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	152	None	replace
354	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	152	1	replace
355	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	152	1	replace
356	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[j  +  max];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	48	None	replace
357	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[i  +  1];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	48	None	replace
358	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  k);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  k);	  ((    EstimationProblem)problem).setMeasurements(jTj);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
359	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  parameters);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  parameters);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  parameters);	  ((    EstimationProblem)problem).setMeasurements(jTj);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
360	[BUG]  [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	86	None	replace
361	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	86	None	replace
362	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
363	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
364	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	156	None	add
365	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
366	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
367	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  total  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  total  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  total  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    total  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  total	156	None	add
368	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
369	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	156	1	add
370	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  sum;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  jTj[j][j]  =  sum;  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[j][j]    =    sum;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	100	None	replace
371	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	191	None	replace
372	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
373	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
374	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jtj[k  +  k];  [CE]  cannot  find  symbol  jtj  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jtj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jtj[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  jtj	191	None	replace
375	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[j][j]  =  max;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
376	[BUG]  [BUGGY]  jTj[j][j]  =  max;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]  =  max;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
377	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][i]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[j][i]  =  sum;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
378	[BUG]  [BUGGY]  jTj[j][i]  =  sum;  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][i]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][i]  =  sum;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
379	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[k  +  i];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
380	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[jTj[i  +  k];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[jTj[i  +  k];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  ']'  expected	27	None	replace
381	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[i  +  k];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
382	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[i  +  k];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
383	[BUG]  [BUGGY]  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	94	None	replace
384	[BUG]  [BUGGY]  Sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  residuals[i  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	94	None	replace
385	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k.doubleValue());  [CE]  int  cannot  be  dereferenced  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  k.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    sum.doubleValue());    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
386	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  coefficients.doubleValue());  [CE]  cannot  find  symbol  coefficients  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  coefficients.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  coefficients.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  coefficients	184	None	replace
387	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals.doubleValue());  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max,  residuals.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
388	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[i  +  k];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
389	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[i  +  1];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
390	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jTj[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jTj[i  +  k];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
391	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[i  +  max];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
392	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  columns,  max);  [CE]  cannot  find  symbol  columns  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  columns,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  columns,  max);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	7	None	replace
393	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  cols,  rows);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  cols,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  cols,  rows);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
394	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  sum,  cols);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  sum,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  sum,  cols);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
395	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k));  [CE]  ';'  expected  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k));  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  k));	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
396	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length  -  1));  [CE]  ';'  expected  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length  -  1));  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj.length  -  1));	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
397	[BUG]  [BUGGY]  sum  +=  Math.min(sum,  jTj.length));  [CE]  ';'  expected  [FE]                  EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.min(sum,  jTj.length));  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.min(sum,  jTj.length));	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
398	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  cols  -  jTj.length));  [CE]  ';'  expected  [FE]                    EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  cols  -  jTj.length));  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  cols  -  jTj.length));	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
399	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	172	None	replace
400	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	172	None	replace
401	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
402	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	92	1	add
403	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	92	None	add
404	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	92	None	add
405	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
406	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  remainings[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  remainings  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  remainings[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  remainings[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  remainings	92	None	add
407	[BUG]  [BUGGY]  JTj[i][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  JTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	JTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    JTj[i][j]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  JTj	36	None	replace
408	[BUG]  [BUGGY]  SummaryMeasurement[]  residuals  =  problem.getRemainders();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummaryMeasurement[]  residuals  =  problem.getRemainders();  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummaryMeasurement[]  residuals  =  problem.getRemainders();	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryMeasurement[]    residuals    =    problem.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
409	[BUG]  [BUGGY]  Summeasurement[]  residuals  =  problem.getRemainders();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Summeasurement[]  residuals  =  problem.getRemainders();  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Summeasurement[]  residuals  =  problem.getRemainders();	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryMeasurement[]    residuals    =    problem.getRemainders();    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
410	[BUG]  [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	195	None	replace
411	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  k];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	195	None	replace
412	[BUG]  [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  k]  *  jacobian[k  +  i];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	195	None	replace
413	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  jTj[k  +  i];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	195	None	replace
414	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[i][j]    =    max;    jTj[i][j]  =  max;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	1	add
415	[BUG]  [BUGGY]  jTj[i][j]  =  max;  jTj[i][j]  =  max;  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    jTj[i][j]  =  max;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	110	1	add
416	[BUG]  [BUGGY]  jTj[i][j]  =  max;  for(int  jTj[i][j]  =  max;  [CE]  ']'  expected  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  for(int  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    for(int  jTj[i][j]  =  max;	  	non-compiled	[CE]  ']'  expected	110	None	add
417	[BUG]  [BUGGY]  jTj[i][j]  =  max;  int  jTj[i][j]  =  max;  [CE]  ']'  expected  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  int  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    int  jTj[i][j]  =  max;	  	non-compiled	[CE]  ']'  expected	110	None	add
418	[BUG]  [BUGGY]  jTj[i][j]  =  max;  jTj[i][j]  =  min;  [CE]  cannot  find  symbol  min  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  jTj[i][j]  =  min;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    jTj[i][j]  =  min;	  	non-compiled	[CE]  cannot  find  symbol  min	110	None	add
419	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][k]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
420	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][k]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][k]);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][k]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
421	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length  -  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  jTj.length  -  1);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
422	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length  -  1);  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length  -  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj.length  -  1);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
423	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.min(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.min(sum,  jTj.length);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
424	[BUG]  [BUGGY]  sum  +=  Math.min(sum,  jTj.length);  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.min(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.min(sum,  jTj.length);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
425	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  /  2);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  /  2);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.doubleValue()  /  2);	  double    jTj    =    Math.max(sum,    sum.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	58	None	replace
426	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  -  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  -  1);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.doubleValue()  -  1);	  double    jTj    =    Math.max(sum,    sum.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	58	None	replace
427	[BUG]  [BUGGY]  double  jTj  =  Math.min(sum,  sum.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.min(sum,  sum.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.min(sum,  sum.doubleValue());	  double    jTj    =    Math.max(sum,    sum.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	58	None	replace
428	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  /  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue()  /  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.doubleValue()  /  cols);	  double    jTj    =    Math.max(sum,    sum.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	58	None	replace
429	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  max);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  max);	  ((    EstimationProblem)problem).setMeasurements(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
430	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  k);	  ((    EstimationProblem)problem).setMeasurements(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
431	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  rows);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj,  rows);	  ((    EstimationProblem)problem).setMeasurements(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
432	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  jTj.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  jTj.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  jTj.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
433	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj.length,  residuals.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj.length,  residuals.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj.length,  residuals.length);	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
434	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj.length,  residuals.length.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj.length,  residuals.length.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj.length,  residuals.length.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
435	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj.doubleValue(),  residuals.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj.doubleValue(),  residuals.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj.doubleValue(),  residuals.length);	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
436	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[j  +  k];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[j  +  k];	  sum    +=    jacobian[i    +    k]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	25	None	replace
437	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[k  +  i];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  cols[k  +  i];	  sum    +=    jacobian[i    +    k]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	25	None	replace
438	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[k  +  j];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	25	None	replace
439	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.length,  max);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.length,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.length,  max);	  double    jTj    =    Math.max(sum,    sum.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	166	None	replace
440	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.length,  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.length,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.length,  cols);	  double    jTj    =    Math.max(sum,    sum.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	166	None	replace
441	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  jTj,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
442	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols,  max);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
443	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	1	add
444	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	1	add
445	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	190	None	add
446	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  total  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  total  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  total  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    total  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  total	190	None	add
447	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  double  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  double  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    double  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	190	None	add
448	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
449	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k,  rows);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  k,  rows);	  ((    EstimationProblem)problem).setMeasurements(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
450	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[j  +  i];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[j  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[j  +  i];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
451	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[j  +  i];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[j  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  cols[j  +  i];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
452	[BUG]  [BUGGY]  sum  +=  cols[j  +  i]  *  jacobian[i  +  k];  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  i]  *  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  i]  *  jacobian[i  +  k];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
453	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  max);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
454	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  sum);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols,  sum);	  ((    EstimationProblem)problem).setMeasurements(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
455	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  max,  jTj,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
456	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
457	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
458	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	56	None	add
459	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
460	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
461	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
462	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  i];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
463	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
464	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
465	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][j]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	43	None	replace
466	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][j]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	43	None	replace
467	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][j]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	43	None	replace
468	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  residuals[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  residuals[k  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  residuals[k  +  k];	  sum    +=    residuals[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
469	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj[k  +  i];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jTj[k  +  i];	  sum    +=    residuals[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
470	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  residuals[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  residuals[k  +  j];	  sum    +=    residuals[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
471	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  max);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  max);	  double    jTj    =    Math.max(sum,    sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
472	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  max,  jTj.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  max,  jTj.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  max,  jTj.length);	  double    jTj    =    Math.max(sum,    sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
473	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[0  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian[0  +  j];	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
474	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[0];	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
475	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jTj[0];	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
476	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj;	  sum    +=    jacobian[k    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	66	None	replace
477	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jTj;  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jTj;	  sum    +=    jacobian[k    +    k]    *    jTj;    	non-compiled	[CE]  array  required,  but  int  found	66	None	replace
478	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
479	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
480	[BUG]  [BUGGY]  sum  +=  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  k];	  sum    +=    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
481	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
482	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
483	[BUG]  [BUGGY]  sum  +=  residuals[jTj  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[jTj  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[jTj  +  k]  *  jTj;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	138	None	replace
484	[BUG]  [BUGGY]  sum  +=  jTj[k  +  k]  *  residuals;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  k]  *  residuals;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  k]  *  residuals;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	138	None	replace
485	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj.length;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[k  +  j]  *  jTj.length;	  sum    +=    residuals[k    +    j]    *    jTj;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	1	replace
486	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj.length;  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj.length;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jTj.length;	  sum    +=    residuals[k    +    j]    *    jTj;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	138	1	replace
487	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj,  max;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj,  max;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jTj,  max;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  ';'  expected	138	None	replace
488	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  i]  *  jacobian[0  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	replace
489	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jacobian[0  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	57	1	replace
490	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  cols,  max);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  k,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    cols,    max);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
491	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max,  cols);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  max,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    cols,    max);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
492	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  cols,  sum,  max);  [CE]  cannot  find  symbol  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  cols,  sum,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  cols,  sum,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    cols,    max);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
493	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  Math.sqrt(jTj,  jacobian);  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  Math.sqrt(jTj,  jacobian);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  Math.sqrt(jTj,  jacobian);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  array  required,  but  int  found	194	None	replace
494	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols,  max);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols,  max);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols,  max);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	194	None	replace
495	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  Math.sqrt(jacobian,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  Math.sqrt(jacobian,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  Math.sqrt(jacobian,  cols);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	194	None	replace
496	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  jTj,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  jTj,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  jTj,  cols);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	194	None	replace
497	[BUG]  [BUGGY]  Sum  +=  cols[k  +  j]  *  jacobian[k  +  i];  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[k  +  j]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[k  +  j]  *  jacobian[k  +  i];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
498	[BUG]  [BUGGY]  Sum  +=  cols[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[j  +  i]  *  jacobian[k  +  k];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
499	[BUG]  [BUGGY]  Sum  +=  cols[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[i  +  k]  *  jacobian[k  +  j];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
500	[BUG]  [BUGGY]  Sum  +=  cols[k  +  i]  *  sum[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[k  +  i]  *  sum[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[k  +  i]  *  sum[k  +  j];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
501	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian;	  sum    +=    jTj[k    +    k]    *    jacobian;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	40	None	replace
502	[BUG]  [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	3	None	replace
503	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	final  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	3	None	replace
504	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  k];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  k];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	46	None	replace
505	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[j  +  k];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	46	None	replace
506	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[k    +    k];    sum  +=  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	1	add
507	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  sum  +=  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    sum  +=  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	64	1	add
508	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  Sum  +=  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  Sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    Sum  +=  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	64	None	add
509	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  double  k  +=  jacobian[k  +  k];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  double  k  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    double  k  +=  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	64	None	add
510	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  SumMetrics  sum  +=  jacobian[k  +  k];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  SumMetrics  sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    SumMetrics  sum  +=  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	64	None	add
511	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  total  +=  jacobian[k  +  k];  [CE]  cannot  find  symbol  total  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  total  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    total  +=  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  total	64	None	add
512	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  remaining[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  remaining[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  remaining[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
513	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
514	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  jacobian[j][j];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  jacobian[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  jacobian[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
515	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  k);  [CE]  no  suitable  method  found  for  max(double,double,double[],int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i],  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  sum,  jTj[i],  k);	  jTj[i]    =    Math.max(sum,    jTj[i],    sum);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[],int)	109	None	replace
516	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  j];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k]  *  jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jTj[k  +  j];	  sum    +=    cols[k    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	71	None	replace
517	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  k]  *  cols[k  +  k];	  sum    +=    cols[k    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	71	None	replace
518	[BUG]  [BUGGY]  SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRelatives    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	169	None	replace
519	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jTj[k  +  i];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  j]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jTj[k  +  i];	  sum    +=    cols[k    +    j]    *    jacobian[k    +    i];    	non-compiled	[CE]  array  required,  but  int  found	164	None	replace
520	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jtj[k  +  i];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  j]  *  jtj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jtj[k  +  i];	  sum    +=    cols[k    +    j]    *    jacobian[k    +    i];    	non-compiled	[CE]  array  required,  but  int  found	164	None	replace
521	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	add
522	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	87	1	add
523	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[	  	non-compiled	[CE]  ']'  expected	87	None	add
524	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	87	None	add
525	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  k]  *  jacobian[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
526	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  k]  *  jacobian[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	55	1	replace
527	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[0  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
528	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k,  cols);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  k,  cols);	  jTj[i]    =    Math.max(sum,    jTj[i],    k);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	148	None	replace
529	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k,  max);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  k,  max);	  jTj[i]    =    Math.max(sum,    jTj[i],    k);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	148	None	replace
530	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k  +  1);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k  +  1);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  k  +  1);	  jTj[i]    =    Math.max(sum,    jTj[i],    k);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	148	None	replace
531	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    j]    *    jTj[1    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	177	None	replace
532	[BUG]  [BUGGY]  sum  +=  jTj[0  +  j]  *  jacobian[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  j]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  j]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    j]    *    jTj[1    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	177	None	replace
533	[BUG]  [BUGGY]  sum  +=  cols[0]  *  jTj[1  +  j];  [CE]  array  required,  but  int  found  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[0]  *  jTj[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[0]  *  jTj[1  +  j];	  sum    +=    jacobian[0    +    j]    *    jTj[1    +    i];    	non-compiled	[CE]  array  required,  but  int  found	177	None	replace
534	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  k);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  k);	  double    jTj    =    Math.max(sum,    max);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
535	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj);	  double    jTj    =    Math.max(sum,    max);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
536	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  max);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj,  max);	  double    jTj    =    Math.max(sum,    max);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
537	[BUG]  [BUGGY]  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	21	None	replace
538	[BUG]  [BUGGY]  Sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	21	None	replace
539	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }	          jTj[i][j]    =    sum;    for(int    j    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum;    }    	non-compiled	[CE]  ']'  expected	180	None	replace
540	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  max;  }  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  max;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  max;  }	          jTj[i][j]    =    sum;    for(int    j    =    0;    j    <    cols;    ++j)    {    double    jTj[i][j]    =    sum;    }    	non-compiled	[CE]  ']'  expected	180	None	replace
541	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  0;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  jTj[i][j]  =  0;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  jTj[i][j]  =  0;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	35	None	replace
542	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  k;  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  jTj[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  jTj[i][j]  =  k;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	35	None	replace
543	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  jTj[i][j]  =  sum;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	35	None	replace
544	[BUG]  [BUGGY]  for(int  jTj[i][j]  =  max;  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  jTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  jTj[i][j]  =  max;	          jTj[i][j]    =    sum;    for(int    jTj[i][j]    =    sum;    	non-compiled	[CE]  ']'  expected	35	None	replace
545	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	150	None	replace
546	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
547	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
548	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
549	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
550	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	151	None	add
551	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
552	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
553	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	1	add
554	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	61	1	add
555	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    SummaryRestriction  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	non-compiled	[CE]  ';'  expected	61	None	add
556	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  Sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  Sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    Sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	61	None	add
557	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    SummaryRestriction  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
558	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  k;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
559	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
560	[BUG]  [BUGGY]  sum  +=  jTj[jTj  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[jTj  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[jTj  +  k]  *  jacobian;	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
561	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jSquare;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jSquare;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  jSquare;	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
562	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  max;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  max;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  max;	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
563	[BUG]  [BUGGY]  SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction    sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ';'  expected	96	None	replace
564	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[j  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jacobian[j  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[j    +    k];    	non-compiled	[CE]  array  required,  but  int  found	70	None	replace
565	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jacobian[j  +  max];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k]  *  jacobian[j  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jacobian[j  +  max];	  sum    +=    cols[k    +    i]    *    jacobian[j    +    k];    	non-compiled	[CE]  array  required,  but  int  found	70	None	replace
566	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length,  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
567	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  max);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  max);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  max);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
568	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
569	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
570	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
571	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
572	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	add
573	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	add
574	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[j  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[j  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[j  +  max];	  sum    +=    jacobian[i    +    k]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	24	None	replace
575	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[k  +  k];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	67	None	replace
576	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  jTj;	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	67	None	replace
577	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }	          jTj[i][j]    =    sum;    for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[i][j]    =    sum;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	181	None	replace
578	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  max;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  max;  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  max;  }	          jTj[i][j]    =    sum;    for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[i][j]    =    sum;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	181	None	replace
579	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
580	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
581	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  Sum  +=  jacobian[0]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  Sum  +=  jacobian[0]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0    +    j];    Sum  +=  jacobian[0]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	120	None	add
582	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
583	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
584	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[1]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
585	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[1]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
586	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jacobian[0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0]  *  jacobian[0];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
587	[BUG]  [BUGGY]  sum  +=  residuals[0]  *  jacobian[0];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jacobian[0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0]  *  jacobian[0];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
588	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  residuals[0];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
589	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  residuals[0];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
590	[BUG]  [BUGGY]  sum  +=  residuals[0]  *  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jTj[0];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0]  *  jTj[0];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	147	None	replace
591	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jacobian[1];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0]  *  jacobian[1];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
592	[BUG]  [BUGGY]  sum  +=  residuals[0]  *  jacobian[1];  [FE]  EstimationException  [FE]          EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0]  *  jacobian[1];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0]  *  jacobian[1];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
593	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[j  +  i];	  sum    +=    jacobian[j    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	80	None	replace
594	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  cols[k  +  k];	  sum    +=    jacobian[0]    *    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
595	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1]  *  jacobian[k  +  k];	  sum    +=    jacobian[0]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
596	[BUG]  [BUGGY]  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1]  *  jacobian[k  +  k];	  sum    +=    jacobian[0]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
597	[BUG]  [BUGGY]  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SumMetrics    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	154	None	replace
598	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[i  +  k];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[i  +  k];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[i  +  k];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SumMetrics    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	154	None	replace
599	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[j  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[j  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  cols[j  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SumMetrics    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	154	None	replace
600	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SumMetrics    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	154	None	replace
601	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  sum.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  jTj,  sum.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jTj,  sum.length);	  double    jTj    =    Math.max(sum,    sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
602	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  parameters.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  parameters.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  parameters.length);	  double    jTj    =    Math.max(sum,    sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
603	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  variables.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum,  variables.length);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  variables.length);	  double    jTj    =    Math.max(sum,    sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	83	None	replace
604	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k,  max);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  k,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  k,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    cols,    max);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
605	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  i);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  i);	  ((    EstimationProblem)problem).setMeasurements(jTj);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
606	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(values);  [CE]  cannot  find  symbol  values  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(values);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(values);	  ((    EstimationProblem)problem).setMeasurements(rows);    	non-compiled	[CE]  cannot  find  symbol  values	140	None	replace
607	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  k);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols,  k);	  jTj[i]    =    Math.max(sum,    jTj[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	107	None	replace
608	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  j]  *  jTj[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jTj[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	176	None	replace
609	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  j]  *  jTj[1  +  max];	  sum    +=    jacobian[0    +    i]    *    jTj[1    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	158	None	replace
610	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
611	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
612	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
613	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
614	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
615	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
616	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
617	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
618	[BUG]  [BUGGY]  jTj[i][j]  =  max;  JTj[i][j]  =  max;  [CE]  cannot  find  symbol  JTj  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  JTj[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    JTj[i][j]  =  max;	  	non-compiled	[CE]  cannot  find  symbol  JTj	110	None	add
619	[BUG]  [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  cannot  find  symbol  Sum	89	None	replace
620	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][i]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][i]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
621	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][i]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][i]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][i]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][i]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	44	None	replace
622	[BUG]  [BUGGY]  sum  +=  residuals[k  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  k]  *  jTj;	  sum    +=    jacobian[k    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	66	None	replace
623	[BUG]  [BUGGY]  sum  +=  residuals[jTj  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[jTj  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[jTj  +  k]  *  jacobian;	  sum    +=    jacobian[k    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	66	None	replace
624	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length)+  1);  [CE]  ';'  expected  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length)+  1);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj.length)+  1);	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
625	[BUG]  [BUGGY]  sum  +=  Math.max(result,  jTj.length));  [CE]  ';'  expected  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(result,  jTj.length));  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(result,  jTj.length));	  sum    +=    Math.max(sum,    jTj.length));    	non-compiled	[CE]  ';'  expected	129	None	replace
626	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	18	None	replace
627	[BUG]  [BUGGY]  int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	18	None	replace
628	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  max);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  max);	  ((    EstimationProblem)problem).setMeasures(rows,    max);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
629	[BUG]  [BUGGY]  jTj[i]  =  Math.max(results,  jTj[i],  sum);  [CE]  cannot  find  symbol  results  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(results,  jTj[i],  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(results,  jTj[i],  sum);	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals);    	non-compiled	[CE]  cannot  find  symbol  results	149	None	replace
630	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  '.class'  expected	167	None	replace
631	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  JTj[j][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  JTj[j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    JTj[j][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  JTj	98	None	add
632	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  rows);	  ((    EstimationProblem)problem).setMeasurements(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
633	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  jTj,  cols);	  ((    EstimationProblem)problem).setMeasurements(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
634	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  cols,  max);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
635	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    max;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
636	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.min(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.min(sum,  k);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
637	[BUG]  [BUGGY]  sum  +=  Math.min(sum,  k);  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.min(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.min(sum,  k);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
638	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[j  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jTj[j  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[j    +    k];    	non-compiled	[CE]  array  required,  but  int  found	70	None	replace
639	[BUG]  [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[k  +  i];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  k]  *  jacobian[k  +  i];	  sum    +=    cols[k    +    i]    *    jacobian[j    +    k];    	non-compiled	[CE]  array  required,  but  int  found	70	None	replace
640	[BUG]  [BUGGY]  sum  +=  jTj  *  jacobian[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj  *  jacobian[0  +  k];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	121	None	replace
641	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1]  *  jacobian[0  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	121	1	replace
642	[BUG]  [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1]  *  jacobian[0  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	121	1	replace
643	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum);	  double    jTj    =    Math.max(sum,    max);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	81	None	replace
644	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
645	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
646	[BUG]  [BUGGY]  sum  +=  residuals[i  +  j]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  j]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  j]  *  jTj;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	138	None	replace
647	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj.doubleValue();  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jTj.doubleValue();	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
648	[BUG]  [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  k]  *  jTj;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	138	None	replace
649	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	3	None	replace
650	[BUG]  [BUGGY]  int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	3	None	replace
651	[BUG]  [BUGGY]  sum  +=  residuals[j  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[j  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[j  +  k]  *  jTj;	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	39	None	replace
652	[BUG]  [BUGGY]  sum  +=  jtj[j  +  k]  *  jacobian;  [CE]  cannot  find  symbol  jtj  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[j  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[j  +  k]  *  jacobian;	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  cannot  find  symbol  jtj	39	None	replace
653	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj.doubleValue();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj.doubleValue();  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj.doubleValue();	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
654	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SummaryMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SummaryMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    SummaryMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  ']'  expected	105	None	add
655	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SumMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SumMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    SumMeasurement  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  ']'  expected	105	None	add
656	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
657	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	1	add
658	[BUG]  [BUGGY]  sum  +=  jtj[i  +  k]  *  jacobian[i  +  k];  [CE]  cannot  find  symbol  jtj  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[i  +  k]  *  jacobian[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[i  +  k]  *  jacobian[i  +  k];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	119	None	replace
659	[BUG]  [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj[i  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  k]  *  jTj[i  +  j];	  sum    +=    jacobian[i    +    k]    *    jTj[i    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	119	None	replace
660	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj[k  +  k];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[jTj[k  +  k];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    k];    	non-compiled	[CE]  ']'  expected	46	None	replace
661	[BUG]  [BUGGY]  jTj[i][j]  =  result;  [CE]  cannot  find  symbol  result  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  result;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  result;	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  cannot  find  symbol  result	114	None	replace
662	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
663	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0    +    j];    sum  +=  jacobian[0]  *  jacobian[0  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	120	1	add
664	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  jTj  =  Math.max(sum,  jTj.length);  [CE]  incompatible  types  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  jTj  =  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    jTj  =  Math.max(sum,  jTj.length);	  	non-compiled	[CE]  incompatible  types	124	None	add
665	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    Math.max(sum,    jTj.length);    Math.max(sum,  jTj.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	add
666	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  Math.max(sum,  jTj.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  Math.max(sum,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    jTj.length);    Math.max(sum,  jTj.length);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	124	1	add
667	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian[0  +  k];	  sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	144	None	replace
668	[BUG]  [BUGGY]  double  jTj  =  Math.max(result,  i.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(result,  i.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(result,  i.doubleValue());	  double    jTj    =    Math.max(sum,    i.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	187	None	replace
669	[BUG]  [BUGGY]  double  jTj  =  Math.min(sum,  residuals.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.min(sum,  residuals.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.min(sum,  residuals.doubleValue());	  double    jTj    =    Math.max(sum,    i.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	187	None	replace
670	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummaryRestriction  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  ']'  expected  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummaryRestriction  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    SummaryRestriction  residuals[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  ']'  expected	146	None	add
671	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummarySquare  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  ']'  expected  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummarySquare  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    SummarySquare  residuals[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  ']'  expected	146	None	add
672	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummaryRelatives  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  ']'  expected  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  SummaryRelatives  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    SummaryRelatives  residuals[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  ']'  expected	146	None	add
673	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[k  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
674	[BUG]  [BUGGY]  sum  +=  residuals[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  k];	  sum    +=    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	1	replace
675	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  k;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  k;	  sum    +=    jacobian[0]    *    jacobian[0];    	compilable	  [FE]  EstimationException  	14	1	replace
676	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  k;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  k;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  k;	  sum    +=    jacobian[0]    *    jacobian[0];    	compilable	  [FE]  EstimationException  	14	1	replace
677	[BUG]  [BUGGY]  sum  +=  jTj[1  +  i]  *  jacobian[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[1  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[1  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
678	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  jTj,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
679	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	92	None	add
680	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[K  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  K  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[K  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[K  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  K	92	None	add
681	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[K  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  K  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[K  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[K  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  K	92	None	add
682	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
683	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	104	1	replace
684	[BUG]  [BUGGY]  double  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ';'  expected	153	None	replace
685	[BUG]  [BUGGY]  double  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  ';'  expected	153	None	replace
686	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SummaryMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SummaryMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    SummaryMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  ']'  expected	151	None	add
687	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SumMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  SumMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    SumMeasurement  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  ']'  expected	151	None	add
688	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
689	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[2  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
690	[BUG]  [BUGGY]  sum  +=  residuals[i  +  k]  *  Math.sqrt(jTj,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  Math.sqrt(jTj,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  k]  *  Math.sqrt(jTj,  cols);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	194	None	replace
691	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jcobian[1  +  k];  [CE]  cannot  find  symbol  jcobian  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jcobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jcobian[1  +  k];	  sum    +=    jTj[0]    *    jacobian[1    +    i];    	non-compiled	[CE]  cannot  find  symbol  jcobian	31	None	replace
692	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	160	1	replace
693	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	160	1	replace
694	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[0][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[0][j]  =  sum;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
695	[BUG]  [BUGGY]  jTj[0][j]  =  sum;  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[0][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[0][j]  =  sum;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
696	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  i;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[j][j]  =  i;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
697	[BUG]  [BUGGY]  jTj[j][j]  =  i;  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  i;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]  =  i;	  jTj[j][j]    =    sum;    	compilable	  [FE]  EstimationException  	99	1	replace
698	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  jTj,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
699	[BUG]  [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  k]  *  jTj[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jtj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	193	None	replace
700	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jtj[i  +  j];  [CE]  cannot  find  symbol  jtj  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jtj[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jtj[i  +  j];	  sum    +=    jacobian[i    +    k]    *    jtj[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	193	None	replace
701	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0][j].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
702	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
703	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
704	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
705	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	54	1	add
706	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
707	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [CE]  '.class'  expected  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.getValue());    }    	non-compiled	[CE]  '.class'  expected	175	None	replace
708	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryMeasurement  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryMeasurement  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    SummaryMeasurement  jacobian[k  +  i]  *  residuals[k  +  j];	  	non-compiled	[CE]  ']'  expected	61	None	add
709	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  residuals[K  +  j];  [CE]  cannot  find  symbol  K  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  residuals[K  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    sum  +=  jacobian[k  +  i]  *  residuals[K  +  j];	  	non-compiled	[CE]  cannot  find  symbol  K	61	None	add
710	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  criterion  =  calculateSquareRestriction(jTj,  cols);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummaryRestriction  criterion  =  calculateSquareRestriction(jTj,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    SummaryRestriction  criterion  =  calculateSquareRestriction(jTj,  cols);	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
711	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  k  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    Math.max(sum,    k);    k  +=  Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
712	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  k  +=  Math.max(sum,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  k  +=  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    k  +=  Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
713	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    Math.max(sum,    k);    Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
714	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  Math.max(sum,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  k);  Math.max(sum,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    Math.max(sum,    k);    Math.max(sum,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	127	1	add
715	[BUG]  [BUGGY]  sum  +=  jtj[0]  *  jacobian[0];  [CE]  cannot  find  symbol  jtj  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[0]  *  jacobian[0];	  sum    +=    jacobian[0]    *    jtj[0];    	non-compiled	[CE]  cannot  find  symbol  jtj	15	None	replace
716	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  0;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[i][j]  =  0;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	34	1	replace
717	[BUG]  [BUGGY]  jTj[i][j]  =  0;  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  0;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  0;	          jTj[i][j]    =    sum;    jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	34	1	replace
718	[BUG]  [BUGGY]  double  jTj  =  Math.max(results.doubleValue(),  k);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(results.doubleValue(),  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(results.doubleValue(),  k);	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
719	[BUG]  [BUGGY]  double  jTj  =  Math.max(results.doubleValue(),  sum);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(results.doubleValue(),  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(results.doubleValue(),  sum);	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
720	[BUG]  [BUGGY]  jTj[i][j]  =  value;  [CE]  cannot  find  symbol  value  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  value;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  value;	  jTj[i][j]    =    max;    	non-compiled	[CE]  cannot  find  symbol  value	111	None	replace
721	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  parameters);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  parameters);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj,  parameters);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
722	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  i);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj,  i);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
723	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  residuals);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj,  residuals);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj,  residuals);	  ((    EstimationProblem)problem).setMeasurements(cols,    jTj);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
724	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  SumMetrics  criterion  =  parameters.getValue(i,  jTj);  sum  +=  jacobian[k  +  k];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  SumMetrics  criterion  =  parameters.getValue(i,  jTj);  sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    SumMetrics  criterion  =  parameters.getValue(i,  jTj);  sum  +=  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
725	[BUG]  [BUGGY]  sum  +=  cols[i  +  j]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  j]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  j]  *  jacobian[k  +  k];	  sum    +=    cols[k    +    j]    *    jacobian[k    +    i];    	non-compiled	[CE]  array  required,  but  int  found	164	None	replace
726	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  j]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  j]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  j]  *  cols[k  +  k];	  sum    +=    cols[k    +    j]    *    jacobian[k    +    i];    	non-compiled	[CE]  array  required,  but  int  found	164	None	replace
727	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[i  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
728	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[i  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[i  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
729	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
730	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
731	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(cols,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(cols,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(cols,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
732	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.min(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	45	None	replace
733	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SummarySquare  sum  =  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SummarySquare  sum  =  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SummarySquare  sum  =  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
734	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SummaryMeasurement  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SummaryMeasurement  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SummaryMeasurement  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	19	None	add
735	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  Jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Jacobian  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  Jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  Jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Jacobian	19	None	add
736	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jTj;	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
737	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  i,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  i,  rows,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  i,  rows,  cols);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
738	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  i,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  i,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  i,  cols);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
739	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  columns,  k);  [CE]  cannot  find  symbol  columns  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  columns,  k);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  columns,  k);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	136	None	replace
740	[BUG]  [BUGGY]  sum  +=  jtj[0]  *  jacobian[1];  [CE]  cannot  find  symbol  jtj  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[0]  *  jacobian[1];	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  cannot  find  symbol  jtj	28	None	replace
741	[BUG]  [BUGGY]  jTj[i]  =  value;  [CE]  cannot  find  symbol  value  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  value;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  value;	  jTj[i]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  value	126	None	replace
742	[BUG]  [BUGGY]  jTj[i]  =  cost;  [CE]  incompatible  types  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  cost;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  cost;	  jTj[i]    =    sum;    	non-compiled	[CE]  incompatible  types	126	None	replace
743	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[3  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[3  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
744	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[3  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[3  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[3  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	188	1	add
745	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj,  jTj[i]);  [CE]  no  suitable  method  found  for  max(double,double[][],double[])  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj,  jTj[i]);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj,  jTj[i]);	  jTj[i]    =    Math.max(sum,    sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[][],double[])	108	None	replace
746	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  residuals,  jTj[i]);  [CE]  no  suitable  method  found  for  max(double,double[],double[])  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  residuals,  jTj[i]);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  residuals,  jTj[i]);	  jTj[i]    =    Math.max(sum,    sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double[])	108	None	replace
747	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][j]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][j]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	43	None	replace
748	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj[j][j]);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][j]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	43	None	replace
749	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  cols[0  +  k];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  cols[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  cols[0  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
750	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  cols[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
751	[BUG]  [BUGGY]  sum  +=  chiSquare[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  chiSquare  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  chiSquare[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  chiSquare[k  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  chiSquare	170	None	replace
752	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  total  +=  jacobian[0]  *  jacobian[1];  [CE]  cannot  find  symbol  total  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  total  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    total  +=  jacobian[0]  *  jacobian[1];	  	non-compiled	[CE]  cannot  find  symbol  total	29	None	add
753	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  jTj  +=  jacobian[0]  *  jacobian[1];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  jTj  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    jTj  +=  jacobian[0]  *  jacobian[1];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	29	None	add
754	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[2];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[1];    sum  +=  jacobian[0]  *  jacobian[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
755	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  sum  +=  jacobian[0]  *  jacobian[2];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    sum  +=  jacobian[0]  *  jacobian[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
756	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  0,  cols);  [CE]  no  suitable  method  found  for  max(double,double[],int,int)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  0,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  0,  cols);	  jTj[i]    =    Math.max(sum,    jTj[i],    max);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int,int)	9	None	replace
757	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
758	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  k]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	143	1	add
759	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    k]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	143	None	add
760	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  jacobian[k  +  max];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	192	None	replace
761	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[k  +  j];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	1	replace
762	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  j];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	192	1	replace
763	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[i  +  j];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[i  +  j];	  sum    +=    cols[k    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	71	None	replace
764	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[i  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[i  +  max];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	48	None	replace
765	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[jTj[i  +  k];  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[jTj[i  +  k];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    i];    	non-compiled	[CE]  ']'  expected	48	None	replace
766	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  i;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  For(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  '.class'  expected	123	None	replace
767	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  total)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
768	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	103	None	replace
769	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[i  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[i  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[i  +  max];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	133	None	replace
770	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  cols  +  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  cols  +  1);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  cols  +  1);	  double    jTj    =    Math.max(sum,    cols);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	197	None	replace
771	[BUG]  [BUGGY]  double  jTj  =  Math.min(sum,  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.min(sum,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.min(sum,  cols);	  double    jTj    =    Math.max(sum,    cols);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	197	None	replace
772	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  SummarySquare  sum  =  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  SummarySquare  sum  =  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    SummarySquare  sum  =  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
773	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [CE]  cannot  find  symbol  K  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];	  	non-compiled	[CE]  cannot  find  symbol  K	87	None	add
774	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	152	1	replace
775	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	152	1	replace
776	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	152	None	replace
777	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	152	None	replace
778	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  rows);	  ((    EstimationProblem)problem).setMeasures(cols,    rows);    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
779	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  parameters.doubleValue());  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  parameters.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  parameters.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals.doubleValue());    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
780	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[k  +  j];  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  i]  *  jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jTj[k  +  j];	  sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	163	None	replace
781	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.max(sum,  jTj[i][k]);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][k]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
782	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.length  -  1);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  sum.length  -  1);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.length  -  1);	  double    jTj    =    Math.max(sum,    sum.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	166	None	replace
783	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[0  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
784	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
785	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
786	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
787	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[2  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	159	1	add
788	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  double  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  double  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    double  sum  +=  jacobian[0]  *  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	49	None	add
789	[BUG]  [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	86	None	replace
790	[BUG]  [BUGGY]  Integer  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Integer  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Integer  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	86	None	replace
791	[BUG]  [BUGGY]  sum  +=  jtj[i  +  k]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  jtj  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[i  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[i  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[i    +    k]    *    jTj[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	24	None	replace
792	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	53	None	replace
793	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  j]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jacobian;	  sum    +=    jtj[k    +    j]    *    jacobian;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
794	[BUG]  [BUGGY]  sum  +=  jtj[k  +  i]  *  jacobian;  [CE]  cannot  find  symbol  jtj  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[k  +  i]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[k  +  i]  *  jacobian;	  sum    +=    jtj[k    +    j]    *    jacobian;    	non-compiled	[CE]  cannot  find  symbol  jtj	139	None	replace
795	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	21	None	replace
796	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	21	None	replace
797	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	150	None	replace
798	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  cols,  max);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  cols,  max);	  ((    EstimationProblem)problem).setMeasures(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
799	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
800	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian;	  sum    +=    jTj[k    +    k]    *    jacobian;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	40	None	replace
801	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[0  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jTj[0  +  k];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	189	None	replace
802	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[0  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jTj[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jTj[0  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	189	None	replace
803	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
804	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(resoning[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
805	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getAllParameters();  sum  +=  Math.pow(10,  k);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getAllParameters();  sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    SummaryMeasurement[]  residuals  =  problem.getAllParameters();  sum  +=  Math.pow(10,  k);	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
806	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getRealMeasurements();  sum  +=  Math.pow(10,  k);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getRealMeasurements();  sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    SummaryMeasurement[]  residuals  =  problem.getRealMeasurements();  sum  +=  Math.pow(10,  k);	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
807	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getRowMeasurements();  sum  +=  Math.pow(10,  k);  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  SummaryMeasurement[]  residuals  =  problem.getRowMeasurements();  sum  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    SummaryMeasurement[]  residuals  =  problem.getRowMeasurements();  sum  +=  Math.pow(10,  k);	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
808	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
809	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
810	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
811	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[1        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	101	1	add
812	[BUG]  [BUGGY]  sum  +=  residuals[k  +  i]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[k  +  i]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  i]  *  jTj[k  +  k];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	195	None	replace
813	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
814	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  k,  cols);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  k,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
815	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[j  +  k];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  cols[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  cols[j  +  k];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
816	[BUG]  [BUGGY]  sum  +=  columns[i  +  k]  *  cols[j  +  k];  [CE]  cannot  find  symbol  columns  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  columns[i  +  k]  *  cols[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  columns[i  +  k]  *  cols[j  +  k];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  cannot  find  symbol  columns	26	None	replace
817	[BUG]  [BUGGY]  SumMetrics  residuals[0  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SumMetrics  residuals[0  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SumMetrics  residuals[0  +  i]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SumMetrics    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ']'  expected	97	None	replace
818	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[0  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
819	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[0  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
820	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  i]  *  jacobian[j  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
821	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[j  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jacobian[j  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
822	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.min(sum,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	172	None	replace
823	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [CE]  '.class'  expected  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.doubleValue());    }    	non-compiled	[CE]  '.class'  expected	174	None	replace
824	[BUG]  [BUGGY]  sum  +=  residuals[j  +  i]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[j  +  i]  *  jTj[k  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[j  +  i]  *  jTj[k  +  k];	  sum    +=    residuals[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
825	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  parameters,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  parameters,  rows,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  parameters,  rows,  cols);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
826	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  i,  cols);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  i,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  i,  cols);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
827	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  i,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  i,  rows,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  i,  rows,  cols);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
828	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[0].doubleValue();  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
829	[BUG]  [BUGGY]  Sum  +=  cols[k  +  i]  *  jTj[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[k  +  i]  *  jTj[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[k  +  i]  *  jTj[k  +  j];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
830	[BUG]  [BUGGY]  Sum  +=  cols[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[0  +  i]  *  jacobian[0  +  j];	  Sum    +=    cols[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	200	None	replace
831	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][cols  +  1];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][cols  +  1];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	196	None	replace
832	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][max];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][max];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][max];	  jTj[i][j]    =    new    double[cols][cols];    	non-compiled	[CE]  incompatible  types	196	None	replace
833	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cost.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cost.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cost.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    coefficient.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	185	None	replace
834	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
835	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[K  +  k];  [CE]  cannot  find  symbol  K  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[K  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[0  +  i]  *  jacobian[K  +  k];	  	non-compiled	[CE]  cannot  find  symbol  K	190	None	add
836	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
837	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
838	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
839	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
840	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  max];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[j  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[j  +  max];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	68	None	replace
841	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj;  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	55	None	replace
842	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
843	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  k,  cols);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  k,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
844	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  sum.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  sum.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  residuals.length,  sum.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
845	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  k.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  k.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  residuals.length,  k.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.length,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	59	None	replace
846	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
847	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0  +  i]  *  jacobian[1  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
848	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[1  +  i]  *  jacobian[1  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
849	[BUG]  [BUGGY]  sum  +=  residuals[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[1  +  i]  *  jacobian[1  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
850	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0  +  i]  *  jacobian[1  +  k];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
851	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[1  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0  +  i]  *  jacobian[1  +  k];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
852	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[i  +  k]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
853	[BUG]  [BUGGY]  sum  +=  residuals[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[i  +  k]  *  jacobian[k  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
854	[BUG]  [BUGGY]  Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	94	None	replace
855	[BUG]  [BUGGY]  sum  +=  jtj[jTj  +  k]  *  jacobian;  [CE]  cannot  find  symbol  jtj  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[jTj  +  k]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[jTj  +  k]  *  jacobian;	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  cannot  find  symbol  jtj	38	None	replace
856	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj.doubleValue();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj.doubleValue();  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  jTj.doubleValue();	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
857	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
858	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >=  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >=  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >=  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
859	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  residuals.length;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
860	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj[j][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj[j][k]);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj[j][k]);  }	          for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj[j][k]);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	115	None	replace
861	[BUG]  [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[ki  +  j];  [CE]  array  required,  but  int  found  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[i  +  k]  *  jacobian[ki  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[i  +  k]  *  jacobian[ki  +  j];	  sum    +=    jacobian[i    +    k]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	25	None	replace
862	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  new  double[cols][cols].doubleValue();  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][cols].doubleValue();	          jTj[i][j]    =    sum;    for(int    j    =    0;    j    <    rows;    ++j)    {    jTj[i][j]    =    sum;    }    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
863	[BUG]  [BUGGY]  sum  +=  jTj[1  +  i]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
864	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj);	  ((    EstimationProblem)problem).setMeasurements(jTj);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
865	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
866	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	1	replace
867	[BUG]  [BUGGY]  double  jTj  =  Math.max(remainder,  sum.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(remainder,  sum.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(remainder,  sum.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
868	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  coefficients.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  double  jTj  =  Math.max(sum,  coefficients.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  coefficients.doubleValue());	  double    jTj    =    Math.max(sum,    residuals.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	60	None	replace
869	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jtj[1];  [CE]  cannot  find  symbol  jtj  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jtj[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jtj[1];	  sum    +=    jacobian[0]    *    jtj[1];    	non-compiled	[CE]  cannot  find  symbol  jtj	32	None	replace
870	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jTj[1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jTj[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jTj[1];	  sum    +=    jacobian[0]    *    jtj[1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
871	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
872	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.length);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.length);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.length);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	42	None	replace
873	[BUG]  [BUGGY]  jTj[i]  =  Math.max(remainder,  jTj[i],  sum);  [CE]  cannot  find  symbol  remainder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(remainder,  jTj[i],  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(remainder,  jTj[i],  sum);	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals);    	non-compiled	[CE]  cannot  find  symbol  remainder	149	None	replace
874	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[j  +  k];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
875	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[j  +  k];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[ki    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	23	1	replace
876	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
877	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	51	1	add
878	[BUG]  [BUGGY]  jTj[i][j]  =  max;  jacobian[i][j]  =  max;  [CE]  array  required,  but  double  found  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  max;  jacobian[i][j]  =  max;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    max;    jacobian[i][j]  =  max;	  	non-compiled	[CE]  array  required,  but  double  found	110	None	add
879	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  jacobian[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  jacobian[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  jacobian[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(reasoning[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
880	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
881	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  max];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  max];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  max];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	46	None	replace
882	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[jTj.length  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[jTj.length  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[jTj.length  +  k];	  sum    +=    jTj[i    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	67	None	replace
883	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jtj[0];  [CE]  cannot  find  symbol  jtj  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0]  *  jtj[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jtj[0];	  sum    +=    jacobian[0]    *    jtj[0];    	non-compiled	[CE]  cannot  find  symbol  jtj	15	None	replace
884	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj.length  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj.length  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[jTj.length  +  k];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	68	None	replace
885	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(k,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(k,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(k,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasurements(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
886	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[j  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[j  +  i];	  sum    +=    jTj[j    +    k]    *    jacobian[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	133	None	replace
887	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(cols,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(cols,  jTj.length);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
888	[BUG]  [BUGGY]  sum  +=  Math.max(cols,  jTj.length);  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(cols,  jTj.length);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(cols,  jTj.length);	  sum    +=    Math.max(sum,    jTj.length);    	compilable	  [FE]  EstimationException  	125	1	replace
889	[BUG]  [BUGGY]  sum  +=  jTj[jTj  +  k]  *  jacobianEvaluations;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[jTj  +  k]  *  jacobianEvaluations;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[jTj  +  k]  *  jacobianEvaluations;	  sum    +=    jacobian[jTj    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	38	None	replace
890	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  k]  *  jacobian[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	160	1	replace
891	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  i];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  k]  *  jacobian[1  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  k]  *  jacobian[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum    +=    jacobian[0    +    i]    *    jacobian[1    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	160	1	replace
892	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
893	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
894	[BUG]  [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[i        +        k]        *        jacobian[k        +        j];        sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[0  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
895	[BUG]  [BUGGY]  Sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jacobian[i  +  k]  *  jacobian[j  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	21	None	replace
896	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	1	add
897	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[1  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	190	1	add
898	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  jacobian[j][j]  =  sum;  [CE]  array  required,  but  double  found  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[j][j]  =  sum;  jacobian[j][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]    =    sum;    jacobian[j][j]  =  sum;	  	non-compiled	[CE]  array  required,  but  double  found	98	None	add
899	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  residuals[0  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
900	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0  +  j];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  residuals[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  residuals[0  +  j];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	147	1	replace
901	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0  +  i]  *  jacobian[0  +  k];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
902	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  k];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0  +  i]  *  jacobian[0  +  k];	  sum    +=    residuals[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	147	1	replace
903	[BUG]  [BUGGY]  sum  +=  parameters[k  +  i]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  parameters[k  +  i]  *  jTj[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  parameters[k  +  i]  *  jTj[k  +  j];	  sum    +=    residuals[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
904	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[K    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
905	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jacobian[1  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[K    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	122	1	replace
906	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  amount  +=  jacobian[0]  *  jacobian[1];  [CE]  cannot  find  symbol  amount  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  amount  +=  jacobian[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[1];    amount  +=  jacobian[0]  *  jacobian[1];	  	non-compiled	[CE]  cannot  find  symbol  amount	29	None	add
907	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  double  sum  +=  jacobian[k  +  k];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  double  sum  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    double  sum  +=  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	64	None	add
908	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  jTj  +=  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k];  jTj  +=  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    k];    jTj  +=  jacobian[k  +  k];	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None	add
909	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jTj[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jTj[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	176	None	replace
910	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  i,  cols,  max);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  i,  cols,  max);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  i,  cols,  max);	  ((    EstimationProblem)problem).setMeasurements(rows,    cols,    max);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
911	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  jSquare);  [CE]  cannot  find  symbol  jSquare  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  jSquare);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  jSquare);	  jTj[i]    =    Math.max(sum,    jTj[i],    sum);    	non-compiled	[CE]  cannot  find  symbol  jSquare	109	None	replace
912	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k]  *  cols[k  +  j];  [CE]  array  required,  but  int  found  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  k]  *  cols[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  k]  *  cols[k  +  j];	  sum    +=    cols[k    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	71	None	replace
913	[BUG]  [BUGGY]  sum  +=  rows[k  +  k]  *  jacobian[k  +  j];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  rows[k  +  k]  *  jacobian[k  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  rows[k  +  k]  *  jacobian[k  +  j];	  sum    +=    cols[k    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	71	None	replace
914	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  jacobian;	  sum    +=    jtj[k    +    j]    *    jacobian;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	139	None	replace
915	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[k  +  k];	  sum    +=    jacobian[0]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
916	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[k  +  k];	  sum    +=    jacobian[0]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	1	replace
917	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  j]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  j]  *  jacobian[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
918	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  j]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  j]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  j]  *  jacobian[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
919	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jTj[k  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	191	None	replace
920	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  k]  *  jacobian[k  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
921	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  i];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[k  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	191	1	replace
922	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.getValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	175	None	replace
923	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
924	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	1	replace
925	[BUG]  [BUGGY]  sum  +=  jtj[i  +  k]  *  jtj[k  +  i];  [CE]  cannot  find  symbol  jtj  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jtj[i  +  k]  *  jtj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[i  +  k]  *  jtj[k  +  i];	  sum    +=    jacobian[i    +    k]    *    jtj[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	193	None	replace
926	[BUG]  [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	18	None	replace
927	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  rows);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  rows);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  rows);	  jTj[i]    =    Math.max(sum,    jTj[i],    cols);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	107	None	replace
928	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
929	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
930	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jTj[k  +  k];  [CE]  array  required,  but  int  found  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  j]  *  jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jTj[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	72	None	replace
931	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  cols[jTj[k  +  k];  [CE]  ']'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  i]  *  cols[jTj[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  cols[jTj[k  +  k];	  sum    +=    jTj[k    +    i]    *    cols[k    +    k];    	non-compiled	[CE]  ']'  expected	72	None	replace
932	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummarySquare  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  SummarySquare  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    SummarySquare  sum  =  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
933	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  remainings[k  +  j];  [CE]  cannot  find  symbol  remainings  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  sum  +=  jacobian[k  +  i]  *  remainings[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    sum  +=  jacobian[k  +  i]  *  remainings[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  remainings	61	None	add
934	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  1]  *  jacobian[k  +  1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  1]  *  jacobian[k  +  1];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
935	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  1]  *  jacobian[k  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  1]  *  jacobian[k  +  1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  1]  *  jacobian[k  +  1];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
936	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  i];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[jTj  +  i];	  sum    +=    jacobian[j    +    k]    *    jTj[k    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
937	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  jSquare.doubleValue());  [CE]  cannot  find  symbol  jSquare  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  jSquare.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  jSquare.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    sum.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  jSquare	8	None	replace
938	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  sum.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max,  sum.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max,  sum.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    sum.doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
939	[BUG]  [BUGGY]  sum  +=  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k];	  sum    +=    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	65	None	replace
940	[BUG]  [BUGGY]  sum  +=  rows[k  +  k];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  rows[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  rows[k  +  k];	  sum    +=    jacobian[k    +    k];    	non-compiled	[CE]  array  required,  but  int  found	65	None	replace
941	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	174	None	replace
942	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[k    +    k];    sum  +=  jacobian[1]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
943	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  sum  +=  jacobian[1]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[k    +    k];    sum  +=  jacobian[1]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	49	1	add
944	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobianEvaluations;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobianEvaluations;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobianEvaluations;	  sum    +=    jacobian[j    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	39	None	replace
945	[BUG]  [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[j        +        i]        *        jacobian[k        +        k];        sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	87	None	add
946	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  columns,  k,  cols);  [CE]  cannot  find  symbol  columns  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  columns,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  columns,  k,  cols);	  ((    EstimationProblem)problem).setMeasures(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  columns	7	None	replace
947	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  i);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  i);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  i);	  ((    EstimationProblem)problem).setMeasures(i,    cols);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
948	[BUG]  [BUGGY]  for(int  j  =  rows;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  rows;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  rows;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    i;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
949	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  -=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0]    *    jacobian[0];    sum  -=  jacobian[0]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
950	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  -=  jacobian[0]  *  jacobian[0];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  sum  -=  jacobian[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0]    *    jacobian[0];    sum  -=  jacobian[0]  *  jacobian[0];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
951	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[0][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[0][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
952	[BUG]  [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[0][j]  =  sum;  jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          jTj[i][j]    =    sum;    jTj[i][j]  =  sum;  jTj[0][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                jTj[i][j]        =        sum;        jTj[i][j]    =    sum;    jTj[0][j]  =  sum;  jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	1	add
953	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  else  {  sum  +=  cols  *  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  else  {  sum  +=  cols  *  jacobian[j  +  i]  *  jacobian[k  +  k];  }	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
954	[BUG]  [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  else  {  sum  +=  cols  *  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  else  {  sum  +=  cols  *  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  else  {  sum  +=  cols  *  jacobian[j  +  i]  *  jacobian[k  +  k];  }	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
955	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
956	[BUG]  [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	if(j  >  0)  {  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  }	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double    sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	91	1	replace
957	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  j);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  j);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  AssertionFailedError  	128	1	replace
958	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  j);  [FE]  AssertionFailedError  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(sum,  j);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  j);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  AssertionFailedError  	128	1	replace
959	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(max,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(max,  k);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
960	[BUG]  [BUGGY]  sum  +=  Math.max(max,  k);  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.max(max,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(max,  k);	  sum    +=    Math.max(sum,    k);    	compilable	  [FE]  EstimationException  	128	1	replace
961	[BUG]  [BUGGY]  jTj[i][j]  =  problem.getAllParameters();  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  problem.getAllParameters();  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  problem.getAllParameters();	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  incompatible  types	114	None	replace
962	[BUG]  [BUGGY]  jTj[i][j]  =  problem;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  problem;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  problem;	  jTj[i][j]    =    jTj;    	non-compiled	[CE]  incompatible  types	114	None	replace
963	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  j]  *  jTj;	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
964	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jTj;	  sum    +=    jTj[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	145	None	replace
965	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    total    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
966	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[j  +  k]  *  jacobian[k  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    total    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	1	replace
967	[BUG]  [BUGGY]  sum  +=  jTj[k  +  j]  *  residuals;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[k  +  j]  *  residuals;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  j]  *  residuals;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	138	None	replace
968	[BUG]  [BUGGY]  sum  +=  parameters[k  +  j]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  parameters[k  +  j]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  parameters[k  +  j]  *  jTj;	  sum    +=    residuals[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	138	None	replace
969	[BUG]  [BUGGY]  sum  +=  parameters[k  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  parameters[k  +  k]  *  jTj;  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  parameters[k  +  k]  *  jTj;	  sum    +=    jacobian[k    +    k]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	66	None	replace
970	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jtj[k  +  j];  [CE]  cannot  find  symbol  jtj  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  i]  *  jtj[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  jtj[k  +  j];	  sum    +=    jacobian[k    +    i]    *    residuals[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	62	None	replace
971	[BUG]  [BUGGY]  jTj[i][j]  =  k;  jacobian[i][j]  =  k;  [CE]  array  required,  but  double  found  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  jacobian[i][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    jacobian[i][j]  =  k;	  	non-compiled	[CE]  array  required,  but  double  found	112	None	add
972	[BUG]  [BUGGY]  jTj[i][j]  =  k;  for(int  j][j]  =  k;  [CE]  ';'  expected  [FE]      EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i][j]  =  k;  for(int  j][j]  =  k;  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]    =    k;    for(int  j][j]  =  k;	  	non-compiled	[CE]  ';'  expected	112	None	add
973	[BUG]  [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	3	None	replace
974	[BUG]  [BUGGY]  SummaryRestriction  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  SummaryRestriction  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	SummaryRestriction  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction    sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  ';'  expected	96	None	replace
975	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]!=  null)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]!=  null)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]!=  null)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
976	[BUG]  [BUGGY]  sum  +=  jTj[0  +  j]  *  jacobian[1  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  j]  *  jacobian[1  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  j]  *  jacobian[1  +  i];	  sum    +=    jacobian[0    +    j]    *    jTj[1    +    i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	177	None	replace
977	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(k,  rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasures(k,  rows,  k,  cols);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(k,  rows,  k,  cols);	  ((    EstimationProblem)problem).setMeasures(rows,    k,    cols);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
978	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  row;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.pow(10.0,    jTj);    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	173	None	replace
979	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jcobian[1  +  k];  [CE]  cannot  find  symbol  jcobian  [FE]            EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  i]  *  jcobian[1  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jcobian[1  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  jcobian	178	None	replace
980	[BUG]  [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	  int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	86	None	replace
981	[BUG]  [BUGGY]  Sum  +=  jTj[0]  *  jacobian[1];  [CE]  cannot  find  symbol  Sum  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jTj[0]  *  jacobian[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jTj[0]  *  jacobian[1];	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  cannot  find  symbol  Sum	28	None	replace
982	[BUG]  [BUGGY]  sum  +=  cols[0]  *  jTj[1];  [CE]  array  required,  but  int  found  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[0]  *  jTj[1];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[0]  *  jTj[1];	  sum    +=    jacobian[0]    *    jTj[1];    	non-compiled	[CE]  array  required,  but  int  found	28	None	replace
983	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	54	None	add
984	[BUG]  [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[i  +  j];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[i  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  k]  *  jacobian[i  +  j];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  array  required,  but  int  found	26	None	replace
985	[BUG]  [BUGGY]  Sum  +=  cols[i  +  k]  *  jacobian[j  +  k];  [CE]  cannot  find  symbol  Sum  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  cols[i  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[i  +  k]  *  jacobian[j  +  k];	  sum    +=    jacobian[i    +    k]    *    cols[j    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	26	None	replace
986	[BUG]  [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  japonaiscobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  japonaiscobian  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  japonaiscobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum        +=        residuals[k        +        i]        *        jacobian[k        +        j];        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  japonaiscobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  japonaiscobian	92	None	add
987	[BUG]  [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jTj[0  +  k]  *  jacobian[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  k]  *  jacobian[k  +  i];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
988	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jTj[k  +  i];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
989	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[i  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[0  +  k]  *  jTj[i  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jTj[i  +  k];	  sum    +=    jTj[0    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	134	None	replace
990	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  cols  *  jacobian[0  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	121	1	replace
991	[BUG]  [BUGGY]  sum  +=  cols  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols  *  jacobian[0  +  j];	  sum    +=    jacobian[0]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	121	1	replace
992	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(rows,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	172	None	replace
993	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.doubleValue());  }  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(cols,  jTj.doubleValue());  }	  for(int    j    =    0;    j    <    cols;    ++j)    {    sum    +=    Math.max(sum,    jTj.doubleValue());    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	172	None	replace
994	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  j]  *  cols[k  +  i];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[k  +  j]  *  cols[k  +  i];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  j]  *  cols[k  +  i];	  sum    +=    cols[k    +    j]    *    jacobian[k    +    i];    	non-compiled	[CE]  array  required,  but  int  found	164	None	replace
995	[BUG]  [BUGGY]          sum  +=  Math.pow(10,  k);  jTj  +=  Math.pow(10,  k);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]          sum  +=  Math.pow(10,  k);  jTj  +=  Math.pow(10,  k);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	                sum    +=    Math.pow(10,    k);    jTj  +=  Math.pow(10,  k);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	141	None	add
996	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  rows,  jTj);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  rows,  jTj);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  rows,  jTj);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
997	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum);  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  sum);	  ((    EstimationProblem)problem).setMeasurements(jTj,    rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
998	[BUG]  [BUGGY]  Sum  +=  jTj[0]  *  jacobian[0];  [CE]  cannot  find  symbol  Sum  [FE]        EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  Sum  +=  jTj[0]  *  jacobian[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  jTj[0]  *  jacobian[0];	  sum    +=    jacobian[0]    *    jTj[0];    	non-compiled	[CE]  cannot  find  symbol  Sum	10	None	replace
999	[BUG]  [BUGGY]  sum  +=  cols[0]  *  jTj[0];  [CE]  array  required,  but  int  found  [FE]          EstimationException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[0]  *  jTj[0];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[0]  *  jTj[0];	  sum    +=    jacobian[0]    *    jTj[0];    	non-compiled	[CE]  array  required,  but  int  found	10	None	replace
1000	[BUG]  [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[j  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  cols[j  +  k]  *  jacobian[j  +  k];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[j  +  k]  *  jacobian[j  +  k];	  sum    +=    cols[k    +    i]    *    jacobian[j    +    k];    	non-compiled	[CE]  array  required,  but  int  found	70	None	replace
1001	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
1002	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  k];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
1003	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
1004	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	151	1	add
1005	[BUG]  [BUGGY]  jTj[i]  =  Math.max(remainder,  jTj[i],  sum.doubleValue());  [CE]  cannot  find  symbol  remainder  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  jTj[i]  =  Math.max(remainder,  jTj[i],  sum.doubleValue());  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(remainder,  jTj[i],  sum.doubleValue());	  jTj[i]    =    Math.max(sum,    jTj[i],    residuals.doubleValue());    	non-compiled	[CE]  cannot  find  symbol  remainder	184	None	replace
1006	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]      sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	  for(int    j    =    0;    j    <    rows;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1007	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  i);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.pow(10,  i);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
1008	[BUG]  [BUGGY]  sum  +=  Math.pow(10,  i);  [FE]  AssertionFailedError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  Math.pow(10,  i);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.pow(10,  i);	          sum    +=    Math.pow(10,    k);    	compilable	  [FE]  AssertionFailedError  	142	1	replace
1009	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
1010	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
1011	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
1012	[BUG]  [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum        +=        jacobian[0        +        i]        *        jacobian[0        +        j];        sum    +=    jacobian[1    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[2  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	56	1	add
1013	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(remainder,  jTj,  cols);  [CE]  cannot  find  symbol  remainder  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(remainder,  jTj,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  Math.sqrt(remainder,  jTj,  cols);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  cannot  find  symbol  remainder	194	None	replace
1014	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(problem,  jTj,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {      [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(problem,  jTj,  cols);  [BUGGY]      }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  Math.sqrt(problem,  jTj,  cols);	  sum    +=    jacobian[i    +    k]    *    Math.sqrt(jTj,    cols);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	194	None	replace
