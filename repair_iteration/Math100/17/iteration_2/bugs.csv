bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
3	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  >  expected	27	None	replace
4	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  jTj,  cols);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
5	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  k,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  k,  cols);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
6	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  max);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(rows,  max);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(rows,  max);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
7	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(jTj,  rows,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(jTj,  rows,  cols);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
8	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum.doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  sum.doubleValue());	      jTj[i]    =    Math.max(sum,    jTj[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
9	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  max);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  max);	      jTj[i]    =    Math.max(sum,    jTj[i].doubleValue());    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	22	None	replace
10	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[0];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jTj[0];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
11	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
12	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
13	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
14	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
15	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jtj[0];  [CE]  cannot  find  symbol  jtj  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jtj[0];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jtj[0];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	14	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
17	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
18	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  >  expected	24	None	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
20	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	29	1	add
21	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    Sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	29	None	add
22	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  total  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  total  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  total  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    total  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  total	29	None	add
23	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];  [CE]  cannot  find  symbol  ki  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    sum  +=  jacobian[i  +  k]  *  jacobian[ki  +  j];	  	non-compiled	[CE]  cannot  find  symbol  ki	29	None	add
24	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
25	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[k  +  j];  [CE]  array  required,  but  int  found  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  cols[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	30	None	replace
26	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[j  +  j];  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  cols[j  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  cols[j  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	30	None	replace
27	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[k  +  i];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
28	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jTj[1];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jTj[1];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jTj[1];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
29	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[1];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  EstimationException  	18	1	replace
30	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  [FE]  EstimationException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[1];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[1];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  EstimationException  	18	1	replace
31	[BUG]  [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[0]  *  jacobian[1  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0]  *  jacobian[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
32	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jtj[1];  [CE]  cannot  find  symbol  jtj  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jtj[1];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jtj[1];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	18	None	replace
33	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
34	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    jTj[i][j]  =  sum;	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	add
35	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  for(int  jTj[i][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    for(int  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	7	None	add
36	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  [CE]  cannot  find  symbol  JTj  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  JTj[i][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    JTj[i][j]  =  sum;	  	non-compiled	[CE]  cannot  find  symbol  JTj	7	None	add
37	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  Sum;  [CE]  cannot  find  symbol  Sum  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  jTj[i][j]  =  Sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    jTj[i][j]  =  Sum;	  	non-compiled	[CE]  cannot  find  symbol  Sum	7	None	add
38	[BUG]  [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[jTj  +  k]  *  jTj;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[jTj  +  k]  *  jTj;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
39	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
40	[BUG]  [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[k  +  k]  *  jacobian;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  k]  *  jacobian;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
41	[BUG]  [BUGGY]  sum  +=  jTj[k  +  j]  *  jacobian;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[k  +  j]  *  jacobian;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  j]  *  jacobian;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.length);  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][j]);  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][i]);  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.min(sum,  jTj.length);  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
46	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
47	[BUG]  [BUGGY]  sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
48	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  k]  *  jTj[k  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  k]  *  jTj[k  +  i];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	16	None	replace
49	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
50	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
51	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
52	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
53	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	add
54	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
55	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
57	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
58	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  sum.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.doubleValue());	      double    jTj    =    Math.max(sum,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	replace
59	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  jTj.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length,  jTj.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  residuals.length,  jTj.doubleValue());	      double    jTj    =    Math.max(sum,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	replace
60	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  residuals.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  residuals.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  residuals.doubleValue());	      double    jTj    =    Math.max(sum,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	replace
61	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	      sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
62	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  residuals[k  +  j];	      sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	1	replace
63	[BUG]  [BUGGY]  sum  +=  residuals[k  +  i]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  residuals[k  +  i]  *  jTj[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  i]  *  jTj[k  +  j];	      sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	20	None	replace
64	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
65	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	replace
66	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  k]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  k]  *  jTj;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  k]  *  jTj;	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
67	[BUG]  [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[i  +  k]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[i  +  k]  *  jacobian[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
68	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
69	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[k  +  k];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
70	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[j  +  k];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[j  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jacobian[j  +  k];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
71	[BUG]  [BUGGY]  sum  +=  cols[k  +  k]  *  jacobian[k  +  j];  [CE]  array  required,  but  int  found  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  cols[k  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  k]  *  jacobian[k  +  j];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
72	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  cols[k  +  k];  [CE]  array  required,  but  int  found  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[k  +  i]  *  cols[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  cols[k  +  k];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
73	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  jTj,  cols);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
74	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  max);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  max);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
75	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  k,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  k,  cols);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
76	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  cols,  max);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows,  cols,  max);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows,  cols,  max);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
77	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
78	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
79	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  max;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    0)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
80	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jTj[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jTj[k  +  k];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	2	None	replace
81	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  max);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  max);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  max);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
82	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  jtj.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  jtj.length);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  jtj.length);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
83	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum,  jTj.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  sum,  jTj.length);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum,  jTj.length);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
84	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
85	[BUG]  [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  i;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
86	[BUG]  [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  >  expected	26	None	replace
87	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
88	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	15	1	add
89	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    Sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  Sum	15	None	add
90	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  total  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  cannot  find  symbol  total  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  total  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    total  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  cannot  find  symbol  total	15	None	add
91	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    double  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	  	non-compiled	[CE]  ';'  expected	15	None	add
92	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
93	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	1	add
94	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    Sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	19	None	add
95	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	19	None	add
96	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRestriction  sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ';'  expected	19	None	add
97	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SumMetrics  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	19	None	add
98	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[j][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[j][j]  =  sum;	      for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[j][j]    =    sum;    }    	compilable	  [FE]  EstimationException  	28	1	replace
99	[BUG]  [BUGGY]  jTj[j][j]  =  sum;  [FE]  EstimationException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[j][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[j][j]  =  sum;	      for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[j][j]    =    sum;    }    	compilable	  [FE]  EstimationException  	28	1	replace
100	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  sum;  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  sum;  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[j][j]    =    sum;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	replace
101	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
102	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
103	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	17	None	add
104	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  total  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  total  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  total  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    total  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  total	17	None	add
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
106	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
107	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  cols);	      jTj[i]    =    Math.max(sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	21	None	replace
108	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i]);  [CE]  no  suitable  method  found  for  max(double,double,double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  sum,  jTj[i]);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  sum,  jTj[i]);	      jTj[i]    =    Math.max(sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[])	21	None	replace
109	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum);  [CE]  no  suitable  method  found  for  max(double,double[],double)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  sum);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  sum);	      jTj[i]    =    Math.max(sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double)	21	None	replace
110	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  max;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[i][j]  =  max;	      jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	8	1	replace
111	[BUG]  [BUGGY]  jTj[i][j]  =  max;  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  max;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  max;	      jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	8	1	replace
112	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  k;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	jTj[i][j]  =  k;	      jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	8	1	replace
113	[BUG]  [BUGGY]  jTj[i][j]  =  k;  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  k;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  k;	      jTj[i][j]    =    sum;    	compilable	  [FE]  EstimationException  	8	1	replace
114	[BUG]  [BUGGY]  jTj[i][j]  =  jTj;  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  jTj;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  jTj;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  incompatible  types	8	None	replace
115	[BUG]  [BUGGY]      for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj[j][k]);  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	add
116	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  cols);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  cols);	      ((    EstimationProblem)problem).setMeasurements(cols);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
117	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  jTj);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  jTj);	      ((    EstimationProblem)problem).setMeasurements(cols);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
118	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj);	      ((    EstimationProblem)problem).setMeasurements(cols);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
119	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jTj[i  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jTj[i  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
120	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0]  *  jacobian[0  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  EstimationException  	30	1	replace
121	[BUG]  [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0]  *  jacobian[0  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	compilable	  [FE]  EstimationException  	30	1	replace
122	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [CE]  cannot  find  symbol  K  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    sum  +=  jacobian[j  +  i]  *  jacobian[K  +  k];	  	non-compiled	[CE]  cannot  find  symbol  K	15	None	add
123	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  '.class'  expected	24	None	replace
124	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  jTj.length);	      	compilable	  [FE]  EstimationException  	6	1	replace
125	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  Math.max(sum,  jTj.length);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj.length);	      	compilable	  [FE]  EstimationException  	6	1	replace
126	[BUG]  [BUGGY]  jTj[i]  =  sum;  [CE]  incompatible  types  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  sum;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  sum;	      	non-compiled	[CE]  incompatible  types	6	None	replace
127	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  Math.max(sum,  k);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  Math.max(sum,  k);	      	compilable	  [FE]  EstimationException  	6	1	replace
128	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  k);  [FE]  EstimationException  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  Math.max(sum,  k);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  k);	      	compilable	  [FE]  EstimationException  	6	1	replace
129	[BUG]  [BUGGY]  sum  +=  Math.max(sum,  jTj.length));  [CE]  ';'  expected  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  Math.max(sum,  jTj.length));  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  Math.max(sum,  jTj.length));	      	non-compiled	[CE]  ';'  expected	6	None	replace
130	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
131	[BUG]  [BUGGY]  jTj[i][j]  =  total;  [CE]  cannot  find  symbol  total  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  total;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  total;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  cannot  find  symbol  total	8	None	replace
132	[BUG]  [BUGGY]  jTj[i][j]  =  residuals;  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  residuals;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  residuals;	      jTj[i][j]    =    sum;    	non-compiled	[CE]  incompatible  types	8	None	replace
133	[BUG]  [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[j  +  k]  *  jacobian[k  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[j  +  k]  *  jacobian[k  +  i];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
134	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
135	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(cols,  rows);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(cols,  rows);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
136	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(jTj,  rows,  cols);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
137	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  cols);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(i,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(i,  cols);	      ((    EstimationProblem)problem).setMeasurements(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
138	[BUG]  [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  residuals[k  +  j]  *  jTj;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[k  +  j]  *  jTj;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
139	[BUG]  [BUGGY]  sum  +=  jtj[k  +  j]  *  jacobian;  [CE]  cannot  find  symbol  jtj  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jtj[k  +  j]  *  jacobian;  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jtj[k  +  j]  *  jacobian;	  sum    +=    jacobian[k    +    j]    *    jTj;    	non-compiled	[CE]  cannot  find  symbol  jtj	4	None	replace
140	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasurements(rows);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasurements(rows);	      ((    EstimationProblem)problem).setMeasurements(cols);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
141	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  Math.pow(10,  k);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	        sum  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
142	[BUG]  [BUGGY]      sum  +=  Math.pow(10,  k);  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  Math.pow(10,  k);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum  +=  Math.pow(10,  k);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
143	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
144	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	replace
145	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
146	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	      sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  EstimationException  	20	1	replace
147	[BUG]  [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  residuals[0  +  i]  *  jacobian[0  +  j];	      sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    	compilable	  [FE]  EstimationException  	20	1	replace
148	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k);  [CE]  no  suitable  method  found  for  max(double,double[],int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  k);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  k);	      jTj[i]    =    Math.max(sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],int)	21	None	replace
149	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  residuals);  [CE]  no  suitable  method  found  for  max(double,double[],double[])  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  residuals);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  residuals);	      jTj[i]    =    Math.max(sum,    jTj[i]);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double[])	21	None	replace
150	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [CE]  cannot  find  symbol  Sum  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    Sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	  	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	add
151	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
152	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    sum  +=  jacobian[1  +  i]  *  jacobian[1  +  j];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	13	1	add
153	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    double  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ';'  expected	29	None	add
154	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    SumMetrics  jacobian[i  +  k]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	29	None	add
155	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  int  jTj[i][j]  =  sum;  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    int  jTj[i][j]  =  sum;	  	non-compiled	[CE]  ']'  expected	7	None	add
156	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
157	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  k]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	1	replace
158	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[1  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[1  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jTj[1  +  k];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
159	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
160	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    sum  +=  jacobian[0  +  i]  *  jacobian[1  +  k];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	1	add
161	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  cols);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(i,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(i,  cols);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
162	[BUG]  [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  rows);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  ((  EstimationProblem)problem).setMeasures(cols,  rows);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	((  EstimationProblem)problem).setMeasures(cols,  rows);	      ((    EstimationProblem)problem).setMeasures(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
163	[BUG]  [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[k  +  j];  [CE]  array  required,  but  int  found  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  cols[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  i]  *  jacobian[k  +  j];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
164	[BUG]  [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[k  +  i];  [CE]  array  required,  but  int  found  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  cols[k  +  j]  *  jacobian[k  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  cols[k  +  j]  *  jacobian[k  +  i];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  array  required,  but  int  found	3	None	replace
165	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  residuals.length);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  residuals.length);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
166	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  sum.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  sum.length);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  sum.length);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
167	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	For(int  j  =  0;  j  <  rows;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  '.class'  expected	27	None	replace
168	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
169	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryRelatives  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	19	None	add
170	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  ']'  expected	19	None	add
171	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryMeasurement[]  residuals  =  problem.getRemainders();  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummaryMeasurement[]  residuals  =  problem.getRemainders();  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummaryMeasurement[]  residuals  =  problem.getRemainders();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
172	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.max(sum,  jTj.doubleValue());  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
173	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj);  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
174	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.doubleValue());  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
175	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10.0,  jTj.getValue());  }	      	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	6	None	replace
176	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jTj[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jTj[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
177	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  j]  *  jTj[1  +  i];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  j]  *  jTj[1  +  i];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
178	[BUG]  [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[0  +  i]  *  jacobian[1  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[1    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	18	None	replace
179	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum;  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[i][j]  =  sum;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
180	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    for(int  j  =  0;  j  <  cols;  ++j)  {  double  jTj[i][j]  =  sum;  }	  	non-compiled	[CE]  ']'  expected	7	None	add
181	[BUG]  [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      jTj[i][j]  =  sum;  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        jTj[i][j]    =    sum;    for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[i][j]  =  sum;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	7	None	add
182	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j];  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  jTj;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  jTj;  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  jTj[j][j]  =  jTj;  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    jTj[j][j]    =    sum;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	28	None	replace
184	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  residuals.doubleValue());  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  residuals.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  residuals.doubleValue());	      jTj[i]    =    Math.max(sum,    jTj[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
185	[BUG]  [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  coefficient.doubleValue());  [CE]  cannot  find  symbol  coefficient  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i]  =  Math.max(sum,  jTj[i],  coefficient.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i]  =  Math.max(sum,  jTj[i],  coefficient.doubleValue());	      jTj[i]    =    Math.max(sum,    jTj[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  coefficient	22	None	replace
186	[BUG]  [BUGGY]      for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        for(int  j  =  0;  j  <  cols;  ++j)  {  sum  +=  Math.pow(10,  jTj);  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	5	None	add
187	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  i.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  i.doubleValue());  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  i.doubleValue());	      double    jTj    =    Math.max(sum,    jTj.doubleValue());    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	23	None	replace
188	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
189	[BUG]  [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]    EstimationException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[1  +  i]  *  jacobian[0  +  j];	  sum    +=    jacobian[0    +    i]    *    jacobian[0    +    j];    	compilable	  [FE]  EstimationException  	14	1	replace
190	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
191	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jacobian[k  +  k];	  sum    +=    jacobian[j    +    i]    *    jacobian[k    +    k];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	1	replace
192	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  jacobian[k  +  j];	  sum    +=    jacobian[k    +    i]    *    jTj[k    +    j];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	2	None	replace
193	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jtj[k  +  j];  [CE]  cannot  find  symbol  jtj  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  jtj[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jtj[k  +  j];	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  jtj	30	None	replace
194	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols);  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  Math.sqrt(jTj,  cols);	  sum    +=    jacobian[i    +    k]    *    jacobian[k    +    j];    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	30	None	replace
195	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj[k  +  k];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  jTj[k  +  k];	  sum    +=    jTj[k    +    i]    *    jacobian[k    +    k];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
196	[BUG]  [BUGGY]  jTj[i][j]  =  new  double[cols][cols];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  jTj[i][j]  =  new  double[cols][cols];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	jTj[i][j]  =  new  double[cols][cols];	      jTj[i][j]    =    sum;    	non-compiled	[CE]  incompatible  types	8	None	replace
197	[BUG]  [BUGGY]  double  jTj  =  Math.max(sum,  cols);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  double  jTj  =  Math.max(sum,  cols);  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	double  jTj  =  Math.max(sum,  cols);	      double    jTj    =    Math.max(sum,    jTj.length);    	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	10	None	replace
198	[BUG]  [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]      sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	        sum    +=    residuals[k    +    i]    *    jacobian[k    +    j];    SummarySquare  sum  =  residuals[k  +  i]  *  jacobian[k  +  j];	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
199	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j][j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
200	[BUG]  [BUGGY]  Sum  +=  cols[k  +  i]  *  jacobian[k  +  j];  [CE]  cannot  find  symbol  Sum  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  Sum  +=  cols[k  +  i]  *  jacobian[k  +  j];  [BUGGY]    }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	Sum  +=  cols[k  +  i]  *  jacobian[k  +  j];	  sum    +=    jacobian[k    +    i]    *    cols[k    +    j];    	non-compiled	[CE]  cannot  find  symbol  Sum	3	None	replace
201	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {    [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]    sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {  if(reasoning[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }	      for(int    j    =    0;    j    <    cols;    ++j)    {    if(remaining[j][j]    >    max)    {    sum    +=    residuals[j].doubleValue();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
