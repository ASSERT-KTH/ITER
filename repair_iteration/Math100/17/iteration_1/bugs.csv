bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  k];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jTj[k  +  i]  *  jacobian[k  +  k];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jTj[k  +  i]  *  jacobian[k  +  k];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	34	None	replace
2	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj[k  +  j];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jTj[k  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  jTj[k  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	34	None	replace
3	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  i]  *  cols[k  +  j];  [CE]  array  required,  but  int  found  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[k  +  i]  *  cols[k  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  i]  *  cols[k  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	non-compiled	[CE]  array  required,  but  int  found	34	None	replace
4	[BUG]  [BUGGY]  sum  +=  jacobian[k  +  j]  *  jTj;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[k  +  j]  *  jTj;  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[k  +  j]  *  jTj;	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	34	None	replace
5	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	  	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
6	[BUG]  [BUGGY]    [FE]  EstimationException  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	  	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    jTj[i][j]  =  sum;  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	    jTj[i][j]  =  sum;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
8	[BUG]  [BUGGY]    jTj[i][j]  =  sum;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    jTj[i][j]  =  sum;  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    jTj[i][j]  =  sum;		compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
9	[BUG]  [BUGGY]    ((  EstimationProblem)problem).setMeasurements(cols);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    ((  EstimationProblem)problem).setMeasurements(cols);  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    ((  EstimationProblem)problem).setMeasurements(cols);		non-compiled	[CE]  cannot  find  symbol	35	None	add
10	[BUG]  [BUGGY]    double  jTj  =  Math.max(sum,  jTj.length);  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    double  jTj  =  Math.max(sum,  jTj.length);  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    double  jTj  =  Math.max(sum,  jTj.length);		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	add
11	[BUG]  [BUGGY]    ((  EstimationProblem)problem).setMeasures(rows,  cols);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    ((  EstimationProblem)problem).setMeasures(rows,  cols);  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    ((  EstimationProblem)problem).setMeasures(rows,  cols);		non-compiled	[CE]  cannot  find  symbol	35	None	add
12	[BUG]  [BUGGY]    ((  EstimationProblem)problem).setMeasurements(rows,  cols);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    ((  EstimationProblem)problem).setMeasurements(rows,  cols);  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    ((  EstimationProblem)problem).setMeasurements(rows,  cols);		non-compiled	[CE]  cannot  find  symbol	35	None	add
13	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
14	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [FE]  EstimationException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jacobian[0  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
16	[BUG]  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[j  +  i]  *  jacobian[k  +  k];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
17	[BUG]  [BUGGY]  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
18	[BUG]  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [FE]  EstimationException  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[0  +  i]  *  jacobian[1  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  EstimationException  	34	1	replace
19	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];		compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
20	[BUG]  [BUGGY]    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    sum  +=  residuals[k  +  i]  *  jacobian[k  +  j];		compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	1	add
21	[BUG]  [BUGGY]    jTj[i]  =  Math.max(sum,  jTj[i]);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    jTj[i]  =  Math.max(sum,  jTj[i]);  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    jTj[i]  =  Math.max(sum,  jTj[i]);		non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	35	None	add
22	[BUG]  [BUGGY]    jTj[i]  =  Math.max(sum,  jTj[i].doubleValue());  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    jTj[i]  =  Math.max(sum,  jTj[i].doubleValue());  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    jTj[i]  =  Math.max(sum,  jTj[i].doubleValue());		non-compiled	[CE]  cannot  find  symbol	35	None	add
23	[BUG]  [BUGGY]    double  jTj  =  Math.max(sum,  jTj.doubleValue());  [CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    double  jTj  =  Math.max(sum,  jTj.doubleValue());  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    double  jTj  =  Math.max(sum,  jTj.doubleValue());		non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	add
24	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j];  }		non-compiled	[CE]  illegal  start  of  expression	35	None	add
25	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  0)  {  sum  +=  residuals[j][j];  }		non-compiled	[CE]  illegal  start  of  expression	35	None	add
26	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j].doubleValue();  }		non-compiled	[CE]  illegal  start  of  expression	35	None	add
27	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    for(int  j  =  0;  j  <  cols;  ++j)  {  if(remaining[j][j]  >  max)  {  sum  +=  residuals[j][j].doubleValue();  }		non-compiled	[CE]  illegal  start  of  expression	35	None	add
28	[BUG]  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  sum;  }  [CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]    for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  sum;  }  [BUGGY]  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	    for(int  j  =  0;  j  <  cols;  ++j)  {  jTj[j][j]  =  sum;  }		non-compiled	[CE]  variable  j  is  already  defined  in  method  getCovariances(EstimationProblem)	35	None	add
29	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
30	[BUG]  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [BUGGY]  sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];  [BUGGY]  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  try  {  return  new  RealMatrixImpl(jTj).inverse().getData();  }  catch  (InvalidMatrixException  ime)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	sum  +=  jacobian[i  +  k]  *  jacobian[k  +  j];	sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	replace
