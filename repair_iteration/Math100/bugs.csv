bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] incrementJacobianEvaluationsCounter(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { [BUGGY] incrementJacobianEvaluationsCounter(); [BUGGY] Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { [BUGGY] [BUGGY] incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	
3	[BUG] [BUGGY] Arrays.fill(jacobian, 0); [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); [BUGGY] Arrays.fill(jacobian, 0); [BUGGY] for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); [BUGGY] [BUGGY] Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	
5	[BUG] [BUGGY] for (int i = 0, index = 0; i < rows; i++) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); [BUGGY] for (int i = 0, index = 0; i < rows; i++) { [BUGGY] WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); [BUGGY] [BUGGY] for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	
7	[BUG] [BUGGY] WeightedMeasurement wm = measurements[i]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { [BUGGY] WeightedMeasurement wm = measurements[i]; [BUGGY] double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { [BUGGY] [BUGGY] WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	
9	[BUG] [BUGGY] double factor = -Math.sqrt(wm.getWeight()); [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; [BUGGY] double factor = -Math.sqrt(wm.getWeight()); [BUGGY] for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; [BUGGY] [BUGGY] double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	
11	[BUG] [BUGGY] for (int j = 0; j < cols; ++j) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); [BUGGY] for (int j = 0; j < cols; ++j) { [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); [BUGGY] [BUGGY] for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	
13	[BUG] [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); [BUGGY] } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { [BUGGY] [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	
16	[BUG] [BUGGY] updateJacobian(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  [BUGGY] updateJacobian(); [BUGGY]   final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	
17	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  [BUGGY] [BUGGY] updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	
18	[BUG] [BUGGY] final int rows = problem.getMeasurements().length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  [BUGGY] final int rows = problem.getMeasurements().length; [BUGGY] final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	
19	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  [BUGGY] [BUGGY] final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	
20	[BUG] [BUGGY] final int cols = problem.getAllParameters().length; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; [BUGGY] final int cols = problem.getAllParameters().length; [BUGGY] final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	
21	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; [BUGGY] [BUGGY] final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	
22	[BUG] [BUGGY] final int max= cols * rows; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; [BUGGY] final int max= cols * rows; [BUGGY] double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	167	167	1	replace	
23	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; [BUGGY] [BUGGY] final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	167	167	1	add	
24	[BUG] [BUGGY] double[][] jTj = new double[cols][cols]; [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; [BUGGY] double[][] jTj = new double[cols][cols]; [BUGGY] for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	replace	
25	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; [BUGGY] [BUGGY] double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	168	168	1	add	
26	[BUG] [BUGGY] for (int i = 0; i < cols; ++i) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; [BUGGY] for (int i = 0; i < cols; ++i) { [BUGGY] for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } }  [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	replace	
27	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; [BUGGY] [BUGGY] for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } }  [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	169	169	1	add	
28	[BUG] [BUGGY] for (int j = i; j < cols; ++j) { [FE] ArrayIndexOutOfBoundsException [CONTEXT]  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { [BUGGY] for (int j = i; j < cols; ++j) { [BUGGY] double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	replace	
29	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT]  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { [BUGGY] [BUGGY] for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	170	170	1	add	
30	[BUG] [BUGGY] double sum = 0; [FE] ArrayIndexOutOfBoundsException [CONTEXT]  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { [BUGGY] double sum = 0; [BUGGY] for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	replace	
31	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT]  updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { [BUGGY] [BUGGY] double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	171	171	1	add	
32	[BUG] [BUGGY] for (int k = 0; k < max; k += cols) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; [BUGGY] for (int k = 0; k < max; k += cols) { [BUGGY] sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  return new RealMatrixImpl(jTj).inverse().getData(); [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	replace	
33	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; [BUGGY] [BUGGY] for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  return new RealMatrixImpl(jTj).inverse().getData(); [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	172	172	1	add	
34	[BUG] [BUGGY] sum += jacobian[k + i] * jacobian[k + j]; [FE] ArrayIndexOutOfBoundsException [CONTEXT]  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [BUGGY] sum += jacobian[k + i] * jacobian[k + j]; [BUGGY] } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  return new RealMatrixImpl(jTj).inverse().getData(); } catch (InvalidMatrixException ime) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	replace	
35	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT]  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [BUGGY] [BUGGY] sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {  return new RealMatrixImpl(jTj).inverse().getData(); } catch (InvalidMatrixException ime) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	173	173	1	add	
36	[BUG] [BUGGY] WeightedMeasurement[] wm = problem.getMeasurements(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { [BUGGY] WeightedMeasurement[] wm = problem.getMeasurements(); [BUGGY] double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	
37	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { [BUGGY] [BUGGY] WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	add	
38	[BUG] [BUGGY] double criterion = 0; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); [BUGGY] double criterion = 0; [BUGGY] for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	replace	
39	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); [BUGGY] [BUGGY] double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	128	128	1	add	
40	[BUG] [BUGGY] for (int i = 0; i < wm.length; ++i) { [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; [BUGGY] for (int i = 0; i < wm.length; ++i) { [BUGGY] double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	replace	
41	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; [BUGGY] [BUGGY] for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	129	129	1	add	
42	[BUG] [BUGGY] double residual = wm[i].getResidual(); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { [BUGGY] double residual = wm[i].getResidual(); [BUGGY] criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	replace	
43	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { [BUGGY] [BUGGY] double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	130	130	1	add	
44	[BUG] [BUGGY] criterion += wm[i].getWeight() * residual * residual; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); [BUGGY] criterion += wm[i].getWeight() * residual * residual; [BUGGY] } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	replace	
45	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); [BUGGY] [BUGGY] criterion += wm[i].getWeight() * residual * residual; } return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	131	131	1	add	
46	[BUG] [BUGGY] return Math.sqrt(criterion / wm.length); [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } [BUGGY] return Math.sqrt(criterion / wm.length); [BUGGY] } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	replace	
47	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public double getRMS(EstimationProblem problem) { WeightedMeasurement[] wm = problem.getMeasurements(); double criterion = 0; for (int i = 0; i < wm.length; ++i) { double residual = wm[i].getResidual(); criterion += wm[i].getWeight() * residual * residual; } [BUGGY] [BUGGY] return Math.sqrt(criterion / wm.length); } [CLASS] AbstractEstimator [METHOD] getRMS [RETURN_TYPE] double  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double cost criterion factor residual EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	133	133	1	add	
48	[BUG] [BUGGY] return costEvaluations; [FE] ArrayIndexOutOfBoundsException [CONTEXT] public final int getCostEvaluations() { [BUGGY] return costEvaluations; [BUGGY] } [CLASS] AbstractEstimator [METHOD] getCostEvaluations [RETURN_TYPE] int  [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost int cols costEvaluations jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.2886751345948129	57	57	1	replace	
49	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException [CONTEXT] public final int getCostEvaluations() { [BUGGY] [BUGGY] return costEvaluations; } [CLASS] AbstractEstimator [METHOD] getCostEvaluations [RETURN_TYPE] int  [VARIABLES] EstimatedParameter[] parameters boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost int cols costEvaluations jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.2886751345948129	57	57	1	add	
