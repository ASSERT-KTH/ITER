projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getMeasurements().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getAllParameters().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getRowCount().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73incrementJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73incrementJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73ensureCapacity(incrementJacobianEvaluations());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unabletocalculateavalue");
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("UnabletocalculatechiSquarevalue");
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unabletocomputeavalue");
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unknownvariable");
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162Arrays.sort(problem,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73NumberedMeasurement[]rows=getResults();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73NumberedMeasurement[]rows=getRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(parameters,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73Arrays.fill(parameters,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73NumberedMeasurement[]rows=Arrays.get(parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(jacobian,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(parameters,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(jacobian,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(fields,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(parameters,1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getWeight());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getHeight());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getWidth());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.toString());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getWidth()+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters[i],factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters,factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters,index+factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<rows;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<rowCount;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<cols;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<columns;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=wm.getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77Arrays.fill(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77Arrays.fill(parameters[i],null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77Arrays.fill(wm,0,parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=wm.getColumnIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79EstimatedParameter[]parameters=wm.getParameters(j,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[j],factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79EstimatedParameter[]parameters=wm.getParameters(j);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79EstimatedParameter[]parameters=wm.getParameters();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166rows=problem.getRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166rows=problem.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166row=problem.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166if(rows>0){for(inti=0;i<rows;++i){thrownewEstimationException("");}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166rows=problem.getRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=measurements[i];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=parameters[i];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=measurements[i]+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=measures[i];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75NumberedMeasurement[]rows=getRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75NumberedMeasurement[]rows=calculateRows(rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75WeightedMeasurement[]rows=calculateRows(rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75WeightedMeasurement[]rows=calculateRows(rows,columns);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75WeightedMeasurement[]rows=calculateRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162updateJacobian();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162checkState();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162updateJacobianEvaluations();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162checkLimits();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162ensureCapacity();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<cols;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<index;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<colls;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<columns;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintcols=problem.getColumns().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintcols=problem.getColumnSize();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintcols=problem.getColumns();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintcols=problem.getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor/wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(parameters[j],coefficient);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartial(parameters[j],index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getAllParameters().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumns().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getAllCols().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumnCount().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76Arrays.fill(parameters[i],index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76Arrays.fill(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76Arrays.fill(parameters[i],null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76Arrays.fill(parameters[i],0,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76Arrays.fill(parameters[i],index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74NumberedMeasurement[]rows=getRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74NumberedMeasurement[]rows=calculateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74NumberedMeasurement[]rows=Arrays.get(parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74NumberedMeasurement[]rows=calculateRows();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.sort(parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumns().length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumnsCount().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumns().length+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(parameters,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(parameters,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(jcobian,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78intcols=wm.getColumnCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78intcols=wm.getColumns();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters[i],null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78Arrays.fill(parameters[i],0,factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintrows=problem.getRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintrows=problem.getAllRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintindex=problem.getAllIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintindex=problem.getAllIndexes().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintindex=problem.getRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getFactor());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.abs(wm.getWeight());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getFixedMean());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73double[]rows=getRowValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=calculateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=getRowIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73System.arraycopy(parameters,0,parameters,rows,cols);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalEstimationProblemproblem=ime.getCovariance();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalEstimationProblemproblem=ime.getCost();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalEstimationProblemproblem=ime.getCovariable();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalEstimationProblemproblem=ime.getNode();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalEstimationProblemproblem=ime.findProblem(problem);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<rows.length;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,index=0;i<columns.length;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<parameters.length;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<columns.length;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<dimensions.length;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<variables.length;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73intincrementJacobianEvaluationsCounter();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73incrementJacobianEvaluations(0,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73incrementJacobianEvaluations(values);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=wm.getColumns();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=wm.getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=wm.getColumnSize();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getAllRows().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getAllRawParameters().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76EstimatedMeasurement[]parameters=calculateParameters(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76intcols=calculateColumnSize(i,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76EstimatedMeasurement[]parameters=calculateParams(i,index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75double[]rows=getRowValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75Arrays.fill(parameters,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75Number[]rows=getRowValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75introws=calculateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75Arrays.fill(parameters,0,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74double[]rows=getRowValues();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74introws=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74introws=calculateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=values[i];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162checkAlterParameters();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162checkInternal();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162clearResult();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162validate(problem.getResult());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getPartialValue(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getFactory();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getFieldType(j));
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],index+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],index);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],index+factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unabletoparse:"+problem.getName());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unabletoparse:"+problem.getClass().getName());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unabletoparse:"+problem.getType());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162System.err.println("Unexpectedparameter'"+problem.getName());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sqrt(wm.getValue());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sin(wm.getFixedMean());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77doublefactor=-Math.sin(wm.getWeight());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(data,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74Arrays.fill(data,0);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73double[]rows=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=this.maxCostEval.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73introws=this.maxCostEval.getRowIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73double[]rows=values[size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75introws=measurements.length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75Number[]rows=values[size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75double[]rows=values[size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75introws=measurements.size();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75introws=measurements.length-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=i+1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=Math.min(cols,i+1);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77intcols=Math.min(cols,i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java77wm.setIndex(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166finalintcols=problem.getColumnsCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<dimensions;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78for(intj=0;j<rows;++j){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],index+1]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79Arrays.fill(parameters[i],newDouble(factor));
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166row[][]sum=newdouble[rows][problem.getAllParameters().length];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166if(rows>0){for(inti=0;i<rows;++i){problem.getAllParameters().length;}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166if(rows>0){for(inti=0;i<rows;++i){problem.getMean();}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166if(rows>0){for(inti=0;i<rows;++i){problem.getMeasures().length;}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java166if(rows>0){for(inti=0;i<rows;++i){problem.setMean(i);}
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162problem.invalidate();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162problem=newEstimationProblem(null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162problem=newEstimationProblem(null,null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162problem=newEstimationProblem(this,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162problem=newEstimationProblem(this,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73checkInvariant();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java73updateJacobian(false);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getFieldType(i);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=i*wm.getPartial(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java79jacobian[index++]=factor*wm.getImpl(parameters[j]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165problem=newEstimationProblem(newInvalidMatrixException("");
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165problem=newEstimationProblem(null);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165problem=newEstimationProblem(null,parameters.length);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165problem=newEstimationProblem(this,parameters);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165problem=newEstimationProblem(newInvalidMean());
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java78intcols=Math.min(cols,factor);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76WeightedMeasurementwm=measurements[i]-1;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74double[]rows=getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74double[]rows=values[size()];
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74introws=this.maxCostEval.getRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74introws=this.maxCostEval+calculateRowCount();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java74introws=this.maxCostEval.getRowIndex();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162checkInvariant();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java162invalidate();
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76estimates[i]=calculateMean(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java76estimates[i]=calculateMeanParameter(parameters[i]);
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java165finalintrows=problem.getAllRangeParameters().length;
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,cols=0;i<rows;i++){
projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java75for(inti=0,asPath=0;i<rows;i++){
