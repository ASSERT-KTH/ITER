bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getAllParameters().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	final  int  rows  =  problem.getAllParameters().length;	final  int  rows  =  problem.getMeasurements().length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	18	1
2	[BUG]  [BUGGY]  final  int  rows  =  problem.getAllParameters().length;  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getAllParameters().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getAllParameters().length;	final  int  rows  =  problem.getMeasurements().length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	18	1	replace
2	[BUG]  [BUGGY]  final  int  rows  =  problem.getRowCount().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getRowCount().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRowCount().length;	final  int  rows  =  problem.getMeasurements().length;  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
4	[BUG]  [BUGGY]  final  int  rows  =  problem.getRows().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getRows().length;	final  int  rows  =  problem.getMeasurements().length;  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	  	final  int  rows  =  problem.getMeasurements().length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	18	1
6	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	  	final  int  rows  =  problem.getMeasurements().length;  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	18	1	replace
11	[BUG]  [BUGGY]  incrementJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  incrementJacobianEvaluations();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	incrementJacobianEvaluations();	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  updateJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  updateJacobianEvaluations();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobianEvaluations();	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  ensureCapacity(incrementJacobianEvaluations());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  ensureCapacity(incrementJacobianEvaluations());  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	ensureCapacity(incrementJacobianEvaluations());	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	  	incrementJacobianEvaluationsCounter();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	1	1
16	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	  	incrementJacobianEvaluationsCounter();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	1	1	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  calculate  a  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	    System.err.println( "Unable  to  calculate  a  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1
22	[BUG]  [BUGGY]    System.err.println( "Unable  to  calculate  a  value ");  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  calculate  a  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  calculate  a  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1	add
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  calculate  chiSquare  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	    System.err.println( "Unable  to  calculate  chiSquare  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1
23	[BUG]  [BUGGY]    System.err.println( "Unable  to  calculate  chiSquare  value ");  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  calculate  chiSquare  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  calculate  chiSquare  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1	add
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  compute  a  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	    System.err.println( "Unable  to  compute  a  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1
24	[BUG]  [BUGGY]    System.err.println( "Unable  to  compute  a  value ");  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  compute  a  value ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  compute  a  value ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unknown  variable ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	    System.err.println( "Unknown  variable ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1
25	[BUG]  [BUGGY]    System.err.println( "Unknown  variable ");  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unknown  variable ");  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unknown  variable ");		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1	add
25	[BUG]  [BUGGY]    Arrays.sort(problem,  parameters);  [CE]  no  suitable  method  found  for  sort(EstimationProblem,EstimatedParameter[])  [CONTEXT]  throws  EstimationException  {    [BUGGY]    Arrays.sort(problem,  parameters);  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    Arrays.sort(problem,  parameters);		non-compiled	[CE]  no  suitable  method  found  for  sort(EstimationProblem,EstimatedParameter[])	17	None	add
31	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  getResults();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    NumberedMeasurement[]  rows  =  getResults();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    NumberedMeasurement[]  rows  =  getResults();		non-compiled	[CE]  cannot  find  symbol	2	None	add
32	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    NumberedMeasurement[]  rows  =  getRows();		non-compiled	[CE]  cannot  find  symbol	2	None	add
33	[BUG]  [BUGGY]    Arrays.fill(parameters,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    Arrays.fill(parameters,  0,  parameters.length);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    Arrays.fill(parameters,  0,  parameters.length);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)	2	None	add
34	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    Arrays.fill(parameters,  null);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	    Arrays.fill(parameters,  null);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	2	1
35	[BUG]  [BUGGY]    Arrays.fill(parameters,  null);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    Arrays.fill(parameters,  null);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    Arrays.fill(parameters,  null);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	2	1	add
35	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  Arrays.get(parameters);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    NumberedMeasurement[]  rows  =  Arrays.get(parameters);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    NumberedMeasurement[]  rows  =  Arrays.get(parameters);		non-compiled	[CE]  cannot  find  symbol	2	None	add
41	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(parameters,  0);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayStoreException  testBoundParameters	3	1
42	[BUG]  [BUGGY]  Arrays.fill(parameters,  0);  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(parameters,  0);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayStoreException  testBoundParameters	3	1	replace
42	[BUG]  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(double[],int,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  0,  parameters.length);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jacobian,  0,  parameters.length);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(double[],int,int)	3	None	replace
43	[BUG]  [BUGGY]  Arrays.fill(fields,  0);  [CE]  cannot  find  symbol  fields  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(fields,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(fields,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  fields	3	None	replace
44	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  1);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(parameters,  1);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayStoreException  testBoundParameters	3	1
45	[BUG]  [BUGGY]  Arrays.fill(parameters,  1);  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  1);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(parameters,  1);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayStoreException  testBoundParameters	3	1	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	  	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	3	1
46	[BUG]  [BUGGY]    [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	  	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	3	1	replace
51	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getHeight());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getHeight());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getHeight());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
53	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.toString());  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.toString());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.toString());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	9	None	replace
54	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth()  +  1);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWidth()  +  1);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getWidth()  +  1);	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  factor  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	  	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol  factor	9	None	replace
61	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  factor);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters[i],  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters[i],  factor);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)	12	None	add
62	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters,  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	    Arrays.fill(parameters,  factor);		compilable	  [FE]  ArrayStoreException  testBoundParameters	12	1
63	[BUG]  [BUGGY]    Arrays.fill(parameters,  factor);  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters,  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters,  factor);		compilable	  [FE]  ArrayStoreException  testBoundParameters	12	1	add
63	[BUG]  [BUGGY]    Arrays.fill(parameters[i]);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters[i]);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters[i]);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter)	12	None	add
65	[BUG]  [BUGGY]  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters,  index  +  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	    Arrays.fill(parameters,  index  +  factor);		compilable	  [FE]  ArrayStoreException  testBoundParameters	12	1
66	[BUG]  [BUGGY]    Arrays.fill(parameters,  index  +  factor);  [FE]  ArrayStoreException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters,  index  +  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters,  index  +  factor);		compilable	  [FE]  ArrayStoreException  testBoundParameters	12	1	add
72	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  rowCount;  i++)  {  [CE]  cannot  find  symbol  rowCount  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  rowCount;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  rowCount;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  rowCount	5	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  cols;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	for(int  i  =  0,  index  =  0;  i  <  cols;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	5	1
74	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  cols;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  cols;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  cols;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	5	1	replace
74	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  columns;  i++)  {  [CE]  cannot  find  symbol  columns  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  columns;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  columns;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  columns	5	None	replace
75	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	  	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
81	[BUG]  [BUGGY]    int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  wm.getColumnCount();  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  wm.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	10	None	add
82	[BUG]  [BUGGY]    Arrays.fill(parameters[i]);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    Arrays.fill(parameters[i]);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    Arrays.fill(parameters[i]);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter)	10	None	add
83	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  null);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    Arrays.fill(parameters[i],  null);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    Arrays.fill(parameters[i],  null);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)	10	None	add
84	[BUG]  [BUGGY]    Arrays.fill(wm,  0,  parameters[i]);  [CE]  no  suitable  method  found  for  fill(WeightedMeasurement,int,EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    Arrays.fill(wm,  0,  parameters[i]);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    Arrays.fill(wm,  0,  parameters[i]);		non-compiled	[CE]  no  suitable  method  found  for  fill(WeightedMeasurement,int,EstimatedParameter)	10	None	add
85	[BUG]  [BUGGY]    int  cols  =  wm.getColumnIndex();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  wm.getColumnIndex();  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  wm.getColumnIndex();		non-compiled	[CE]  cannot  find  symbol	10	None	add
91	[BUG]  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters(j,  index);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters(j,  index);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    EstimatedParameter[]  parameters  =  wm.getParameters(j,  index);		non-compiled	[CE]  cannot  find  symbol	14	None	add
92	[BUG]  [BUGGY]    Arrays.fill(parameters[j],  factor);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[j],  factor);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[j],  factor);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)	14	None	add
93	[BUG]  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters(j);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters(j);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    EstimatedParameter[]  parameters  =  wm.getParameters(j);		non-compiled	[CE]  cannot  find  symbol	14	None	add
94	[BUG]  [BUGGY]    Arrays.fill(parameters[j]);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[j]);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[j]);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter)	14	None	add
95	[BUG]  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    EstimatedParameter[]  parameters  =  wm.getParameters();  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    EstimatedParameter[]  parameters  =  wm.getParameters();		non-compiled	[CE]  cannot  find  symbol	14	None	add
101	[BUG]  [BUGGY]    rows  =  problem.getRows().length;  [CE]  cannot  assign  a  value  to  final  variable  rows  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    rows  =  problem.getRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    rows  =  problem.getRows().length;		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rows	21	None	add
102	[BUG]  [BUGGY]    rows  =  problem.getRowCount();  [CE]  cannot  assign  a  value  to  final  variable  rows  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    rows  =  problem.getRowCount();  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    rows  =  problem.getRowCount();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rows	21	None	add
103	[BUG]  [BUGGY]    row  =  problem.getRowCount();  [CE]  cannot  find  symbol  row  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    row  =  problem.getRowCount();  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    row  =  problem.getRowCount();		non-compiled	[CE]  cannot  find  symbol  row	21	None	add
104	[BUG]  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  throw  new  EstimationException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  throw  new  EstimationException( " ");  }  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  throw  new  EstimationException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
105	[BUG]  [BUGGY]    rows  =  problem.getRows();  [CE]  cannot  assign  a  value  to  final  variable  rows  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    rows  =  problem.getRows();  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    rows  =  problem.getRows();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  rows	21	None	add
112	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  parameters[i];  [CE]  incompatible  types  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  parameters[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  parameters[i];	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  incompatible  types	7	None	replace
113	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i]  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i]  +  1;  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i]  +  1;	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
114	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measures[i];  [CE]  cannot  find  symbol  measures  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measures[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measures[i];	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  cannot  find  symbol  measures	7	None	replace
115	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  wm  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	  	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  cannot  find  symbol  wm	7	None	replace
121	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    NumberedMeasurement[]  rows  =  getRows();		non-compiled	[CE]  cannot  find  symbol	6	None	add
122	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRows(rows,  cols);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRows(rows,  cols);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    NumberedMeasurement[]  rows  =  calculateRows(rows,  cols);		non-compiled	[CE]  cannot  find  symbol	6	None	add
123	[BUG]  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows(rows,  cols);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows(rows,  cols);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    WeightedMeasurement[]  rows  =  calculateRows(rows,  cols);		non-compiled	[CE]  cannot  find  symbol	6	None	add
124	[BUG]  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows(rows,  columns);  [CE]  cannot  find  symbol  columns  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows(rows,  columns);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    WeightedMeasurement[]  rows  =  calculateRows(rows,  columns);		non-compiled	[CE]  cannot  find  symbol  columns	6	None	add
125	[BUG]  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    WeightedMeasurement[]  rows  =  calculateRows();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    WeightedMeasurement[]  rows  =  calculateRows();		non-compiled	[CE]  cannot  find  symbol	6	None	add
131	[BUG]  [BUGGY]  checkState();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  checkState();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	checkState();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
132	[BUG]  [BUGGY]  updateJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  updateJacobianEvaluations();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	updateJacobianEvaluations();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
133	[BUG]  [BUGGY]  checkLimits();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  checkLimits();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	checkLimits();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
134	[BUG]  [BUGGY]  ensureCapacity();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  ensureCapacity();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	ensureCapacity();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
142	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  index;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  index;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  index;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1	replace
143	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  colls;  ++j)  {  [CE]  cannot  find  symbol  colls  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  colls;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  colls;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  colls	11	None	replace
144	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [CE]  cannot  find  symbol  columns  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  columns;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  columns;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  columns	11	None	replace
151	[BUG]  [BUGGY]    final  int  cols  =  problem.getColumns().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  int  cols  =  problem.getColumns().length;  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  int  cols  =  problem.getColumns().length;		non-compiled	[CE]  cannot  find  symbol	19	None	add
152	[BUG]  [BUGGY]    final  int  rows  =  problem.getRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  int  rows  =  problem.getRowCount();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  int  rows  =  problem.getRowCount();		non-compiled	[CE]  cannot  find  symbol	19	None	add
153	[BUG]  [BUGGY]    final  int  cols  =  problem.getColumnSize();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  int  cols  =  problem.getColumnSize();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  int  cols  =  problem.getColumnSize();		non-compiled	[CE]  cannot  find  symbol	19	None	add
154	[BUG]  [BUGGY]    final  int  cols  =  problem.getColumns();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  int  cols  =  problem.getColumns();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  int  cols  =  problem.getColumns();		non-compiled	[CE]  cannot  find  symbol	19	None	add
155	[BUG]  [BUGGY]    final  int  cols  =  problem.getColumnsCount();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  int  cols  =  problem.getColumnsCount();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  int  cols  =  problem.getColumnsCount();		non-compiled	[CE]  cannot  find  symbol	19	None	add
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	13	1
163	[BUG]  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  /  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	13	1	replace
163	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  coefficient);  [CE]  cannot  find  symbol  coefficient  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  coefficient);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  coefficient);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol  coefficient	13	None	replace
164	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  index);  [CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  index);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j],  index);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  method  getPartial  in  class  WeightedMeasurement  cannot  be  applied  to  given  types;	13	None	replace
171	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumns().length;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns().length;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
172	[BUG]  [BUGGY]  final  int  cols  =  problem.getAllCols().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getAllCols().length;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getAllCols().length;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
174	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumnCount().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumnCount().length;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumnCount().length;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
181	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    Arrays.fill(parameters[i],  index);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    Arrays.fill(parameters[i],  index);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)	8	None	add
182	[BUG]  [BUGGY]    Arrays.fill(parameters[i]);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    Arrays.fill(parameters[i]);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    Arrays.fill(parameters[i]);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter)	8	None	add
183	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  null);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    Arrays.fill(parameters[i],  null);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    Arrays.fill(parameters[i],  null);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)	8	None	add
184	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  0,  index);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    Arrays.fill(parameters[i],  0,  index);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    Arrays.fill(parameters[i],  0,  index);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int,int)	8	None	add
185	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index  +  1);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    Arrays.fill(parameters[i],  index  +  1);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    Arrays.fill(parameters[i],  index  +  1);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)	8	None	add
191	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    NumberedMeasurement[]  rows  =  getRows();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    NumberedMeasurement[]  rows  =  getRows();		non-compiled	[CE]  cannot  find  symbol	4	None	add
192	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    NumberedMeasurement[]  rows  =  calculateRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
193	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  Arrays.get(parameters);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    NumberedMeasurement[]  rows  =  Arrays.get(parameters);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    NumberedMeasurement[]  rows  =  Arrays.get(parameters);		non-compiled	[CE]  cannot  find  symbol	4	None	add
194	[BUG]  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRows();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    NumberedMeasurement[]  rows  =  calculateRows();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    NumberedMeasurement[]  rows  =  calculateRows();		non-compiled	[CE]  cannot  find  symbol	4	None	add
195	[BUG]  [BUGGY]  [FE]  ClassCastException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    Arrays.sort(parameters);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	    Arrays.sort(parameters);		compilable	  [FE]  ClassCastException  testBoundParameters	4	1
196	[BUG]  [BUGGY]    Arrays.sort(parameters);  [FE]  ClassCastException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    Arrays.sort(parameters);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    Arrays.sort(parameters);		compilable	  [FE]  ClassCastException  testBoundParameters	4	1	add
2	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumns().length  -  1;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns().length  -  1;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
3	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumnsCount().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumnsCount().length;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumnsCount().length;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
4	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumns().length  +  1;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumns().length  +  1;  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumns().length  +  1;	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
22	[BUG]  [BUGGY]  Arrays.fill(parameters,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  0,  parameters.length);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(parameters,  0,  parameters.length);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)	3	None	replace
23	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  null);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	Arrays.fill(parameters,  null);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	3	1
24	[BUG]  [BUGGY]  Arrays.fill(parameters,  null);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(parameters,  null);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(parameters,  null);	Arrays.fill(jacobian,  0);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	3	1	replace
24	[BUG]  [BUGGY]  Arrays.fill(jcobian,  0,  parameters.length);  [CE]  cannot  find  symbol  jcobian  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jcobian,  0,  parameters.length);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(jcobian,  0,  parameters.length);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  jcobian	3	None	replace
41	[BUG]  [BUGGY]    int  cols  =  wm.getColumnCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    int  cols  =  wm.getColumnCount();  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    int  cols  =  wm.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	12	None	add
42	[BUG]  [BUGGY]    int  cols  =  wm.getColumns();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    int  cols  =  wm.getColumns();  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    int  cols  =  wm.getColumns();		non-compiled	[CE]  cannot  find  symbol	12	None	add
43	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  null);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters[i],  null);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters[i],  null);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)	12	None	add
45	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  0,  factor);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int,double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    Arrays.fill(parameters[i],  0,  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    Arrays.fill(parameters[i],  0,  factor);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int,double)	12	None	add
61	[BUG]  [BUGGY]    final  int  rows  =  problem.getRows().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    final  int  rows  =  problem.getRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    final  int  rows  =  problem.getRows().length;		non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
62	[BUG]  [BUGGY]    final  int  rows  =  problem.getAllRows().length;  [CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    final  int  rows  =  problem.getAllRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    final  int  rows  =  problem.getAllRows().length;		non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances(EstimationProblem)	21	None	add
63	[BUG]  [BUGGY]    final  int  index  =  problem.getAllIndex();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    final  int  index  =  problem.getAllIndex();  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    final  int  index  =  problem.getAllIndex();		non-compiled	[CE]  cannot  find  symbol	21	None	add
64	[BUG]  [BUGGY]    final  int  index  =  problem.getAllIndexes().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    final  int  index  =  problem.getAllIndexes().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    final  int  index  =  problem.getAllIndexes().length;		non-compiled	[CE]  cannot  find  symbol	21	None	add
65	[BUG]  [BUGGY]    final  int  index  =  problem.getRows().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    final  int  index  =  problem.getRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    final  int  index  =  problem.getRows().length;		non-compiled	[CE]  cannot  find  symbol	21	None	add
81	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFactor());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFactor());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFactor());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
82	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.abs(wm.getWeight());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.abs(wm.getWeight());	double  factor  =  -Math.sqrt(wm.getWeight());  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	9	1
83	[BUG]  [BUGGY]  double  factor  =  -Math.abs(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.abs(wm.getWeight());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.abs(wm.getWeight());	double  factor  =  -Math.sqrt(wm.getWeight());  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	9	1	replace
84	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFixedMean());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getFixedMean());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getFixedMean());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
101	[BUG]  [BUGGY]    double[]  rows  =  getRowValues();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    double[]  rows  =  getRowValues();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    double[]  rows  =  getRowValues();		non-compiled	[CE]  cannot  find  symbol	2	None	add
102	[BUG]  [BUGGY]    int  rows  =  getRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    int  rows  =  getRowCount();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    int  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	2	None	add
103	[BUG]  [BUGGY]    int  rows  =  calculateRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    int  rows  =  calculateRowCount();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    int  rows  =  calculateRowCount();		non-compiled	[CE]  cannot  find  symbol	2	None	add
104	[BUG]  [BUGGY]    int  rows  =  getRowIndex();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    int  rows  =  getRowIndex();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    int  rows  =  getRowIndex();		non-compiled	[CE]  cannot  find  symbol	2	None	add
105	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    System.arraycopy(parameters,  0,  parameters,  rows,  cols);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	    System.arraycopy(parameters,  0,  parameters,  rows,  cols);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	2	1
106	[BUG]  [BUGGY]    System.arraycopy(parameters,  0,  parameters,  rows,  cols);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    System.arraycopy(parameters,  0,  parameters,  rows,  cols);  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    System.arraycopy(parameters,  0,  parameters,  rows,  cols);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	2	1	add
121	[BUG]  [BUGGY]    final  EstimationProblem  problem  =  ime.getCovariance();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  EstimationProblem  problem  =  ime.getCovariance();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  EstimationProblem  problem  =  ime.getCovariance();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	19	None	add
122	[BUG]  [BUGGY]    final  EstimationProblem  problem  =  ime.getCost();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  EstimationProblem  problem  =  ime.getCost();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  EstimationProblem  problem  =  ime.getCost();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	19	None	add
123	[BUG]  [BUGGY]    final  EstimationProblem  problem  =  ime.getCovariable();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  EstimationProblem  problem  =  ime.getCovariable();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  EstimationProblem  problem  =  ime.getCovariable();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	19	None	add
124	[BUG]  [BUGGY]    final  EstimationProblem  problem  =  ime.getNode();  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  EstimationProblem  problem  =  ime.getNode();  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  EstimationProblem  problem  =  ime.getNode();		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	19	None	add
125	[BUG]  [BUGGY]    final  EstimationProblem  problem  =  ime.findProblem(problem);  [CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    final  EstimationProblem  problem  =  ime.findProblem(problem);  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    final  EstimationProblem  problem  =  ime.findProblem(problem);		non-compiled	[CE]  variable  problem  is  already  defined  in  method  getCovariances(EstimationProblem)	19	None	add
141	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  rows.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  rows.length;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  rows.length;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  columns.length;  i++)  {  [CE]  cannot  find  symbol  columns  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  index  =  0;  i  <  columns.length;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  index  =  0;  i  <  columns.length;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  columns	5	None	replace
161	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  parameters.length;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1
162	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  parameters.length;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  parameters.length;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1	replace
162	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  columns.length;  ++j)  {  [CE]  cannot  find  symbol  columns  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  columns.length;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  columns.length;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  columns	11	None	replace
163	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  dimensions.length;  ++j)  {  [CE]  cannot  find  symbol  dimensions  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  dimensions.length;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  dimensions.length;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  dimensions	11	None	replace
164	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++j)  {  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  variables.length;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  variables.length;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
182	[BUG]  [BUGGY]  int  incrementJacobianEvaluationsCounter();  [CE]  ';'  expected  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  int  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	int  incrementJacobianEvaluationsCounter();	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  ';'  expected	1	None	replace
183	[BUG]  [BUGGY]  incrementJacobianEvaluations(0,  0);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  incrementJacobianEvaluations(0,  0);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	incrementJacobianEvaluations(0,  0);	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
184	[BUG]  [BUGGY]  incrementJacobianEvaluations(values);  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  incrementJacobianEvaluations(values);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	incrementJacobianEvaluations(values);	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol  values	1	None	replace
201	[BUG]  [BUGGY]    int  cols  =  wm.getColumns();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  wm.getColumns();  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  wm.getColumns();		non-compiled	[CE]  cannot  find  symbol	10	None	add
203	[BUG]  [BUGGY]    int  cols  =  wm.getColumnsCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  wm.getColumnsCount();  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  wm.getColumnsCount();		non-compiled	[CE]  cannot  find  symbol	10	None	add
204	[BUG]  [BUGGY]    int  cols  =  wm.getColumnSize();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  wm.getColumnSize();  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  wm.getColumnSize();		non-compiled	[CE]  cannot  find  symbol	10	None	add
221	[BUG]  [BUGGY]  final  int  rows  =  problem.getAllRows().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getAllRows().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getAllRows().length;	final  int  rows  =  problem.getMeasurements().length;  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
224	[BUG]  [BUGGY]  final  int  rows  =  problem.getAllRawParameters().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getAllRawParameters().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getAllRawParameters().length;	final  int  rows  =  problem.getMeasurements().length;  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
243	[BUG]  [BUGGY]    EstimatedMeasurement[]  parameters  =  calculateParameters(i);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    EstimatedMeasurement[]  parameters  =  calculateParameters(i);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    EstimatedMeasurement[]  parameters  =  calculateParameters(i);		non-compiled	[CE]  cannot  find  symbol	8	None	add
244	[BUG]  [BUGGY]    int  cols  =  calculateColumnSize(i,  index);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    int  cols  =  calculateColumnSize(i,  index);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    int  cols  =  calculateColumnSize(i,  index);		non-compiled	[CE]  cannot  find  symbol	8	None	add
245	[BUG]  [BUGGY]    EstimatedMeasurement[]  parameters  =  calculateParams(i,  index);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    EstimatedMeasurement[]  parameters  =  calculateParams(i,  index);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    EstimatedMeasurement[]  parameters  =  calculateParams(i,  index);		non-compiled	[CE]  cannot  find  symbol	8	None	add
261	[BUG]  [BUGGY]    double[]  rows  =  getRowValues();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    double[]  rows  =  getRowValues();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    double[]  rows  =  getRowValues();		non-compiled	[CE]  cannot  find  symbol	6	None	add
262	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    Arrays.fill(parameters,  null);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	    Arrays.fill(parameters,  null);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1
263	[BUG]  [BUGGY]    Arrays.fill(parameters,  null);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    Arrays.fill(parameters,  null);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    Arrays.fill(parameters,  null);		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1	add
263	[BUG]  [BUGGY]    Number[]  rows  =  getRowValues();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    Number[]  rows  =  getRowValues();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    Number[]  rows  =  getRowValues();		non-compiled	[CE]  cannot  find  symbol	6	None	add
264	[BUG]  [BUGGY]    int  rows  =  calculateRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  calculateRowCount();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    int  rows  =  calculateRowCount();		non-compiled	[CE]  cannot  find  symbol	6	None	add
265	[BUG]  [BUGGY]    Arrays.fill(parameters,  0,  parameters.length);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    Arrays.fill(parameters,  0,  parameters.length);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    Arrays.fill(parameters,  0,  parameters.length);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter[],int,int)	6	None	add
281	[BUG]  [BUGGY]    double[]  rows  =  getRowValues();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    double[]  rows  =  getRowValues();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    double[]  rows  =  getRowValues();		non-compiled	[CE]  cannot  find  symbol	4	None	add
283	[BUG]  [BUGGY]    int  rows  =  getRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  getRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
284	[BUG]  [BUGGY]    int  rows  =  calculateRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  calculateRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  calculateRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
304	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  values[i];  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  values[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  values[i];	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
321	[BUG]  [BUGGY]  checkAlterParameters();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  checkAlterParameters();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	checkAlterParameters();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
322	[BUG]  [BUGGY]  checkInternal();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  checkInternal();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	checkInternal();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
323	[BUG]  [BUGGY]  clearResult();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  clearResult();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	clearResult();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
324	[BUG]  [BUGGY]  validate(problem.getResult());  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  validate(problem.getResult());  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	validate(problem.getResult());	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
341	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartialValue(parameters[j]);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartialValue(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getPartialValue(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
343	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFactory();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFactory();  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getFactory();	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
344	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFieldType(j));  [CE]  ';'  expected  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFieldType(j));  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getFieldType(j));	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  ';'  expected	13	None	replace
361	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index  +  1);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  index  +  1);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  index  +  1);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)	14	None	add
362	[BUG]  [BUGGY]    Arrays.fill(parameters[i]);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i]);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i]);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter)	14	None	add
363	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  index);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  index);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,int)	14	None	add
364	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index  +  factor);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  index  +  factor);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  index  +  factor);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)	14	None	add
381	[BUG]  [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getName());  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getName());  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  parse: "  +  problem.getName());		non-compiled	[CE]  cannot  find  symbol	17	None	add
382	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getClass().getName());  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	    System.err.println( "Unable  to  parse: "  +  problem.getClass().getName());		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1
383	[BUG]  [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getClass().getName());  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getClass().getName());  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  parse: "  +  problem.getClass().getName());		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	17	1	add
383	[BUG]  [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getType());  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unable  to  parse: "  +  problem.getType());  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unable  to  parse: "  +  problem.getType());		non-compiled	[CE]  cannot  find  symbol	17	None	add
385	[BUG]  [BUGGY]    System.err.println( "Unexpected  parameter  ' "  +  problem.getName());  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]    System.err.println( "Unexpected  parameter  ' "  +  problem.getName());  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    System.err.println( "Unexpected  parameter  ' "  +  problem.getName());		non-compiled	[CE]  cannot  find  symbol	17	None	add
2	[BUG]  [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sqrt(wm.getValue());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sqrt(wm.getValue());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  double  factor  =  -Math.sin(wm.getFixedMean());  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sin(wm.getFixedMean());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sin(wm.getFixedMean());	double  factor  =  -Math.sqrt(wm.getWeight());  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sin(wm.getWeight());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	double  factor  =  -Math.sin(wm.getWeight());	double  factor  =  -Math.sqrt(wm.getWeight());  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	9	1
5	[BUG]  [BUGGY]  double  factor  =  -Math.sin(wm.getWeight());  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]  double  factor  =  -Math.sin(wm.getWeight());  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	double  factor  =  -Math.sin(wm.getWeight());	double  factor  =  -Math.sqrt(wm.getWeight());  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	9	1	replace
32	[BUG]  [BUGGY]  Arrays.fill(data,  null);  [CE]  cannot  find  symbol  data  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(data,  null);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(data,  null);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  data	3	None	replace
34	[BUG]  [BUGGY]  Arrays.fill(data,  0);  [CE]  cannot  find  symbol  data  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]  Arrays.fill(data,  0);  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	Arrays.fill(data,  0);	Arrays.fill(jacobian,  0);  	non-compiled	[CE]  cannot  find  symbol  data	3	None	replace
61	[BUG]  [BUGGY]    double[]  rows  =  getRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    double[]  rows  =  getRowCount();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    double[]  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	2	None	add
62	[BUG]  [BUGGY]    int  rows  =  this.maxCostEval.getRowCount();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    int  rows  =  this.maxCostEval.getRowCount();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    int  rows  =  this.maxCostEval.getRowCount();		non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
63	[BUG]  [BUGGY]    int  rows  =  this.maxCostEval.getRowIndex();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    int  rows  =  this.maxCostEval.getRowIndex();  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    int  rows  =  this.maxCostEval.getRowIndex();		non-compiled	[CE]  int  cannot  be  dereferenced	2	None	add
64	[BUG]  [BUGGY]    double[]  rows  =  values[size()  ];  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]    double[]  rows  =  values[size()  ];  [BUGGY]  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	    double[]  rows  =  values[size()  ];		non-compiled	[CE]  cannot  find  symbol  values	2	None	add
91	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  measurements.length;  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	    int  rows  =  measurements.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1
92	[BUG]  [BUGGY]    int  rows  =  measurements.length;  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  measurements.length;  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    int  rows  =  measurements.length;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1	add
92	[BUG]  [BUGGY]    Number[]  rows  =  values[size()  ];  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    Number[]  rows  =  values[size()  ];  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    Number[]  rows  =  values[size()  ];		non-compiled	[CE]  cannot  find  symbol  values	6	None	add
93	[BUG]  [BUGGY]    double[]  rows  =  values[size()  ];  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    double[]  rows  =  values[size()  ];  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    double[]  rows  =  values[size()  ];		non-compiled	[CE]  cannot  find  symbol  values	6	None	add
94	[BUG]  [BUGGY]    int  rows  =  measurements.size();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  measurements.size();  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    int  rows  =  measurements.size();		non-compiled	[CE]  cannot  find  symbol	6	None	add
95	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  measurements.length  -  1;  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	    int  rows  =  measurements.length  -  1;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1
96	[BUG]  [BUGGY]    int  rows  =  measurements.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]    int  rows  =  measurements.length  -  1;  [BUGGY]  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	    int  rows  =  measurements.length  -  1;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	6	1	add
122	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  i  +  1;  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	    int  cols  =  i  +  1;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	10	1
123	[BUG]  [BUGGY]    int  cols  =  i  +  1;  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  i  +  1;  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  i  +  1;		compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	10	1	add
123	[BUG]  [BUGGY]    int  cols  =  Math.min(cols,  i  +  1);  [CE]  variable  cols  might  not  have  been  initialized  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  Math.min(cols,  i  +  1);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  Math.min(cols,  i  +  1);		non-compiled	[CE]  variable  cols  might  not  have  been  initialized	10	None	add
124	[BUG]  [BUGGY]    int  cols  =  Math.min(cols,  i);  [CE]  variable  cols  might  not  have  been  initialized  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    int  cols  =  Math.min(cols,  i);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    int  cols  =  Math.min(cols,  i);		non-compiled	[CE]  variable  cols  might  not  have  been  initialized	10	None	add
125	[BUG]  [BUGGY]    wm.setIndex(i);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  [BUGGY]    wm.setIndex(i);  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	    wm.setIndex(i);		non-compiled	[CE]  cannot  find  symbol	10	None	add
154	[BUG]  [BUGGY]  final  int  cols  =  problem.getColumnsCount();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]  final  int  cols  =  problem.getColumnsCount();  [BUGGY]  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	final  int  cols  =  problem.getColumnsCount();	final  int  cols  =  problem.getAllParameters().length;  	non-compiled	[CE]  cannot  find  symbol	20	None	replace
182	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  dimensions;  ++j)  {  [CE]  cannot  find  symbol  dimensions  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  dimensions;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  dimensions;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	non-compiled	[CE]  cannot  find  symbol  dimensions	11	None	replace
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	for(int  j  =  0;  j  <  rows;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1
185	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]  for(int  j  =  0;  j  <  rows;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	for(int  j  =  0;  j  <  rows;  ++j)  {	for  (int  j  =  0;  j  <  cols;  ++j)  {  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	11	1	replace
212	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  index  +  1]);  [CE]  ')'  expected  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  index  +  1]);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  index  +  1]);		non-compiled	[CE]  ')'  expected	14	None	add
213	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  null);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  null);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  null);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,<null>)	14	None	add
214	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  factor);  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  factor);  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  factor);		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,double)	14	None	add
215	[BUG]  [BUGGY]    Arrays.fill(parameters[i],  new  Double(factor));  [CE]  no  suitable  method  found  for  fill(EstimatedParameter,Double)  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]    Arrays.fill(parameters[i],  new  Double(factor));  [BUGGY]  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	    Arrays.fill(parameters[i],  new  Double(factor));		non-compiled	[CE]  no  suitable  method  found  for  fill(EstimatedParameter,Double)	14	None	add
241	[BUG]  [BUGGY]    row[][]  sum  =  new  double[rows][problem.getAllParameters().length];  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    row[][]  sum  =  new  double[rows][problem.getAllParameters().length];  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    row[][]  sum  =  new  double[rows][problem.getAllParameters().length];		non-compiled	[CE]  cannot  find  symbol	21	None	add
242	[BUG]  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getAllParameters().length;  }  [CE]  not  a  statement  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getAllParameters().length;  }  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getAllParameters().length;  }		non-compiled	[CE]  not  a  statement	21	None	add
243	[BUG]  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMean();  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMean();  }  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMean();  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
244	[BUG]  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMeasures().length;  }  [CE]  not  a  statement  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMeasures().length;  }  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.getMeasures().length;  }		non-compiled	[CE]  not  a  statement	21	None	add
245	[BUG]  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.setMean(i);  }  [CE]  illegal  start  of  expression  [CONTEXT]  throws  EstimationException  {  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  [BUGGY]    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.setMean(i);  }  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	    if(rows  >  0)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  problem.setMean(i);  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
271	[BUG]  [BUGGY]    problem.invalidate();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]    problem.invalidate();  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    problem.invalidate();		non-compiled	[CE]  cannot  find  symbol	17	None	add
272	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(null);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {    [BUGGY]    problem  =  new  EstimationProblem(null);  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    problem  =  new  EstimationProblem(null);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	17	None	add
273	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(null,  null);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {    [BUGGY]    problem  =  new  EstimationProblem(null,  null);  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    problem  =  new  EstimationProblem(null,  null);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	17	None	add
274	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(this,  parameters.length);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {    [BUGGY]    problem  =  new  EstimationProblem(this,  parameters.length);  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    problem  =  new  EstimationProblem(this,  parameters.length);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	17	None	add
275	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(this,  parameters);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {    [BUGGY]    problem  =  new  EstimationProblem(this,  parameters);  [BUGGY]  updateJacobian();  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	    problem  =  new  EstimationProblem(this,  parameters);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	17	None	add
302	[BUG]  [BUGGY]  checkInvariant();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  checkInvariant();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	checkInvariant();	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
303	[BUG]  [BUGGY]  updateJacobian(false);  [CE]  method  updateJacobian  in  class  AbstractEstimator  cannot  be  applied  to  given  types;  [CONTEXT]  protected  void  updateJacobian()  {  [BUGGY]  updateJacobian(false);  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	updateJacobian(false);	incrementJacobianEvaluationsCounter();  	non-compiled	[CE]  method  updateJacobian  in  class  AbstractEstimator  cannot  be  applied  to  given  types;	1	None	replace
332	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFieldType(i);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getFieldType(i);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getFieldType(i);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
333	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  i  *  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	jacobian[index++]  =  i  *  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	13	1
334	[BUG]  [BUGGY]  jacobian[index++]  =  i  *  wm.getPartial(parameters[j]);  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  i  *  wm.getPartial(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  i  *  wm.getPartial(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	compilable	  [FE]  ArrayIndexOutOfBoundsException  testBoundParameters	13	1	replace
334	[BUG]  [BUGGY]  jacobian[index++]  =  factor  *  wm.getImpl(parameters[j]);  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  [BUGGY]  jacobian[index++]  =  factor  *  wm.getImpl(parameters[j]);  [BUGGY]  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	jacobian[index++]  =  factor  *  wm.getImpl(parameters[j]);	jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
361	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(new  InvalidMatrixException( " ");  [CE]  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    problem  =  new  EstimationProblem(new  InvalidMatrixException( " ");  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    problem  =  new  EstimationProblem(new  InvalidMatrixException( " ");		non-compiled	[CE]  	19	None	add
362	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(null);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    problem  =  new  EstimationProblem(null);  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    problem  =  new  EstimationProblem(null);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	19	None	add
363	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(null,  parameters.length);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    problem  =  new  EstimationProblem(null,  parameters.length);  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    problem  =  new  EstimationProblem(null,  parameters.length);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	19	None	add
364	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(this,  parameters);  [CE]  EstimationProblem  is  abstract;  cannot  be  instantiated  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    problem  =  new  EstimationProblem(this,  parameters);  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    problem  =  new  EstimationProblem(this,  parameters);		non-compiled	[CE]  EstimationProblem  is  abstract;  cannot  be  instantiated	19	None	add
365	[BUG]  [BUGGY]    problem  =  new  EstimationProblem(new  InvalidMean());  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]    problem  =  new  EstimationProblem(new  InvalidMean());  [BUGGY]  final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	    problem  =  new  EstimationProblem(new  InvalidMean());		non-compiled	[CE]  cannot  find  symbol	19	None	add
395	[BUG]  [BUGGY]    int  cols  =  Math.min(cols,  factor);  [CE]  possible  loss  of  precision  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  [BUGGY]    int  cols  =  Math.min(cols,  factor);  [BUGGY]  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	    int  cols  =  Math.min(cols,  factor);		non-compiled	[CE]  possible  loss  of  precision	12	None	add
423	[BUG]  [BUGGY]  WeightedMeasurement  wm  =  measurements[i]  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i]  -  1;  [BUGGY]  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	WeightedMeasurement  wm  =  measurements[i]  -  1;	WeightedMeasurement  wm  =  measurements[i];  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
451	[BUG]  [BUGGY]    double[]  rows  =  getRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    double[]  rows  =  getRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    double[]  rows  =  getRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
452	[BUG]  [BUGGY]    double[]  rows  =  values[size()  ];  [CE]  cannot  find  symbol  values  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    double[]  rows  =  values[size()  ];  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    double[]  rows  =  values[size()  ];		non-compiled	[CE]  cannot  find  symbol  values	4	None	add
453	[BUG]  [BUGGY]    int  rows  =  this.maxCostEval.getRowCount();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  this.maxCostEval.getRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  this.maxCostEval.getRowCount();		non-compiled	[CE]  int  cannot  be  dereferenced	4	None	add
454	[BUG]  [BUGGY]    int  rows  =  this.maxCostEval  +  calculateRowCount();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  this.maxCostEval  +  calculateRowCount();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  this.maxCostEval  +  calculateRowCount();		non-compiled	[CE]  cannot  find  symbol	4	None	add
455	[BUG]  [BUGGY]    int  rows  =  this.maxCostEval.getRowIndex();  [CE]  int  cannot  be  dereferenced  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  [BUGGY]    int  rows  =  this.maxCostEval.getRowIndex();  [BUGGY]  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	    int  rows  =  this.maxCostEval.getRowIndex();		non-compiled	[CE]  int  cannot  be  dereferenced	4	None	add
481	[BUG]  [BUGGY]  checkInvariant();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  checkInvariant();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	checkInvariant();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
484	[BUG]  [BUGGY]  invalidate();  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {    [BUGGY]  invalidate();  [BUGGY]    final  int  rows  =  problem.getMeasurements().length;  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	invalidate();	updateJacobian();  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
511	[BUG]  [BUGGY]    estimates[i]  =  calculateMean(parameters[i]);  [CE]  cannot  find  symbol  estimates  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    estimates[i]  =  calculateMean(parameters[i]);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    estimates[i]  =  calculateMean(parameters[i]);		non-compiled	[CE]  cannot  find  symbol  estimates	8	None	add
513	[BUG]  [BUGGY]    estimates[i]  =  calculateMeanParameter(parameters[i]);  [CE]  cannot  find  symbol  estimates  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  [BUGGY]    estimates[i]  =  calculateMeanParameter(parameters[i]);  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	    estimates[i]  =  calculateMeanParameter(parameters[i]);		non-compiled	[CE]  cannot  find  symbol  estimates	8	None	add
543	[BUG]  [BUGGY]  final  int  rows  =  problem.getAllRangeParameters().length;  [CE]  cannot  find  symbol  [CONTEXT]  throws  EstimationException  {  updateJacobian();    [BUGGY]  final  int  rows  =  problem.getAllRangeParameters().length;  [BUGGY]  final  int  cols  =  problem.getAllParameters().length;  final  int  max=  cols  *  rows;  double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  max;  k  +=  cols)  {  sum  +=  jacobian[k  +  i]  *  jacobian[k  +  j];  }  jTj[i][j]  =  sum;  [CLASS]  AbstractEstimator  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  InvalidMatrixException  ime  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  k  max  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	final  int  rows  =  problem.getAllRangeParameters().length;	final  int  rows  =  problem.getMeasurements().length;  	non-compiled	[CE]  cannot  find  symbol	18	None	replace
572	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  rows;  i++)  {  [CE]  cannot  find  symbol  index  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  cols  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  cols  =  0;  i  <  rows;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  index	5	None	replace
574	[BUG]  [BUGGY]  for(int  i  =  0,  asPath  =  0;  i  <  rows;  i++)  {  [CE]  cannot  find  symbol  index  [CONTEXT]  protected  void  updateJacobian()  {  incrementJacobianEvaluationsCounter();  Arrays.fill(jacobian,  0);  [BUGGY]  for(int  i  =  0,  asPath  =  0;  i  <  rows;  i++)  {  [BUGGY]  WeightedMeasurement  wm  =  measurements[i];  double  factor  =  -Math.sqrt(wm.getWeight());  for  (int  j  =  0;  j  <  cols;  ++j)  {  jacobian[index++]  =  factor  *  wm.getPartial(parameters[j]);  }  }  }  [CLASS]  AbstractEstimator  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  EstimatedParameter[]  parameters  WeightedMeasurement  wm  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  double  cost  factor  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	for(int  i  =  0,  asPath  =  0;  i  <  rows;  i++)  {	for  (int  i  =  0,  index  =  0;  i  <  rows;  i++)  {  	non-compiled	[CE]  cannot  find  symbol  index	5	None	replace
