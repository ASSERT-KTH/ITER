bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] incrementJacobianEvaluationsCounter(); [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { [BUGGY] incrementJacobianEvaluationsCounter(); [BUGGY] Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	replace	
2	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { [BUGGY] [BUGGY] incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	73	73	1	add	
3	[BUG] [BUGGY] Arrays.fill(jacobian, 0); [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); [BUGGY] Arrays.fill(jacobian, 0); [BUGGY] for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	replace	
4	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); [BUGGY] [BUGGY] Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	74	74	1	add	
5	[BUG] [BUGGY] for (int i = 0, index = 0; i < rows; i++) { [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); [BUGGY] for (int i = 0, index = 0; i < rows; i++) { [BUGGY] WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	replace	
6	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); [BUGGY] [BUGGY] for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	75	75	1	add	
7	[BUG] [BUGGY] WeightedMeasurement wm = measurements[i]; [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { [BUGGY] WeightedMeasurement wm = measurements[i]; [BUGGY] double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	replace	
8	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { [BUGGY] [BUGGY] WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	76	76	1	add	
9	[BUG] [BUGGY] double factor = -Math.sqrt(wm.getWeight()); [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; [BUGGY] double factor = -Math.sqrt(wm.getWeight()); [BUGGY] for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	replace	
10	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; [BUGGY] [BUGGY] double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	77	77	1	add	
11	[BUG] [BUGGY] for (int j = 0; j < cols; ++j) { [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); [BUGGY] for (int j = 0; j < cols; ++j) { [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	replace	
12	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); [BUGGY] [BUGGY] for (int j = 0; j < cols; ++j) { jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	78	78	1	add	
13	[BUG] [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); [BUGGY] } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	replace	
14	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] protected void updateJacobian() { incrementJacobianEvaluationsCounter(); Arrays.fill(jacobian, 0); for (int i = 0, index = 0; i < rows; i++) { WeightedMeasurement wm = measurements[i]; double factor = -Math.sqrt(wm.getWeight()); for (int j = 0; j < cols; ++j) { [BUGGY] [BUGGY] jacobian[index++] = factor * wm.getPartial(parameters[j]); } } } [CLASS] AbstractEstimator [METHOD] updateJacobian [RETURN_TYPE] void  [VARIABLES] EstimatedParameter[] parameters WeightedMeasurement wm boolean double[] jacobian residuals WeightedMeasurement[] measurements double cost factor int cols costEvaluations i index j jacobianEvaluations maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	79	79	1	add	
16	[BUG] [BUGGY] updateJacobian(); [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  [BUGGY] updateJacobian(); [BUGGY]   final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	replace	
17	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  [BUGGY] [BUGGY] updateJacobian();  final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	162	162	1	add	
18	[BUG] [BUGGY] final int rows = problem.getMeasurements().length; [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  updateJacobian();  [BUGGY] final int rows = problem.getMeasurements().length; [BUGGY] final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	replace	
19	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  updateJacobian();  [BUGGY] [BUGGY] final int rows = problem.getMeasurements().length; final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	165	165	1	add	
20	[BUG] [BUGGY] final int cols = problem.getAllParameters().length; [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; [BUGGY] final int cols = problem.getAllParameters().length; [BUGGY] final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	replace	
21	[BUG] [BUGGY] [FE] ArrayIndexOutOfBoundsException testBoundParameters [CONTEXT] throws EstimationException {  updateJacobian();  final int rows = problem.getMeasurements().length; [BUGGY] [BUGGY] final int cols = problem.getAllParameters().length; final int max= cols * rows; double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < max; k += cols) { sum += jacobian[k + i] * jacobian[k + j]; } jTj[i][j] = sum; jTj[j][i] = sum; [CLASS] AbstractEstimator [METHOD] getCovariances [RETURN_TYPE] double[][]  EstimationProblem problem [VARIABLES] EstimatedParameter[] parameters InvalidMatrixException ime boolean double[] jacobian residuals WeightedMeasurement[] measurements wm double chiSquare cost criterion factor residual sum double[][] jTj EstimationProblem problem int cols costEvaluations i index j jacobianEvaluations k max maxCostEval rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	1.0	166	166	1	add	
