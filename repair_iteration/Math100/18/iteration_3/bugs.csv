bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this.resiver);  [CE]  cannot  find  symbol  resiver  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this.resiver);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this.resiver);	  WeightedMeasurement[]    wm    =    this.resiver.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  resiver	51	None	replace
2	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.restriction.getRMS(problem);  [CE]  cannot  find  symbol  restriction  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.restriction.getRMS(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.restriction.getRMS(problem);	  WeightedMeasurement[]    wm    =    this.resiver.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  restriction	51	None	replace
3	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  parameters);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  parameters);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
4	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  parameters);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  parameters);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
5	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
6	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(),  costEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(),  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(),  costEvaluations);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
7	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getStandardMeasurements();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problems.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
8	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  issues.getStandardMeasurements();  [CE]  cannot  find  symbol  issues  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  issues.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  issues.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problems.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  issues	20	None	replace
9	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(result,  cost);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(result,  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(result,  cost);	  EstimationProblem    problem    =    problem.getRMS(result);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	49	None	replace
10	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.resistances.getRMS(problem);  [CE]  cannot  find  symbol  resistances  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.resistances.getRMS(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.resistances.getRMS(problem);	  WeightedMeasurement[]    wm    =    problems.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol  resistances	50	None	replace
11	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost  +  1);	  EstimationProblem    problem    =    problem.getResidual(),    cost);    	non-compiled	[CE]  ';'  expected	58	None	replace
12	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  factor);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  factor);	  EstimationProblem    problem    =    problem.getResidual(),    cost);    	non-compiled	[CE]  ';'  expected	58	None	replace
13	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(),  cost);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(),  cost);	  EstimationProblem    problem    =    problem.getResidual(),    cost);    	non-compiled	[CE]  ';'  expected	58	None	replace
14	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  coefficient);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  coefficient);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  coefficient);	  EstimationProblem    problem    =    problem.getResidual(),    cost);    	non-compiled	[CE]  ';'  expected	58	None	replace
15	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  parameters);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(),  parameters);	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  ';'  expected	46	None	replace
16	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  costEvaluations);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(),  costEvaluations);	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  ';'  expected	46	None	replace
17	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(problem);	  WeightedMeasurement[]    wm    =    parameters.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
18	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(parameters);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(parameters);	  WeightedMeasurement[]    wm    =    parameters.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
19	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRows();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRows();	  WeightedMeasurement[]    wm    =    problems.getRows();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
20	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.resistances.getRows();  [CE]  cannot  find  symbol  resistances  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.resistances.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.resistances.getRows();	  WeightedMeasurement[]    wm    =    problems.getRows();    	non-compiled	[CE]  cannot  find  symbol  resistances	4	None	replace
21	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(null);	  EstimationProblem    wm    =    problem.getStandardProblem();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
22	[BUG]  [BUGGY]  EstimationProblem  wm  =  problems.getStandardProblem();  [CE]  cannot  find  symbol  problems  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problems.getStandardProblem();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problems.getStandardProblem();	  EstimationProblem    wm    =    problem.getStandardProblem();    	non-compiled	[CE]  cannot  find  symbol  problems	56	None	replace
23	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(problem);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStandardProblem(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardProblem(problem);	  EstimationProblem    wm    =    problem.getStandardProblem();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
24	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  parameters);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  parameters);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
25	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  parameters);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  parameters);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
26	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cols);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cols);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cols);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
27	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  +  1);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
28	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements().length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements().length  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements().length  -  1;	  int    wm    =    problem.getMeasurements()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
29	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements()  *  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  *  1;	  int    wm    =    problem.getMeasurements()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	19	None	replace
30	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  [0]  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements()  [0]  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  [0]  -  1;	  int    wm    =    problem.getMeasurements()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	19	None	replace
31	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  -  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRowCount()  -  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowCount()  -  2;	  int    cols    =    problem.getColumnCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
32	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  /  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnCount()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  /  2;	  int    cols    =    problem.getColumnCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
33	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1;	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  ';'  expected	67	None	replace
34	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters);	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  ';'  expected	67	None	replace
35	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  parameters;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  parameters;	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
36	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnEvaluations()  /  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  /  1;	  int    cols    =    problem.getColumnEvaluations()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
37	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  *  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnEvaluations()  *  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  *  1;	  int    cols    =    problem.getColumnEvaluations()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
38	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS1();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS1();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS1();	  WeightedMeasurement[]    wm    =    problem.getRMS2();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
39	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS3();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS3();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS3();	  WeightedMeasurement[]    wm    =    problem.getRMS2();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
40	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  cost);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this,  cost);	  EstimationProblem    problem    =    problem.getRMS(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	replace
41	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  error);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  error);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this,  error);	  EstimationProblem    problem    =    problem.getRMS(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	replace
42	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  parameters);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this,  parameters);	  EstimationProblem    problem    =    problem.getRMS(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	replace
43	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  data);  [CE]  cannot  find  symbol  data  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  data);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  data);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    metrics);    	non-compiled	[CE]  cannot  find  symbol  data	3	None	replace
44	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  parameters);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  parameters);	  int[]    measurements    =    problem.getMeasurements(),    cost);    	non-compiled	[CE]  ';'  expected	64	None	replace
45	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  cost);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStdMeasurements(),  cost);	  int[]    measurements    =    problem.getMeasurements(),    cost);    	non-compiled	[CE]  ';'  expected	64	None	replace
46	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cost,  parameters);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cost,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  cost,  parameters);	  int[]    measurements    =    problem.getMeasurements(),    cost);    	non-compiled	[CE]  ';'  expected	64	None	replace
47	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  /  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumns()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  /  2;	  int    cols    =    problem.getColumns()    -    2;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  *  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumns()  *  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  *  2;	  int    cols    =    problem.getColumns()    -    2;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [1];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [1];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors()  [1];	  EstimationProblem    problem    =    problem.getStdErrors()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
50	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0].getMeasurements();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0].getMeasurements();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors()  [0].getMeasurements();	  EstimationProblem    problem    =    problem.getStdErrors()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
51	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnSize()  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnSize()  -  1;	  int    cols    =    problem.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
52	[BUG]  [BUGGY]  int  cols  =  problem.getRowSize();  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRowSize();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowSize();	  int    cols    =    problem.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
53	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize()  +  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnSize()  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnSize()  +  1;	  int    cols    =    problem.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
54	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(resistance);  [CE]  cannot  find  symbol  resistance  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(resistance);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(resistance);	  WeightedMeasurement[]    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  resistance	43	None	replace
55	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(variable);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(variable);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(variable);	  WeightedMeasurement[]    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  	43	None	replace
56	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this.result);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this.result);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this.result);	  EstimationProblem    problem    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	40	None	replace
57	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(variable);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(variable);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(variable);	  EstimationProblem    problem    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	40	None	replace
58	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  /  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumns()  /  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  /  1;	  int    cols    =    problem.getColumns()    -    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
59	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  *  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumns()  *  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  *  1;	  int    cols    =    problem.getColumns()    -    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
60	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost,  parameters);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost,  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  cost,  parameters);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
61	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  coefficient);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  coefficient);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  cannot  find  symbol  coefficient	2	None	replace
62	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.resistances.getStandardMeasurements();  [CE]  cannot  find  symbol  resistances  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.resistances.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.resistances.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.messages.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  resistances	52	None	replace
63	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnCount()  /  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  /  1;	  int    cols    =    problem.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
64	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  *  1  +  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnCount()  *  1  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  *  1  +  1;	  int    cols    =    problem.getColumnCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
65	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  parameters;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStdMeasurements(),  parameters;	  int[]    measurements    =    problem.getStdMeasurements();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
66	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost  +  1);	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost);    	non-compiled	[CE]  ';'  expected	66	None	replace
67	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  cost);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  cost);	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost);    	non-compiled	[CE]  ';'  expected	66	None	replace
68	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS()  /  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS()  /  2;	  EstimationProblem    problem    =    problem.getRMS();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	22	None	replace
69	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  costEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors(),  costEvaluations);	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  ';'  expected	38	None	replace
70	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  parameters);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors(),  parameters);	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  ';'  expected	38	None	replace
71	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors()  /  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors()  /  2;	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	38	None	replace
72	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [1];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [1];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [1];	  EstimationProblem    problem    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
73	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS()  [0];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS()  [0];	  EstimationProblem    problem    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
74	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0]  /  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0]  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [0]  /  2;	  EstimationProblem    problem    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
75	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardMean();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStandardMean();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardMean();	  EstimationProblem    wm    =    problem.getMean();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
76	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStdMean();  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStdMean();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStdMean();	  EstimationProblem    wm    =    problem.getMean();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
77	[BUG]  [BUGGY]  int  cols  =  problem.getColsCount();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColsCount();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColsCount();	  int    cols    =    problem.getRowsCount();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
78	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRowsCount()  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowsCount()  -  1;	  int    cols    =    problem.getRowsCount();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
79	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  costEvaluations);	  int[]    measurements    =    problem.getMeasurements(),    cols);    	non-compiled	[CE]  ';'  expected	12	None	replace
80	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  0,  cols);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  0,  cols);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  0,  cols);	  int[]    measurements    =    problem.getMeasurements(),    cols);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols,  costEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols,  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  cols,  costEvaluations);	  int[]    measurements    =    problem.getMeasurements(),    cols);    	non-compiled	[CE]  ';'  expected	12	None	replace
82	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.messages();  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problems.messages();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.messages();	  WeightedMeasurement[]    wm    =    problem.messages();    	non-compiled	[CE]  cannot  find  symbol  problems	21	None	replace
83	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.message();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.message();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.message();	  WeightedMeasurement[]    wm    =    problem.messages();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
84	[BUG]  [BUGGY]  int  cols  =  problem.getCols();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getCols();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getCols();	  int    cols    =    problem.getRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]  int  cols  =  problem.getColsEvaluations();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColsEvaluations();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColsEvaluations();	  int    cols    =    problem.getRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
86	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  parameters);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  parameters);	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
87	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  cols);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  cols);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  cols);	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
88	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  parameters);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  parameters);	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
89	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  cols;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  cols;	  int[]    measurements    =    problem.getMeasurements(),    costEvaluations;    	non-compiled	[CE]  incompatible  types	39	None	replace
90	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  parameters;  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  parameters;	  int[]    measurements    =    problem.getMeasurements(),    costEvaluations;    	non-compiled	[CE]  incompatible  types	39	None	replace
91	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  parameters;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  parameters;	  int[]    measurements    =    problem.getMeasurements(),    costEvaluations;    	non-compiled	[CE]  incompatible  types	39	None	replace
92	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  costEvaluations;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStdMeasurements(),  costEvaluations;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStdMeasurements(),  costEvaluations;	  int[]    measurements    =    problem.getMeasurements(),    costEvaluations;    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
93	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  /  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnsCount()  /  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  /  1;	  int    cols    =    problem.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
94	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1  +  1;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  *  1  +  1;	  int    cols    =    problem.getColumnsCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
95	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.data.getStandardMeasurements();  [CE]  cannot  find  symbol  data  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.data.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.data.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.metadata.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  data	63	None	replace
96	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  /  2;  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnEvaluations()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  /  2;	  int    cols    =    problem.getColumnEvaluations()    -    2;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
97	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  *  2;  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnEvaluations()  *  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  *  2;	  int    cols    =    problem.getColumnEvaluations()    -    2;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
98	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS();	  WeightedMeasurement[]    wm    =    problems.getRMS();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
99	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  task.getRMS();  [CE]  cannot  find  symbol  task  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  task.getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  task.getRMS();	  WeightedMeasurement[]    wm    =    problems.getRMS();    	non-compiled	[CE]  cannot  find  symbol  task	29	None	replace
100	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  costEvaluations);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurement(),  costEvaluations);	  EstimationProblem    problem    =    problem.getMeasurement();    	non-compiled	[CE]  ';'  expected	8	None	replace
101	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  parameters);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurement(),  parameters);	  EstimationProblem    problem    =    problem.getMeasurement();    	non-compiled	[CE]  ';'  expected	8	None	replace
102	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  *  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  *  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  *  2;	  EstimationProblem    problem    =    problem.getMeasurements()    /    2;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	25	None	replace
103	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  [0]  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements()  [0]  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  [0]  +  1;	  int    wm    =    problem.getMeasurements()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
104	[BUG]  [BUGGY]  int  cols  =  parameters.getColumns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  parameters.getColumns();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  parameters.getColumns();	  int    cols    =    problems.getColumns();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
105	[BUG]  [BUGGY]  int  cols  =  this.resistance.getColumns();  [CE]  cannot  find  symbol  resistance  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  this.resistance.getColumns();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  this.resistance.getColumns();	  int    cols    =    problems.getColumns();    	non-compiled	[CE]  cannot  find  symbol  resistance	72	None	replace
106	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(problem);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getRMS(problem);	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
107	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(result);  [CE]  cannot  find  symbol  result  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(result);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getRMS(result);	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol  result	9	None	replace
108	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRMS(null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getRMS(null);	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
109	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMSsidualMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMSsidualMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMSsidualMeasurements();	  WeightedMeasurement[]    wm    =    problem.getRsidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
110	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRsidualMeasurements();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRsidualMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRsidualMeasurements();	  WeightedMeasurement[]    wm    =    problem.getRsidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol  problems	16	None	replace
111	[BUG]  [BUGGY]  int  cols  =  problem.getRowCount()  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRowCount()  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowCount()  -  1;	  int    cols    =    problem.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
112	[BUG]  [BUGGY]  int  cols  =  problem.getRowsCount()  -  2;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRowsCount()  -  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRowsCount()  -  2;	  int    cols    =    problem.getColumnsCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
113	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  /  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnsCount()  /  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  /  2;	  int    cols    =    problem.getColumnsCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
114	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getSyntheticProblem();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getSyntheticProblem();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem,  parameters.getSyntheticProblem();	  EstimationProblem    wm    =    problem.getSyntheticProblem();    	non-compiled	[CE]  ';'  expected	45	None	replace
115	[BUG]  [BUGGY]  EstimationProblem  wm  =  problems.getSyntheticProblem();  [CE]  cannot  find  symbol  problems  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problems.getSyntheticProblem();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problems.getSyntheticProblem();	  EstimationProblem    wm    =    problem.getSyntheticProblem();    	non-compiled	[CE]  cannot  find  symbol  problems	45	None	replace
116	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getSyntheticProblem(this);  [CE]  cannot  find  symbol  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getSyntheticProblem(this);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getSyntheticProblem(this);	  EstimationProblem    wm    =    problem.getSyntheticProblem();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
117	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  parameters);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  parameters);	  EstimationProblem    problem    =    problem.getRawStructure(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	26	None	replace
118	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  parameters);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  parameters);	  EstimationProblem    problem    =    problem.getRawStructure(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	26	None	replace
119	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  maxCostEval);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  maxCostEval);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  maxCostEval);	  EstimationProblem    problem    =    problem.getRawStructure(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	26	None	replace
120	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  parameters);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(null,  parameters);	  WeightedMeasurement[]    wm    =    problem.getRMS(null);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
121	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  cost);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(null,  cost);	  WeightedMeasurement[]    wm    =    problem.getRMS(null);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
122	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  null);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(null,  null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(null,  null);	  WeightedMeasurement[]    wm    =    problem.getRMS(null);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
123	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problem);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problem);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    parameters);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
124	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  problem);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  problem);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    parameters);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
125	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements().length  +  1;  [CE]  int  cannot  be  dereferenced  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements().length  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements().length  +  1;	  int    wm    =    problem.getMeasurements().length;    	non-compiled	[CE]  int  cannot  be  dereferenced	17	None	replace
126	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  *  2;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  *  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem()  *  2;	  EstimationProblem    problem    =    problem.getStandardProblem()    /    2;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	34	None	replace
127	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  /  2  +  1;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem()  /  2  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem()  /  2  +  1;	  EstimationProblem    problem    =    problem.getStandardProblem()    /    2;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	34	None	replace
128	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  parameters);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  parameters);	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
129	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost,  parameters);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cost,  parameters);	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
130	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1);	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
131	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost  +  1;	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  ';'  expected	59	None	replace
132	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  parameters;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  parameters;	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	59	None	replace
133	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters);	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  ';'  expected	59	None	replace
134	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost,  parameters;	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	59	None	replace
135	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getResidualMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getResidualMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getResidualMeasurements();	  WeightedMeasurement[]    wm    =    problems.getResidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
136	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  issues.getResidualMeasurements();  [CE]  cannot  find  symbol  issues  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  issues.getResidualMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  issues.getResidualMeasurements();	  WeightedMeasurement[]    wm    =    problems.getResidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol  issues	53	None	replace
137	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getColumns();  [CE]  cannot  find  symbol  problems  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problems.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getColumns();	  WeightedMeasurement[]    wm    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol  problems	48	None	replace
138	[BUG]  [BUGGY]  int  cols  =  problem.getRows()  -  1;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getRows()  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getRows()  -  1;	  int    cols    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
139	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  parameters;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStandardMeasurements(),  parameters;	  int[]    measurements    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
140	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getRsidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getRsidual();	  EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
141	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStandardResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardResidual();	  EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
142	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(this);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(this);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(this);	  EstimationProblem    problem    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
143	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  null);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  null);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(null,  null);	  EstimationProblem    problem    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
144	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  cost);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(null,  cost);	  EstimationProblem    problem    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
145	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  parameters);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  parameters);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  parameters);	  EstimationProblem    problem    =    problem.getStdErrors(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	54	None	replace
146	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  errors);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  errors);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  errors);	  EstimationProblem    problem    =    problem.getStdErrors(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	54	None	replace
147	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(null);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(null);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(null);	  EstimationProblem    problem    =    problem.getRMS();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	22	None	replace
148	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  costEvaluations);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardErrors(),  costEvaluations);	  EstimationProblem    problem    =    problem.getStandardErrors();    	non-compiled	[CE]  ';'  expected	55	None	replace
149	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.message.getStandardMeasurements();  [CE]  cannot  find  symbol  message  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.message.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.message.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.metadata.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  message	63	None	replace
150	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  factor;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  factor;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  factor;	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	59	None	replace
151	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  factor;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost,  factor;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost,  factor;	  EstimationProblem    problem    =    problem.getResidual(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	59	None	replace
152	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(value);  [CE]  cannot  find  symbol  value  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(value);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(value);	  WeightedMeasurement[]    wm    =    problem.getRMS(result);    	non-compiled	[CE]  cannot  find  symbol  value	28	None	replace
153	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1;	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
154	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations  +  1);	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
155	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  costEvaluations);  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  costEvaluations);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  costEvaluations);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    metrics);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
156	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  /  2  +  1;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  /  2  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  /  2  +  1;	  EstimationProblem    problem    =    problem.getMeasurements()    /    2;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	25	None	replace
157	[BUG]  [BUGGY]  int  wm  =  problem.getMeasurements()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  wm  =  problem.getMeasurements()  /  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  wm  =  problem.getMeasurements()  /  1;	  int    wm    =    problem.getMeasurements()    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	19	None	replace
158	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations  +  1);	  EstimationProblem    problem    =    problem.getRawStructure(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	26	None	replace
159	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnsCount()  *  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  *  1;	  int    cols    =    problem.getColumnsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
160	[BUG]  [BUGGY]  int  cols  =  problem.getColumnEvaluations()  +  2;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnEvaluations()  +  2;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnEvaluations()  +  2;	  int    cols    =    problem.getColumnEvaluations()    +    1;    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
161	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  *  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnCount()  *  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  *  1;	  int    cols    =    problem.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
162	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations;	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
163	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  parameters;	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
164	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.measurements.getStandardMeasurements();  [CE]  cannot  find  symbol  measurements  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.measurements.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.measurements.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.messages.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  measurements	52	None	replace
165	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(null,  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(null,  costEvaluations);	  EstimationProblem    problem    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
166	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0]  -  problem.getStdErrors();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0]  -  problem.getStdErrors();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors()  [0]  -  problem.getStdErrors();	  EstimationProblem    problem    =    problem.getStdErrors()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
167	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems.getStdErrors()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problems.getStdErrors()  [0];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problems.getStdErrors()  [0];	  EstimationProblem    problem    =    problem.getStdErrors()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	68	None	replace
168	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.result.getSyntheticProblem();  [CE]  cannot  find  symbol  result  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.result.getSyntheticProblem();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.result.getSyntheticProblem();	  EstimationProblem    wm    =    problem.getSyntheticProblem();    	non-compiled	[CE]  cannot  find  symbol  result	45	None	replace
169	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  this);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  this);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(problem,  this);	  WeightedMeasurement[]    wm    =    parameters.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
170	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.parameters.getRMS(problem);  [CE]  cannot  find  symbol  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.parameters.getRMS(problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.parameters.getRMS(problem);	  WeightedMeasurement[]    wm    =    parameters.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
171	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(this);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(this);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(this);	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	46	None	replace
172	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurementRestriction();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurementRestriction();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurementRestriction();	  EstimationProblem    problem    =    problem.getMeasurement();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	8	None	replace
173	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(null);  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(null);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRMS(null);	  WeightedMeasurement[]    wm    =    problem.getRMS(null);    	non-compiled	[CE]  cannot  find  symbol  problems	27	None	replace
174	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  -  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations  -  1);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
175	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getStandardProblem();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getStandardProblem();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem,  parameters.getStandardProblem();	  EstimationProblem    wm    =    problem.getStandardProblem();    	non-compiled	[CE]  ';'  expected	56	None	replace
176	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  costEvaluations;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  costEvaluations;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStandardMeasurements(),  costEvaluations;	  int[]    measurements    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
177	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  cost);  [CE]  cannot  find  symbol  resiver  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  cost);	  WeightedMeasurement[]    wm    =    this.resiver.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  resiver	51	None	replace
178	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  parameters);  [CE]  cannot  find  symbol  resiver  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  parameters);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.resiver.getRMS(problem,  parameters);	  WeightedMeasurement[]    wm    =    this.resiver.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  resiver	51	None	replace
179	[BUG]  [BUGGY]  int  cols  =  this.resistances.getColumns();  [CE]  cannot  find  symbol  resistances  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  this.resistances.getColumns();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  this.resistances.getColumns();	  int    cols    =    problems.getColumns();    	non-compiled	[CE]  cannot  find  symbol  resistances	72	None	replace
180	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cols);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cols);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cols);	  EstimationProblem    problem    =    problem.getStdErrors(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	54	None	replace
181	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations  +  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations  +  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations  +  1);	  EstimationProblem    problem    =    problem.getStdErrors(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	54	None	replace
182	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  -  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  cost  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  cost  -  1;	  EstimationProblem    problem    =    problem.getResidual(),    cost);    	non-compiled	[CE]  ';'  expected	58	None	replace
183	[BUG]  [BUGGY]  EstimationProblem  problem  =  problems.getMeasurements()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problems.getMeasurements()  [0];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problems.getMeasurements()  [0];	  EstimationProblem    problem    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	65	None	replace
184	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  cost.getRMS(this,  problem);  [CE]  double  cannot  be  dereferenced  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  cost.getRMS(this,  problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  cost.getRMS(this,  problem);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
185	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(this,  cost);  [CE]  cannot  find  symbol  problems  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problems.getRMS(this,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problems.getRMS(this,  cost);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  cannot  find  symbol  problems	2	None	replace
186	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  cost);  [CE]  cannot  find  symbol  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(this,  cost);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
187	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  -  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  -  1);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
188	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations  +  1;	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
189	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cost  +  1;	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
190	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  dataArea);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  dataArea);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  dataArea);	  int[]    measurements    =    problem.getMeasurements(),    cols);    	non-compiled	[CE]  ';'  expected	12	None	replace
191	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS4();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS4();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS4();	  WeightedMeasurement[]    wm    =    problem.getRMS2();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
192	[BUG]  [BUGGY]  int  cols  =  problem.getColsRowEvaluations();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColsRowEvaluations();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColsRowEvaluations();	  int    cols    =    problem.getRowEvaluations();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
193	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.messages();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.messages();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.messages();	  WeightedMeasurement[]    wm    =    problem.messages();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
194	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost  -  1);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost  -  1);	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost);    	non-compiled	[CE]  ';'  expected	66	None	replace
195	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  maxCostEval;  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  maxCostEval;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  costEvaluations,  maxCostEval;	  int[]    measurements    =    problem.getMeasurements(),    costEvaluations;    	non-compiled	[CE]  incompatible  types	39	None	replace
196	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  costEvaluations;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  costEvaluations;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors(),  costEvaluations;	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	38	None	replace
197	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors()  [0];  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors()  [0];  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors()  [0];	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	38	None	replace
198	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameter.getRMS(this,  problem);  [CE]  cannot  find  symbol  parameter  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameter.getRMS(this,  problem);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameter.getRMS(this,  problem);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    parameters);    	non-compiled	[CE]  cannot  find  symbol  parameter	1	None	replace
199	[BUG]  [BUGGY]  int  cols  =  problems.getRows();  [CE]  cannot  find  symbol  problems  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problems.getRows();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problems.getRows();	  int    cols    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol  problems	6	None	replace
200	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.residual;  [CE]  cannot  find  symbol  residual  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.residual;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.residual;	  EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol  residual	44	None	replace
201	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStdResidual();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStdResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStdResidual();	  EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
202	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  costEvaluations);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(this,  costEvaluations);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(this,  costEvaluations);	  EstimationProblem    problem    =    problem.getRMS(this);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	41	None	replace
203	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  issues.getRMS();  [CE]  cannot  find  symbol  issues  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  issues.getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  issues.getRMS();	  WeightedMeasurement[]    wm    =    problems.getRMS();    	non-compiled	[CE]  cannot  find  symbol  issues	29	None	replace
204	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getStandardMeasurement();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getStandardMeasurement();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getStandardMeasurement();	  EstimationProblem    wm    =    problem.getMean();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
205	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problems);  [CE]  cannot  find  symbol  problems  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problems);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRMS(this,  problems);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    parameters);    	non-compiled	[CE]  cannot  find  symbol  problems	1	None	replace
206	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRsidualMeasurements();  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getRsidualMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getRsidualMeasurements();	  WeightedMeasurement[]    wm    =    problem.getRsidualMeasurements();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
207	[BUG]  [BUGGY]  int  cols  =  problem.getColsRows();  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColsRows();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColsRows();	  int    cols    =    problem.getRows();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
208	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  cost);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getErrors(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getErrors(),  cost);	  EstimationProblem    problem    =    problem.getErrors();    	non-compiled	[CE]  ';'  expected	38	None	replace
209	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameter.getRows();  [CE]  cannot  find  symbol  parameter  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameter.getRows();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameter.getRows();	  WeightedMeasurement[]    wm    =    problems.getRows();    	non-compiled	[CE]  cannot  find  symbol  parameter	4	None	replace
210	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  factor);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  costEvaluations,  factor);	  EstimationProblem    problem    =    problem.getStdErrors(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	54	None	replace
211	[BUG]  [BUGGY]  int  cols  =  problem.getColumnsCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnsCount()  *  2  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnsCount()  *  2  -  1;	  int    cols    =    problem.getColumnsCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
212	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameter);  [CE]  cannot  find  symbol  parameter  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameter);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(this,  parameter);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    metrics);    	non-compiled	[CE]  cannot  find  symbol  parameter	3	None	replace
213	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  cost);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStandardMeasurements(),  cost);	  int[]    measurements    =    problem.getMeasurements(),    cost);    	non-compiled	[CE]  ';'  expected	64	None	replace
214	[BUG]  [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  coefficient);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getMeasurements(),  coefficient);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getMeasurements(),  coefficient);	  int[]    measurements    =    problem.getMeasurements(),    cost);    	non-compiled	[CE]  ';'  expected	64	None	replace
215	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost);	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  ';'  expected	46	None	replace
216	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(result);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(result);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(result);	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	46	None	replace
217	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getSyntheticProblem(),  cost;	  EstimationProblem    problem    =    problem.getSyntheticProblem();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	46	None	replace
218	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  factor);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getResidual(),  costEvaluations,  factor);	  EstimationProblem    problem    =    problem.getResidual(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	23	None	replace
219	[BUG]  [BUGGY]  int  cols  =  problem.getColumns()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumns()  *  2  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumns()  *  2  -  1;	  int    cols    =    problem.getColumns()    -    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
220	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRMS(remaining);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRMS(remaining);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRMS(remaining);	  EstimationProblem    problem    =    problem.getRMS(problem);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	40	None	replace
221	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  cost);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurement(),  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurement(),  cost);	  EstimationProblem    problem    =    problem.getMeasurement();    	non-compiled	[CE]  ';'  expected	8	None	replace
222	[BUG]  [BUGGY]  int  cols  =  problem.getColumnSize()  +  costEvaluations;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnSize()  +  costEvaluations;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnSize()  +  costEvaluations;	  int    cols    =    problem.getColumnSize();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
223	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(problem);  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(problem);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(problem);	  EstimationProblem    problem    =    problem.getStandardProblem(null);    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	47	None	replace
224	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors()  -  problem.getStandardErrors();  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors()  -  problem.getStandardErrors();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardErrors()  -  problem.getStandardErrors();	  EstimationProblem    problem    =    problem.getStandardErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	55	None	replace
225	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  cost;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  cost;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardErrors(),  cost;	  EstimationProblem    problem    =    problem.getStandardErrors();    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	55	None	replace
226	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  cost);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardErrors(),  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardErrors(),  cost);	  EstimationProblem    problem    =    problem.getStandardErrors();    	non-compiled	[CE]  ';'  expected	55	None	replace
227	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  factor);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  costEvaluations,  factor);	  EstimationProblem    problem    =    problem.getStandardProblem(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	33	None	replace
228	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters!=  null?  parameters.getRMS(this):  problem;  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters!=  null?  parameters.getRMS(this):  problem;  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters!=  null?  parameters.getRMS(this):  problem;	  WeightedMeasurement[]    wm    =    parameters.getRMS(this);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
229	[BUG]  [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  cols);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problem.getStandardMeasurements(),  cols);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problem.getStandardMeasurements(),  cols);	  int[]    measurements    =    problem.getMeasurements(),    cols);    	non-compiled	[CE]  ';'  expected	12	None	replace
230	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost,  factor);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  cost,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  cost,  factor);	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
231	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  factor);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors(),  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors(),  factor);	  EstimationProblem    problem    =    problem.getStdErrors(),    cost);    	non-compiled	[CE]  ';'  expected	69	None	replace
232	[BUG]  [BUGGY]  int  cols  =  problem.getColumnCount()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int  cols  =  problem.getColumnCount()  *  2  -  1;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int  cols  =  problem.getColumnCount()  *  2  -  1;	  int    cols    =    problem.getColumnCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
233	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.measures.getStandardMeasurements();  [CE]  cannot  find  symbol  measures  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.measures.getStandardMeasurements();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.measures.getStandardMeasurements();	  WeightedMeasurement[]    wm    =    problem.messages.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  measures	52	None	replace
234	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  measurements.getRMS();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  measurements.getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  measurements.getRMS();	  WeightedMeasurement[]    wm    =    problems.getRMS();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
235	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  this.data.getRMS(problem,  cost);  [CE]  cannot  find  symbol  data  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  this.data.getRMS(problem,  cost);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  this.data.getRMS(problem,  cost);	  WeightedMeasurement[]    wm    =    problem.getRMS(this,    cost);    	non-compiled	[CE]  cannot  find  symbol  data	2	None	replace
236	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getResidual();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getResidual();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem,  parameters.getResidual();	  EstimationProblem    wm    =    problem.getResidual();    	non-compiled	[CE]  ';'  expected	44	None	replace
237	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem.getMeanEvaluation();  [CE]  cannot  find  symbol  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem.getMeanEvaluation();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem.getMeanEvaluation();	  EstimationProblem    wm    =    problem.getMean();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
238	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getMean();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getMean();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem,  parameters.getMean();	  EstimationProblem    wm    =    problem.getMean();    	non-compiled	[CE]  ';'  expected	57	None	replace
239	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(remaining);  [CE]  cannot  find  symbol  remaining  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(remaining);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(remaining);	  WeightedMeasurement[]    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  remaining	43	None	replace
240	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(restriction);  [CE]  cannot  find  symbol  restriction  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  problem.getRMS(restriction);  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  problem.getRMS(restriction);	  WeightedMeasurement[]    wm    =    problem.getRMS(problem);    	non-compiled	[CE]  cannot  find  symbol  restriction	43	None	replace
241	[BUG]  [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getColumns();  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  WeightedMeasurement[]  wm  =  parameters.getColumns();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	WeightedMeasurement[]  wm  =  parameters.getColumns();	  WeightedMeasurement[]    wm    =    problem.getColumns();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
242	[BUG]  [BUGGY]  int[]  measurements  =  problems.getStandardMeasurements();  [CE]  cannot  find  symbol  problems  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problems.getStandardMeasurements();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problems.getStandardMeasurements();	  int[]    measurements    =    problem.getStandardMeasurements();    	non-compiled	[CE]  cannot  find  symbol  problems	11	None	replace
243	[BUG]  [BUGGY]  int[]  measurements  =  problems.getStdMeasurements();  [CE]  cannot  find  symbol  problems  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  int[]  measurements  =  problems.getStdMeasurements();  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	int[]  measurements  =  problems.getStdMeasurements();	  int[]    measurements    =    problem.getStdMeasurements();    	non-compiled	[CE]  cannot  find  symbol  problems	10	None	replace
244	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0],  cost);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStdErrors()  [0],  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStdErrors()  [0],  cost);	  EstimationProblem    problem    =    problem.getStdErrors()    [0];    	non-compiled	[CE]  ';'  expected	68	None	replace
245	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  factor;  [CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  factor;  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getStandardProblem(),  cost,  factor;	  EstimationProblem    problem    =    problem.getStandardProblem(),    cost;    	non-compiled	[CE]  variable  problem  is  already  defined  in  method  getRMS(EstimationProblem)	67	None	replace
246	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  factor);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getRawStructure(),  costEvaluations,  factor);	  EstimationProblem    problem    =    problem.getRawStructure(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	26	None	replace
247	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  factor);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  factor);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements(),  costEvaluations,  factor);	  EstimationProblem    problem    =    problem.getMeasurements(),    costEvaluations);    	non-compiled	[CE]  ';'  expected	24	None	replace
248	[BUG]  [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getRMS();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  wm  =  problem,  parameters.getRMS();  [BUGGY]      double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  wm  =  problem,  parameters.getRMS();	  EstimationProblem    wm    =    problem.getRMS();    	non-compiled	[CE]  ';'  expected	9	None	replace
249	[BUG]  [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0],  cost);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  double  getRMS(EstimationProblem  problem)  {      [BUGGY]  EstimationProblem  problem  =  problem.getMeasurements()  [0],  cost);  [BUGGY]      WeightedMeasurement[]  wm  =  problem.getMeasurements();  double  criterion  =  0;  for  (int  i  =  0;  i  <  wm.length;  ++i)  {  double  residual  =  wm[i].getResidual();  criterion  +=  wm[i].getWeight()  *  residual  *  residual;  }  return  Math.sqrt(criterion  /  wm.length);  }  [CLASS]  AbstractEstimator  [METHOD]  getRMS  [RETURN_TYPE]  double  EstimationProblem  problem  [VARIABLES]  EstimatedParameter[]  parameters  boolean  double[]  jacobian  residuals  WeightedMeasurement[]  measurements  wm  double  cost  criterion  factor  residual  EstimationProblem  problem  int  cols  costEvaluations  i  index  j  jacobianEvaluations  maxCostEval  rows  	projects/Math100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java	0.31622776601683794	127	127	1	replace	EstimationProblem  problem  =  problem.getMeasurements()  [0],  cost);	  EstimationProblem    problem    =    problem.getMeasurements()    [0];    	non-compiled	[CE]  ';'  expected	65	None	replace
